<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about counsel)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/counsel.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 31 May 2025 02:21:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs is easy if you read code</title><link>http://redguardtoo.github.io/posts/emacs-is-easy-if-you-read-code/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
If you regard a package as a collection of APIs and read its code, Emacs is easy to master. 
&lt;/p&gt;

&lt;p&gt;
For example, after reading &lt;a href="https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/"&gt;using counsel-ag and wgrep to edit multiple files&lt;/a&gt;, I dig the code of &lt;code&gt;counsel-ag-occur&lt;/code&gt; from &lt;code&gt;counsel.el&lt;/code&gt; (v0.9.1),
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun counsel-ag-occur ()
  "Generate a custom occur buffer for `counsel-ag'."
  (unless (eq major-mode 'ivy-occur-grep-mode)
    (ivy-occur-grep-mode))
  (setq default-directory counsel--git-grep-dir)
  (let* ((regex (counsel-unquote-regex-parens
                 (setq ivy--old-re
                       (ivy--regex
                        (progn (string-match "\"\\(.*\\)\"" (buffer-name))
                               (match-string 1 (buffer-name)))))))
         (cands (split-string
                 (shell-command-to-string
                  (format counsel-ag-base-command (shell-quote-argument regex)))
                 "\n"
                 t)))
    ;; Need precise number of header lines for `wgrep' to work.
    (insert (format "-*- mode:grep; default-directory: %S -*-\n\n\n"
                    default-directory))
    (insert (format "%d candidates:\n" (length cands)))
    (ivy--occur-insert-lines
     (mapcar
      (lambda (cand) (concat "./" cand))
      cands))))
(ivy-set-occur 'counsel-ag 'counsel-ag-occur)
(ivy-set-display-transformer 'counsel-ag 'counsel-git-grep-transformer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Inside &lt;code&gt;counsel-ag-occur&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The variable &lt;code&gt;regex&lt;/code&gt; is the regular expression built from the filter string you input. Please note that &lt;code&gt;regex&lt;/code&gt; is unquoted by &lt;code&gt;counsel-unquote-regex-parens&lt;/code&gt; so it can be used in shell. If you use &lt;code&gt;regex&lt;/code&gt; in Emacs Lisp, you don't need unquote it&lt;/li&gt;
&lt;li&gt;The variable &lt;code&gt;cands&lt;/code&gt; is the candidate lines created by running &lt;code&gt;ag&lt;/code&gt; with &lt;code&gt;regex&lt;/code&gt; as parameters in shell&lt;/li&gt;
&lt;li&gt;Then a wgrep-friendly buffer is created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So five minutes code reading is enough to implement similar features.
&lt;/p&gt;

&lt;p&gt;
My project uses Perforce as VCS. So &lt;b&gt;I need check out files and make them writable before using wgrep&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Code of &lt;code&gt;wgrep.el&lt;/code&gt; (v2.1.10),
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun wgrep-prepare-context ()
  (save-restriction
    (let ((start (wgrep-goto-first-found))
          (end (wgrep-goto-end-of-found)))
      (narrow-to-region start end)
      (goto-char (point-min))
      (funcall wgrep-results-parser))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;wgrep-results-parser&lt;/code&gt; is actually alias of &lt;code&gt;wgrep-parse-command-results&lt;/code&gt; whose code is too much to paste here. Please run &lt;code&gt;M-x find-function wgrep-parse-command-results&lt;/code&gt; to read its code.
&lt;/p&gt;

&lt;p&gt;
By combining &lt;code&gt;wgrep-prepare-context&lt;/code&gt; and &lt;code&gt;wgrep-parse-command-results&lt;/code&gt; I got my own &lt;code&gt;access-files-in-wgrep-buffer&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun access-files-in-wgrep-buffer()
  (interactive)
  (save-restriction
    (let* ((start (wgrep-goto-first-found))
           (end (wgrep-goto-end-of-found))
           fn-accessed)
      (narrow-to-region start end)
      (goto-char (point-min))
      (unless (featurep 'wgrep) (require 'featurep))
      (while (not (eobp))
        (if (looking-at wgrep-line-file-regexp)
            (let* ((fn (match-string-no-properties 1)))
              (unless (string= fn fn-accessed)
                (setq fn-accessed fn)
                (message "File relative path=%s" fn))))
        (forward-line 1)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
You can replace the line &lt;code&gt;(message "File relative path=%s" fn)&lt;/code&gt; with &lt;code&gt;(shell-command (format "any-shell-cli %s" fn))&lt;/code&gt; to &lt;b&gt;do anything on the files&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Please insert &lt;code&gt;access-files-in-wgrep-buffer&lt;/code&gt; into &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; and run &lt;code&gt;M-x access-files-in-wgrep-buffer&lt;/code&gt; in wgrep buffer to have a test.
&lt;/p&gt;

&lt;p&gt;
For example, I modified &lt;code&gt;access-files-in-wgrep-buffer&lt;/code&gt; to &lt;code&gt;p4edit-in-grep-buffer&lt;/code&gt; to checkout files under &lt;a href="https://www.perforce.com/"&gt;Perforce&lt;/a&gt; control,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun p4edit-in-wgrep-buffer()
  "'p4 edit' files in wgrep buffer.
Turn off `read-only-mode' of opened files."
  (interactive)
  (save-restriction
    (let* ((start (wgrep-goto-first-found))
           (end (wgrep-goto-end-of-found))
           fn-accessed)
      (narrow-to-region start end)
      (goto-char (point-min))
      (unless (featurep 'wgrep) (require 'featurep))
      (while (not (eobp))
        (if (looking-at wgrep-line-file-regexp)
            (let* ((filename (match-string-no-properties 1)) buf)
              (unless (string= filename fn-accessed)
                (setq fn-accessed filename)
                (shell-command (format "p4 edit %s" filename))
                (if (setq buf (get-file-buffer filename))
                    (with-current-buffer buf
                      ;; turn off read-only since we've already `p4 edit'
                      (read-only-mode -1))))))
        (forward-line 1)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>counsel</category><category>emacs</category><category>en</category><category>ivy</category><guid>http://redguardtoo.github.io/posts/emacs-is-easy-if-you-read-code/</guid><pubDate>Tue, 09 May 2017 13:38:06 GMT</pubDate></item></channel></rss>