<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about elisp)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/elisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 20 Jan 2025 05:51:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Debug Emacs Lisp code the hard way</title><link>http://redguardtoo.github.io/posts/debug-emacs-lisp-code-the-hard-way/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;I &lt;a href="https://github.com/emacs-helm/helm/issues/448"&gt;met some issue&lt;/a&gt; when using helm several days ago. &lt;/p&gt; &lt;p&gt; With the help from Michael Heerdegen, I can locate the line error message is dumped. &lt;/p&gt; &lt;p&gt; But the problem is I cannot get the backtrace at all. &lt;/p&gt; &lt;p&gt; So I insert some &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html"&gt;backtrace printing code&lt;/a&gt; above that line and "M-x eval-buffer": &lt;/p&gt;   


&lt;pre class="prettyprint "&gt;

(with-output-to-temp-buffer "backtrace-output"
  (let ((var 1))
    (save-excursion
      (setq var (eval '(progn
                         (1+ var)
                         (list 'testing (backtrace))))))))
&lt;/pre&gt;


   &lt;p&gt; It turns out that some third party package I installed changes the emacs variable "display-buffer-function". I guess that's why the backtrace is blocked. Because backtrace is usually dumped into a backtrace buffer. And backtrace buffer's is actually influenced by the variable. &lt;/p&gt;</description><category>debug</category><category>elisp</category><category>emacs</category><category>en</category><guid>http://redguardtoo.github.io/posts/debug-emacs-lisp-code-the-hard-way/</guid><pubDate>Wed, 19 Mar 2014 19:45:00 GMT</pubDate></item><item><title>Add current directory into load-path in Emacs</title><link>http://redguardtoo.github.io/posts/add-current-directory-into-load-path-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;Useful when developing emacs plugin: &lt;/p&gt;

&lt;pre class="prettyprint lang-lisp"&gt;
(defun add-pwd-into-load-path ()
  "add current directory into load-path, useful for elisp developers"
  (interactive)
  (let ((dir (expand-file-name default-directory)))
    (if (not (memq dir load-path))
        (add-to-list 'load-path dir)
        )
    (message "Directory added into load-path:%s" dir)
    )
  )
&lt;/pre&gt;</description><category>elisp</category><category>emacs</category><category>en</category><category>programming</category><guid>http://redguardtoo.github.io/posts/add-current-directory-into-load-path-in-emacs/</guid><pubDate>Mon, 17 Feb 2014 13:24:23 GMT</pubDate></item><item><title>Convert multiple line into one big string in Emacs</title><link>http://redguardtoo.github.io/posts/convert-multiple-line-into-one-big-string-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
This command converts selected region in Emacs into one string and put it into the kill ring.
&lt;/p&gt;

&lt;p&gt;
Why I need this command? I'm doing some web developement now. I've got a  javascript API whose parameter is a string in html syntax. I write that beautifully indented multiple lines string in html editor to make sure the string is correct. Then I convert the multiple lines  string into one string without line breaks so that I can paste the one line string into my javascript code.
&lt;/p&gt;

&lt;p&gt;
In certain situation, this method actually makes code more readable.
&lt;/p&gt;

&lt;p&gt;
Here is code you can paste into your .emacs:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun strip-convert-lines-into-one-big-string (beg end)
"strip and convert selected lines into one big string which is copied into kill ring.
When transient-mark-mode is enabled, if no region is active then only the
current line is acted upon.

If the region begins or ends in the middle of a line, that entire line is
copied, even if the region is narrowed to the middle of a line.

Current position is preserved."
  (interactive "r")
  (let (str (orig-pos (point-marker)))
  (save-restriction
    (widen)
    (when (and transient-mark-mode (not (use-region-p)))
      (setq beg (line-beginning-position)
            end (line-beginning-position 2)))

    (goto-char beg)
    (setq beg (line-beginning-position))
    (goto-char end)
    (unless (= (point) (line-beginning-position))
      (setq end (line-beginning-position 2)))

    (goto-char beg)
    (setq str (replace-regexp-in-string "[ \t]*\n" "" (replace-regexp-in-string "^[ \t]+" "" (buffer-substring-no-properties beg end))))
    ;; (message "str=%s" str)
    (kill-new str)
    (goto-char orig-pos)))
  )
(global-set-key (kbd "C-c C-y") 'strip-convert-lines-into-one-big-string)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>en</category><guid>http://redguardtoo.github.io/posts/convert-multiple-line-into-one-big-string-in-emacs/</guid><pubDate>Wed, 17 Apr 2013 14:14:00 GMT</pubDate></item><item><title>My work flow to debug emacs plugin</title><link>http://redguardtoo.github.io/posts/my-work-flow-to-debug-emacs-plugin/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;Author: Chen Bin &amp;lt;chenbin.sh AT gmail DOT com&amp;gt; Created: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2013-03-30 Sat&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; This is my quick guide on how to start debugging elisp. It's written for developers who are already experienced on debugging program but too lazy to read the &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug"&gt;Edebug manual&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; The most critical set up for the debugging is to set the hot key "C-h C-f" to the command "find-function" so you can jump the definition of the function easily. &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;(global-set-key (kbd &lt;span style="color: #70c0b1;"&gt;"C-h C-f"&lt;/span&gt;) 'find-function)
&lt;/pre&gt;   &lt;p&gt; Here is my workflow. &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;start the debugging&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;ul&gt; &lt;li&gt;Jump to the definition of the command (The hot key is "C-h C-f", as I mentioned before). &lt;/li&gt; &lt;li&gt;Run "M-x edebug-defun" . This will set the breakpoint into the entry of the command. BTW, I run "M-x eval-defun" in the function body to undo "edebug-defun". &lt;/li&gt; &lt;li&gt;Run the command to be debugged from Emacs &lt;/li&gt; &lt;li&gt;Press "space" key (M-x edebug-step-mode) to debug the program step by step &lt;/li&gt; &lt;li&gt;Watch the value of expression in the mini-buffer when you press "space" key &lt;/li&gt; &lt;/ul&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;basic debug operation&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;ul&gt; &lt;li&gt;Press "i" key (M-x edebug-step-in) to step in   &lt;/li&gt; &lt;li&gt;Press "o" key (M-x edebug-step-out) to step out  &lt;/li&gt; &lt;li&gt;Press "b" key (M-x edebug-set-breakpoint) to set the break point (press "u" key unset break point. I don't use this though) &lt;/li&gt; &lt;li&gt;Press "g" key (M-x edebug-go-mode) to continue &lt;/li&gt; &lt;li&gt;Press "h" key (M-x edebug-goto-here) to proceed until at the current line &lt;/li&gt; &lt;/ul&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;Watch the variable and functions&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;ul&gt; &lt;li&gt;Press "e" key (M-x edebug-eval-expression) to run the expression in the context outside of Edebug. Basically it means print a variable's value. Very useful.  &lt;/li&gt; &lt;li&gt;Press "C-x C-e" key (M-x edebug-eval-last-sexp) in the context outside of Edebug. Similar to "e", useful if you are lazy to input the expression manually. &lt;/li&gt; &lt;/ul&gt;   &lt;p&gt; "Outside of Edebug" means you are only watching the variable's value. You will NOT change the status of program being debugged &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;Set the variable&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;ul&gt; &lt;li&gt;Press "M-:" key (M-x eval-expression) to evaluate the expression in the context of Edebug itself. &lt;/li&gt; &lt;/ul&gt;   &lt;p&gt; I usually don't do this. It's not my debugging style. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>en</category><guid>http://redguardtoo.github.io/posts/my-work-flow-to-debug-emacs-plugin/</guid><pubDate>Sat, 30 Mar 2013 15:08:00 GMT</pubDate></item><item><title>Open url in Emacs with external browser</title><link>http://redguardtoo.github.io/posts/open-url-in-emacs-with-external-browser/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;Here is some handy elisp function which use browse-url-generic to open the url in external browser (firefox, for example). &lt;/p&gt; &lt;p&gt; The key point is how to detect the url. If we are in w3m-mode, we will use the link under cursor or the URI of current web page. Or else, we will let browse-url-generic to detect the url. &lt;/p&gt;    &lt;pre class="src src-elisp"&gt;(&lt;span style="color: #b5bd68;"&gt;defun&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;w3mext-open-link-or-image-or-url&lt;/span&gt; ()
  &lt;span style="color: #b294bb;"&gt;"Opens the current link or image or current page's uri or any url-like text under cursor in firefox."&lt;/span&gt;
  (interactive)
  (&lt;span style="color: #b5bd68;"&gt;let&lt;/span&gt; (url)
    (&lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt; (string= major-mode &lt;span style="color: #8abeb7;"&gt;"w3m-mode"&lt;/span&gt;)
        (setq url (or (w3m-anchor) (w3m-image) w3m-current-url)))
    (browse-url-generic (&lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt; url url (car (browse-url-interactive-arg &lt;span style="color: #8abeb7;"&gt;"URL: "&lt;/span&gt;))))
    ))
(global-set-key (kbd &lt;span style="color: #8abeb7;"&gt;"C-c b"&lt;/span&gt;) 'w3mext-open-link-or-image-or-url)

&lt;/pre&gt;   &lt;p&gt; To specify the external browser like firefox, add below code into ~/.emacs: &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;&lt;span style="color: #969896; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;`C-h v browse-url-generic-program RET` to see the documentation&lt;/span&gt;

&lt;span style="color: #969896; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;*is-a-mac* and *linux* is the boolean constants defined by me&lt;/span&gt;

(setq browse-url-generic-program
      (&lt;span style="color: #b5bd68;"&gt;cond&lt;/span&gt;
       (*is-a-mac* &lt;span style="color: #8abeb7;"&gt;"open"&lt;/span&gt;)
       (*linux* (executable-find &lt;span style="color: #8abeb7;"&gt;"firefox"&lt;/span&gt;))
       ))
&lt;/pre&gt;</description><category>browser</category><category>elisp</category><category>emacs</category><category>en</category><guid>http://redguardtoo.github.io/posts/open-url-in-emacs-with-external-browser/</guid><pubDate>Mon, 28 Jan 2013 10:59:00 GMT</pubDate></item><item><title>Toggle http proxy in emacs-w3m</title><link>http://redguardtoo.github.io/posts/toggle-http-proxy-in-emacs-w3m/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="http://www.emacswiki.org/emacs/emacs-w3m"&gt;emacs-w3m&lt;/a&gt; is a browser which handles all my basic web surfing needs.
&lt;/p&gt;

&lt;p&gt;
For some reason, I need switch my http proxy frequently.
&lt;/p&gt;

&lt;p&gt;
The solution is to set/unset the environment variable "http_proxy" in elisp code. Restarting the w3m session after change the environment variable is not needed at all.
&lt;/p&gt;

&lt;p&gt;
Here is my code:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun toggle-env-http-proxy ()
  "set/unset the environment variable http_proxy which w3m uses"
  (interactive)
  (let ((proxy "http://127.0.0.1:8000"))
    (if (string= (getenv "http_proxy") proxy)
        ;; clear the proxy
        (progn
          (setenv "http_proxy" "")
          (message "env http_proxy is empty now"))
      ;; set the proxy
      (setenv "http_proxy" proxy)
      (message "env http_proxy is %s now" proxy))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>en</category><category>http</category><category>proxy</category><guid>http://redguardtoo.github.io/posts/toggle-http-proxy-in-emacs-w3m/</guid><pubDate>Fri, 04 Jan 2013 17:50:00 GMT</pubDate></item><item><title>Emacs Lisp并不难学</title><link>http://redguardtoo.github.io/posts/emacs-lisp-bin-bu-nan-xue/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;作者:陈斌 (redguardtoo) &lt;/p&gt; &lt;p&gt; 原创日期: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2012-11-30 五&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; 本文的目的是把Lisp去神秘化. &lt;/p&gt; &lt;p&gt; 我学的是Emacs Lisp(Emacs Lisp),开发环境也是Emacs.所以我举的例子都是只基于Elisp. &lt;/p&gt; &lt;p&gt; 本文针对的读者是有相当经验的开发者,目的是尽可能简明扼要地突出重点. &lt;/p&gt; &lt;p&gt; 我对于目前的主流开发语言都很熟悉,但是Lisp还只能算是入门水准,所以错过很多Lisp精彩之处是很可能的. &lt;/p&gt; &lt;p&gt; 我所谓的重点,主要是指Lisp对于开发一个现实世界的产品有什么优点. &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;所有的函数和数据可以在系统运行时改变&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;p&gt;其意义是,假设你一个系统上线了,你可以随时改变正在运行的代码,不需要重启系统. &lt;/p&gt; &lt;p&gt; 我的理解是,一个函数实际上就是带有字符串Key(该key就是函数名)的数据,运行某个函数就是在系统运行时根据Key找到对应的数据(或者代码,在Lips中是一回事)运行之. &lt;/p&gt; &lt;p&gt; 例如,我可以在hook中申明某个函数将被调用,而这个函数的定义可以还不存在.系统在*运行时*才会去寻找这个函数.解释一下,hook可以认为是事件触发机制,就是在系统运行的某个时刻调用用户自定义的函数) &lt;/p&gt; &lt;p&gt; 优点是灵活性很高.缺点是Lisp写的东西快不了. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;没有namespace,所有的函数默认都是可以全局访问的&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;正因为这两条,所以要多打字(每个函数都要手动输入名字前缀). &lt;/p&gt; &lt;p&gt; 这点我完全可以接受,没有namespace就是多打点字而已.那些不了解历史或者没有用过C的初级程序员可能会大惊小怪.实际上没什么大不了的. &lt;/p&gt; &lt;p&gt; 所有函数都可以访问在Emacs场景下有个巨大的优点,见下一条. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;defadivce可以改变系统中任意函数的行为.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;defadvice可以重定义系统中的任意函数.原因如前文所说. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;循环语句和条件判断语句&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;p&gt;和其他语言没什么不同,foreach之类的语法糖也不少. &lt;/p&gt; &lt;p&gt; 我唯一不喜欢的是没有C中的return,break,和continue语句,这样的缺点是有可能让代码嵌套过深. &lt;/p&gt; &lt;p&gt; 不过不是什么大不了的问题,Lisp也提供了一些替代语法. &lt;/p&gt; &lt;p&gt; 另外其他所有语言提供了这些语法糖又怎么样呢,我遇到的超过50%的程序员还是一样瞎写. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;不同寻常的语法&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;p&gt;Lisp语法是操作符号在前,被操作对象在后. &lt;/p&gt; &lt;p&gt; 例如2+3+4,在Lisp的语法中是这样的: &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;(+ 2 3 4)
&lt;/pre&gt;   &lt;p&gt; 所有的语法都是这样的前缀表达式(&lt;a href="http://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95"&gt;Polish Notation&lt;/a&gt;),很多人不习惯这样的语法,但是它有一些突出优点: &lt;/p&gt; &lt;ol&gt; &lt;li&gt;这样的语法做语法解析特别容易,所以第三方支持工具很容易开发. 在大规模系统开发时,这点很有用.例如,分析大型项目的源代码时,你能唯一依靠的grep和正则表达式,ELisp简单严格的语法使得正则表达式很好写.  &lt;/li&gt; &lt;li&gt;实际编程时少打很多运算符号,这对于有实战经验的程序员是巨大的优点.如果你和我说什么重要的是思想和设计模式,打字速度不重要,那么菜鸟请走开.  &lt;/li&gt; &lt;li&gt;最重要的优点是,这种语法相当于一种过滤机制,能够接受这种语法的人通常都是头脑比较开放思维敏捷的人.说到底产品开发的决定性因素是人,所以这个能过滤人的优点是决定性的. &lt;/li&gt; &lt;/ol&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-6" class="outline-3"&gt; &lt;h4 id="sec-6"&gt;函数可内嵌文档,且该文档可被Emacs帮助系统调用&lt;/h4&gt; &lt;div class="outline-text-3" id="text-6"&gt;  &lt;p&gt;现在能做到这点的系统也没几家.从细节我们可以看出Emacs和Elisp的完美之处. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>essential</category><category>lisp</category><category>zh</category><guid>http://redguardtoo.github.io/posts/emacs-lisp-bin-bu-nan-xue/</guid><pubDate>Thu, 29 Nov 2012 21:00:00 GMT</pubDate></item></channel></rss>