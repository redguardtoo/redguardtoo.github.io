<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about en)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/en.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 02 Sep 2023 09:46:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>土耳其炖韭葱(Zeytinyağlı Pırasa)</title><link>http://blog.binchen.org/posts/tu-er-qi-dun-jiu-cong-zeytinyal-prasa/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
用一般的锅就可.只要一开始小火炖就不会焦.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;韭葱保留葱白,刮去外皮,只留芯子,视频中约7根韭葱&lt;/li&gt;
&lt;li&gt;斜切韭葱段,浸入盐水(两勺盐)去苦味,15-30分钟都可以&lt;/li&gt;
&lt;li&gt;3根胡萝卜斜切片,韭葱冲洗干净&lt;/li&gt;
&lt;li&gt;加1.5杯橄榄油(多点无妨),放入胡萝卜和韭葱小火加盖炖5-10分钟(出汁且沸腾)&lt;/li&gt;
&lt;li&gt;少量米洗净(米太多吸水, 菜就可能干掉了),洒在蔬菜表面,加入1.5杯水(水太少也可能底部菜会焦掉),一勺盐一勺糖加水拌匀加入,一个柠檬榨汁加入.&lt;/li&gt;
&lt;li&gt;15分钟小火加盖至饭熟,关火冷却30分钟或更长时间.最后撒入mixed herb.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://www.youtube.com/watch?v=hbWEg4arDfQ"&gt;Youtube视频(土耳其语,推荐)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.youtube.com/watch?v=f-oiDLiGN9Y"&gt;Youbute视频(英语)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
小结, 胡萝卜和韭葱是主料,胡萝卜可以附加洋葱和少量番茄.
&lt;/p&gt;</description><category>en</category><category>food</category><category>turkish</category><guid>http://blog.binchen.org/posts/tu-er-qi-dun-jiu-cong-zeytinyal-prasa/</guid><pubDate>Sun, 27 Aug 2023 10:11:46 GMT</pubDate></item><item><title>Use Emacs to read English classic books efficiently</title><link>http://blog.binchen.org/posts/use-emacs-to-read-english-classic-books-efficiently/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Classic books is difficult to read because they have many new words.
&lt;/p&gt;

&lt;p&gt;
Find the word's dictionary definition is tedios and breaks the flow.
&lt;/p&gt;

&lt;p&gt;
I tried reading those books in iPad and Kindle. The experience is not very smooth because,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It takes too much effort to select the word and send it to the dictionary. Particularly difficulty for me because I've got big fingers&lt;/li&gt;
&lt;li&gt;The dictionary popup overlaps with the book's content. Feels not comfortable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In Emacs,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;new words can be automatically highlighted&lt;/li&gt;
&lt;li&gt;The book's content and dictionary are displayed side by side&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The Emacs plugin &lt;a href="https://github.com/redguardtoo/mybigword"&gt;mybigword 0.2.4&lt;/a&gt; provides a new command &lt;code&gt;mybigword-big-words-in-current-windows&lt;/code&gt; which automatically highlight the new words in current window with hint. Type the hint, the word's definition is displayed in another window.
&lt;/p&gt;

&lt;p&gt;
Screenshot before running &lt;code&gt;M-x mybigword-big-words-in-current-windows&lt;/code&gt;,
&lt;/p&gt;

&lt;div id="orgae99b8f" class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/mybigword-before.png" alt="mybigword-before.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
After,
&lt;/p&gt;

&lt;div id="orgcbdb1be" class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/mybigword-after.png" alt="mybigword-after.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The hint UI is actually based on &lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Every English word can be measure by word frequency named Zipf Scale (see &lt;a href="http://crr.ugent.be/papers/van_Heuven_et_al_SUBTLEX-UK.pdf"&gt;http://crr.ugent.be/papers/van_Heuven_et_al_SUBTLEX-UK.pdf&lt;/a&gt; for more details).
&lt;/p&gt;

&lt;p&gt;
Any word with ZipF less than the value of &lt;code&gt;mybigword-upper-limit&lt;/code&gt; is regarded as new word.
&lt;/p&gt;

&lt;p&gt;
In my setup, &lt;code&gt;mybigword-upper-limit&lt;/code&gt; is &lt;code&gt;3.6&lt;/code&gt;.
&lt;/p&gt;</description><category>emacs</category><category>en</category><category>english</category><guid>http://blog.binchen.org/posts/use-emacs-to-read-english-classic-books-efficiently/</guid><pubDate>Thu, 22 Dec 2022 09:33:03 GMT</pubDate></item><item><title>Code faster by extending Emacs EVIL text object</title><link>http://blog.binchen.org/posts/code-faster-by-extending-emacs-evil-text-object/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
I use &lt;a href="https://www.emacswiki.org/emacs/Evil"&gt;EVIL&lt;/a&gt; text object a lot. For example,  press &lt;code&gt;vi(&lt;/code&gt; to select the code snippet inside parenthesis.
&lt;/p&gt;

&lt;p&gt;
I could also press &lt;code&gt;vib&lt;/code&gt; to do exactly same thing as &lt;code&gt;vi(&lt;/code&gt; because below code in EVIL's &lt;code&gt;evil-maps.el&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(define-key evil-outer-text-objects-map "b" 'evil-a-paren)
(define-key evil-inner-text-objects-map "b" 'evil-inner-paren)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As a full stack web developer, I often need select the snippet inside "[]", "{}", "()", "&amp;lt;&amp;gt;". So I prefer using &lt;code&gt;vig&lt;/code&gt; to replace &lt;code&gt;vi[&lt;/code&gt;, &lt;code&gt;vi{&lt;/code&gt;, &lt;code&gt;vi(&lt;/code&gt;, and &lt;code&gt;vi&amp;lt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is my new text object,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-evil-paren-range (count beg end type inclusive)
  "Get minimum range of paren text object.
COUNT, BEG, END, TYPE is used.  If INCLUSIVE is t, the text object is inclusive."
  (let* ((parens '("()" "[]" "{}" "&amp;lt;&amp;gt;"))
         range
         found-range)
    (dolist (p parens)
      (condition-case nil
          (setq range (evil-select-paren (aref p 0) (aref p 1) beg end type count inclusive))
        (error nil))
      (when range
        (cond
         (found-range
          (when (&amp;lt; (- (nth 1 range) (nth 0 range))
                   (- (nth 1 found-range) (nth 0 found-range)))
            (setf (nth 0 found-range) (nth 0 range))
            (setf (nth 1 found-range) (nth 1 range))))
         (t
          (setq found-range range)))))
    found-range))

(evil-define-text-object my-evil-a-paren (count &amp;amp;optional beg end type)
  "Select a paren."
  :extend-selection t
  (my-evil-paren-range count beg end type t))

(evil-define-text-object my-evil-inner-paren (count &amp;amp;optional beg end type)
  "Select 'inner' paren."
  :extend-selection nil
  (my-evil-paren-range count beg end type nil))

(define-key evil-inner-text-objects-map "g" #'my-evil-inner-paren)
(define-key evil-outer-text-objects-map "g" #'my-evil-a-paren)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
In above code,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;my-evil-paren-range&lt;/code&gt; returns the minimum range of text objects "[", "{", "(", and "&amp;lt;".&lt;/li&gt;
&lt;li&gt;EVIL api &lt;code&gt;evil-define-text-object&lt;/code&gt; is used to define a text object whose range is returned by &lt;code&gt;my-evil-paren-range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;evil-outer-text-objects-map&lt;/code&gt; the text object shortcut "g" is defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As you can see, understanding my personal workflow and knowing a bit Lisp does make me code faster.&lt;/p&gt;</description><category>emacs</category><category>en</category><category>evil</category><category>vim</category><guid>http://blog.binchen.org/posts/code-faster-by-extending-emacs-evil-text-object/</guid><pubDate>Mon, 29 Aug 2022 04:52:17 GMT</pubDate></item><item><title>Show files by date in SOME Emacs dired buffer</title><link>http://blog.binchen.org/posts/show-files-by-date-in-some-emacs-dired-buffer/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
It's as simple as modify &lt;code&gt;dired-actual-switches&lt;/code&gt; in &lt;code&gt;dired-mode-hook&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Minimum setup,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar my-dired-new-file-first-dirs
  '("bt/finished/$"
    "bt/torrents?/$"
    "documents?/$"
    "music/$"
    "downloads?/$")
  "Dired directory patterns where newest files are on the top.")

(defun my-dired-mode-hook-setup ()
  "Set up Dired."
  (when (cl-find-if (lambda (regexp)
                      (let ((case-fold-search t))
                        (string-match regexp default-directory)))
                my-dired-new-file-first-dirs)
    (setq dired-actual-switches "-lat")))
(add-hook 'dired-mode-hook 'my-dired-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is my &lt;a href="https://github.com/redguardtoo/emacs.d/blob/84a9c20e4702395fbd06347afbd995e3e9d139a6/lisp/init-dired.el#L98"&gt;real world setup&lt;/a&gt;.
&lt;/p&gt;</description><category>dired</category><category>emacs</category><category>en</category><category>lisp</category><guid>http://blog.binchen.org/posts/show-files-by-date-in-some-emacs-dired-buffer/</guid><pubDate>Wed, 13 Jul 2022 13:24:39 GMT</pubDate></item><item><title>How to use EMMS effectively</title><link>http://blog.binchen.org/posts/how-to-use-emms-effectively/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
First thing is to set up emms.
&lt;/p&gt;

&lt;p&gt;
I could simply enable all the emms features in one line,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(with-eval-after-load 'emms (emms-all))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
But above setup makes filtering tracks very slow because it's too heavy weight. 
&lt;/p&gt;

&lt;p&gt;
So I use below setup,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(with-eval-after-load 'emms
  ;; minimum setup is more robust
  (emms-minimalistic)

  ;; `emms-info-native' supports mp3,flac and requires NO cli tools
  (unless (memq 'emms-info-native emms-info-functions)
    (require 'emms-info-native)
    (push 'emms-info-native emms-info-functions))

  ;; extract track info when loading the playlist
  (push 'emms-info-initialize-track emms-track-initialize-functions)

  ;; I also use emms to manage tv shows, so I use mplayer only
  (setq emms-player-list '(emms-player-mplayer)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Play mp3&amp;amp;flac in "~/Dropbox/music",
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-music ()
  "My music."
  (interactive)
  (emms-stop)
  (when (bufferp emms-playlist-buffer-name)
    (kill-buffer emms-playlist-buffer-name))
  (emms-play-directory-tree "~/Dropbox/music")
  (emms-shuffle)
  (emms-next))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Sometimes I need focus on challenge programming tasks and emms should play only Mozart&amp;amp;Bach. 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar my-emms-playlist-filter-keyword "mozart|bach"
  "Keyword to filter tracks in emms playlist.
Space in the keyword matches any characters.
 \"|\" means OR operator in regexp.")

(defun my-strip-path (path strip-count)
  "Strip PATH with STRIP-COUNT."
  (let* ((i (1- (length path)))
         str)
    (while (and (&amp;gt; strip-count 0)
                (&amp;gt; i 0))
      (when (= (aref path i) ?/)
        (setq strip-count (1- strip-count)))
      (setq i (1- i)))
    (setq str (if (= 0 strip-count) (substring path (1+ i)) path))
    (replace-regexp-in-string "^/" "" str)))

(defun my-emms-track-description (track)
  "Description of TRACK."
  (let ((desc (emms-track-simple-description track))
        (type (emms-track-type track)))
    (when (eq 'file type)
      (setq desc (my-strip-path desc 2)))
    desc))

(defvar my-emms-track-regexp-function #'my-emms-track-regexp-internal
  "Get regexp to search track.")

(defun my-emms-track-regexp-internal (keyword)
  "Convert KEYWORD into regexp for matching tracks."
  (let* ((re (replace-regexp-in-string "|" "\\\\|" keyword)))
    (setq re (replace-regexp-in-string " +" ".*" re))))

(defun my-emms-track-match-p (track keyword)
  "Test if TRACK's information match KEYWORD."
  (let* ((case-fold-search t)
         (regexp (funcall my-emms-track-regexp-function keyword))
         s)
    (or (string-match regexp (emms-track-force-description track))
        (and (setq s (emms-track-get track 'info-genre)) (string-match regexp s))
        (and (setq s (emms-track-get track 'info-title)) (string-match regexp s))
        (and (setq s (emms-track-get track 'info-album)) (string-match regexp s))
        (and (setq s (emms-track-get track 'info-composer)) (string-match regexp s))
        (and (setq s (emms-track-get track 'info-artist)) (string-match regexp s)))))

(defun my-emms-show ()
  "Show information of current track."
  (interactive)
  (let* ((emms-track-description-function (lambda (track)
                                            (let ((composer (emms-track-get track 'info-composer))
                                                  (artist (emms-track-get track 'info-artist)))
                                              (concat (if composer (format "%s(C) =&amp;gt; " composer))
                                                      (if artist (format "%s(A) =&amp;gt; " artist))
                                                      (my-emms-track-description track))))))
    (emms-show)))

(defun my-emms-playlist-filter (&amp;amp;optional input-p)
  "Filter tracks in emms playlist.
If INPUT-P is t, `my-emms-playlist-random-track-keyword' is input by user."
  (interactive "P")
  ;; shuffle the playlist
  (when input-p
    (setq my-emms-playlist-filter-keyword
          (read-string "Keyword to filter tracks in playlist: ")))
  (with-current-buffer emms-playlist-buffer-name
    (goto-char (point-min))
    (let* ((case-fold-search t)
           track)
      (while (setq track (emms-playlist-track-at))
        (cond
         ((my-emms-track-match-p track my-emms-playlist-filter-keyword)
          (forward-line 1))
         (t
          (emms-playlist-mode-kill-track))))))

  (emms-random)
  ;; show current track info
  (my-emms-show))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, &lt;b&gt;a little EMMS api knowledge could go a long way&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
If you want to study EMMS API by practice, run &lt;code&gt;M-x emms-playlist-mode-go&lt;/code&gt;, then &lt;code&gt;M-x eval-expression RETURN (emms-playlist-track-at)&lt;/code&gt; to get the information of the track at point.
&lt;/p&gt;

&lt;p&gt;
Here is &lt;a href="https://github.com/redguardtoo/emacs.d/blob/95de4c2895be7e01e2438189af0d3f69b8e2bb7e/lisp/init-emms.el"&gt;my real world emms setup&lt;/a&gt; where you can see below code,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar my-emms-track-regexp-function
  (lambda (str)
    ;; can search track with Chinese information
    (my-emms-track-regexp-internal (my-extended-regexp str)))
  "Get regexp to search track.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
So I can use &lt;a href="https://en.wikipedia.org/wiki/Pinyin"&gt;Pinyin&lt;/a&gt; to search track's Chinese information. I don't know any other multimedia manager can do the same thing.
&lt;/p&gt;</description><category>emacs</category><category>emms</category><category>en</category><category>lisp</category><guid>http://blog.binchen.org/posts/how-to-use-emms-effectively/</guid><pubDate>Tue, 12 Jul 2022 13:30:43 GMT</pubDate></item><item><title>Add live demo to emacs package</title><link>http://blog.binchen.org/posts/add-live-demo-to-emacs-package/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Emacs package developers sometimes need add live demo to her/his project.
&lt;/p&gt;

&lt;p&gt;
The requirement came from &lt;a href="https://github.com/tumashu/pyim/pull/446#issuecomment-1163886411"&gt;my discussion with pyim's developer&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
With all the linting and unit tests running for ages, he still need a quick way to test if the package actually works on Emacs 25 (and other Emacs versions). I totally agree with him because my own projects have similar problems.
&lt;/p&gt;

&lt;p&gt;
A live demo built into the project is very useful for developers and testers.
&lt;/p&gt;

&lt;p&gt;
Besides, a live demo could help users. They try the new package with no hassle. They don't modify their own emacs configuration to try the new package.
&lt;/p&gt;

&lt;p&gt;
So I figured out a simple solution. The best part is that any packages could use this solution with minimum change if their CI script is already set up.
&lt;/p&gt;

&lt;p&gt;
In a package's CI script, Emacs is running in batch mode (with "–batch" option). What I suggest is add another Makefile task &lt;code&gt;runemacs&lt;/code&gt; which is very similar to the original CI task. But in this task, the "–batch" options is removed.
&lt;/p&gt;

&lt;p&gt;
See &lt;a href="https://github.com/redguardtoo/find-file-in-project/commit/b258f96d9663d9bf6ff7de1ff6bbfb921b30ea77"&gt;the solution I added for find-file-in-project&lt;/a&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-diff"&gt;diff --git a/Makefile b/Makefile
index 9005ca4..8f7a8ae 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,8 @@
 SHELL = /bin/sh
 EMACS ?= emacs
 PROFILER =
-EMACS_BATCH_OPTS=--batch -Q -l find-file-in-project.el
+EMACS_GENERIC_OPTS=-Q -L . -L deps/ivy-0.13.4
+EMACS_BATCH_OPTS:=--batch $(EMACS_GENERIC_OPTS)
 RM = @rm -rf

 .PHONY: test clean test compile
@@ -18,3 +19,8 @@ compile: clean
 # Run tests.
 test: compile
    @$(EMACS) $(EMACS_BATCH_OPTS) -l tests/ffip-tests.el
+
+runemacs:
+   @mkdir -p deps;
+   @if [ ! -f deps/ivy-0.13.4/ivy.el ]; then curl -L https://stable.melpa.org/packages/ivy-0.13.4.tar | tar x -C deps/; fi;
+   @$(EMACS) $(EMACS_GENERIC_OPTS) --load ./tests/emacs-init.el
diff --git a/tests/emacs-init.el b/tests/emacs-init.el
new file mode 100644
index 0000000..a4df068
--- /dev/null
+++ b/tests/emacs-init.el
@@ -0,0 +1,17 @@
+(require 'find-file-in-project)
+(require 'ivy)
+(ivy-mode 1)
+(setq ffip-match-path-instead-of-filename t)
+(run-with-idle-timer
+ 1
+ nil
+ (lambda ()
+   (erase-buffer)
+   (goto-char (point-min))
+   (insert
+    ";; Setup of this demo,\n"
+    "(setq ffip-match-path-instead-of-filename t)\n\n\n"
+    ";; Run \"M-x find-file-in-project-by-selected\" and input search keyword \"el\" or \"tests\".\n\n\n"
+    ";; Move cursor above below paths and run \"M-x find-file-in-project-at-point\",\n\n"
+    ";;   tests/ffip-tests.el ; open file directly \n"
+    ";;   find-file-in-project.el:50 ; open file and jump to line 50\n")))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Similar solution is also used in &lt;a href="https://github.com/tumashu/pyim"&gt;pyim&lt;/a&gt;, it's one liner in shell to test it in Emacs 25,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;EMACS=/home/cb/what-ever-path/25.1/bin/emacs make runemacs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>emacs</category><category>en</category><category>lisp</category><guid>http://blog.binchen.org/posts/add-live-demo-to-emacs-package/</guid><pubDate>Sat, 02 Jul 2022 13:37:26 GMT</pubDate></item><item><title>Use CI to improve the quality of emacs distribution</title><link>http://blog.binchen.org/posts/use-ci-to-improve-the-quality-of-emacs-distribution/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
In &lt;a href="http://blog.binchen.org/posts/better-emacs-package-development-workflow/"&gt;Better Emacs package development workflow&lt;/a&gt;, I proved that running Emacs compiler in CI can give huge boost to package quality.
&lt;/p&gt;

&lt;p&gt;
The same workflow can apply to emacs distributions. But designing a CI workflow for the distribution is much more challenging.
&lt;/p&gt;

&lt;p&gt;
For example, &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;my .emacs.d&lt;/a&gt; uses about 300 packages. In CI pipeline, those packages are automatically downloaded and compiled. If compiling errors/warnings from those third party packages are not ignored, the CI will always fail.
&lt;/p&gt;

&lt;p&gt;
There are also many other engineering issues. I struggled for &lt;b&gt;five hours&lt;/b&gt; and finally got satisfying solution. Now anyone can use my solution to &lt;b&gt;set up same CI pipeline in ten minutes&lt;/b&gt;.
&lt;/p&gt;

&lt;div id="orgc33a820" class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/ci-in-emacs.d.png" alt="ci-in-emacs.d.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Makefile is in "~/.emacs.d", it's still simple,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-makefile"&gt;EMACS ?= emacs
RM = @rm -rf
EMACS_BATCH_OPTS = --batch -Q --debug-init

install: clean
    @$(EMACS) $(EMACS_BATCH_OPTS) -l init.el

compile: install
    @$(EMACS) $(EMACS_BATCH_OPTS) -l init.el -l tests/my-byte-compile.el 2&amp;gt;&amp;amp;1 | grep -Ev "init-(hydra|evil).el:.*Warning: docstring wider than 80 characters|an obsolete" | grep -E "[0-9]: ([Ee]rror|[Ww]arning):" &amp;amp;&amp;amp; exit 1 || exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
You can run &lt;code&gt;make compile &amp;amp;&amp;amp; echo good || echo bad&lt;/code&gt; in shell  to test the pipeline locally. Please note I use &lt;code&gt;grep -v things-to-ignore&lt;/code&gt; to ignore some warnings. The warnings are from anonymous functions created by third packages (hydra, general.el, …).  
&lt;/p&gt;

&lt;p&gt;
The final missing piece is "~/.emacs.d/tests/my-byte-compile.el", 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'find-lisp)
(require 'scroll-bar)
(require 'ivy)
(require 'counsel)
(require 'w3m)
(require 'ibuffer)
(require 'org)
(require 'diff-mode)
(require 'cliphist)
(require 'eacl)
(require 'tramp)
(require 'dired)
(require 'shellcop)
(require 'counsel-etags)
(require 'typewriter-mode)
(require 'pomodoro)
(require 'emms)
(require 'emms-playlist-mode)
(require 'gnus)
(require 'gnus-sum)
(require 'gnus-msg)
(require 'gnus-topic)
(require 'magit)
(require 'magit-refs)
(require 'gnus-art)
(require 'git-link)
(require 'ace-window)
(require 'js2-mode)
(require 'yasnippet)
(require 'ediff)
(require 'company)
(require 'evil-nerd-commenter)
(require 'git-timemachine)
(require 'pyim)
(require 'cal-china-x)
(require 'wucuo)
(require 'langtool)
(require 'web-mode)
(require 'bbdb)
(require 'gmail2bbdb)
(require 'org-mime)
(require 'pdf-tools)
(require 'recentf)
(require 'bookmark)
(require 'find-file-in-project)
(require 'flymake)
(require 'elec-pair)
(require 'elpy)
(require 'rjsx-mode)
(require 'simple-httpd)
(require 'vc)
(require 'sdcv)
(require 'wgrep)
(require 'mybigword)
(require 'yaml-mode)
(require 'octave)
(require 'undo-fu)
(require 'wc-mode)
(require 'exec-path-from-shell)
(require 'dictionary)
(require 'company-ispell)
(require 'company-ctags)
(require 'lsp-mode)

(let ((files (find-lisp-find-files-internal
              "."
              (lambda (file dir)
                (and (not (file-directory-p (expand-file-name file dir)))
                     (string-match "\\.el$" file)
                     (not (member file '(".dir-locals.el"
                                         "package-quickstart.el"
                                         "company-statistics-cache.el"
                                         "custom-set-variables.el"
                                         "early-init.el")))))
              (lambda (dir parent)
                (member dir '("lisp"))))))
  (dolist (file files)
    ;; (message "file=%s" file)
    (byte-compile-file file)))

;;; my-byte-compile.el ends here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I need add lots of &lt;code&gt;require&lt;/code&gt; statement to make compiling succeed on Emacs 26, 27, 28&lt;/li&gt;
&lt;li&gt;Some "*.el" files generated by Emacs and 3rd party packages need be ignored&lt;/li&gt;
&lt;li&gt;My emacs setup code is only in "lisp" directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That's it.
&lt;/p&gt;

&lt;p&gt;
You can visit &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;https://github.com/redguardtoo/emacs.d&lt;/a&gt; for a real world example. 
&lt;/p&gt;

&lt;p&gt;
BTW, you can find &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-no-byte-compile.el"&gt;init-no-byte-compile.el&lt;/a&gt; where there are a few lines setup code the compiler will ignore. It's bad practice but sometimes there is no other way.
&lt;/p&gt;

&lt;p&gt;
"init-no-byte-compile.el" is like,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; -*- coding: utf-8; lexical-binding: t; -*-

;; blah blah

;; Local Variables:
;; no-byte-compile: t
;; End:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>emacs</category><category>en</category><category>linux</category><category>lisp</category><guid>http://blog.binchen.org/posts/use-ci-to-improve-the-quality-of-emacs-distribution/</guid><pubDate>Tue, 31 May 2022 05:33:30 GMT</pubDate></item><item><title>Better Emacs package development workflow</title><link>http://blog.binchen.org/posts/better-emacs-package-development-workflow/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
The Emacs Lisp syntax error should be automatically detected by CI (Continuous Integration).
&lt;/p&gt;

&lt;p&gt;
Syntax errors could be a bit difficult to locate. For example, developers might use Emacs 28+ only APIs to develop packages running on Emacs 26.
&lt;/p&gt;

&lt;p&gt;
Here is howto.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Step 1,  create a file &lt;code&gt;my-byte-compile.el&lt;/code&gt; in the directory "tests/",&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'find-lisp)

(let ((files (find-lisp-find-files-internal
              "."
              (lambda (file dir)
                (and (not (file-directory-p (expand-file-name file dir)))
                     (string-match "\\.el$" file)
                     (not (string-match "\\.dir-locals\\.el$" file))))
              (lambda (dir parent)
                (not (or (member dir '("." ".." ".git" ".svn" "deps" "tests"))
                         (file-symlink-p (expand-file-name dir parent))))))))
  (dolist (file files)
    (byte-compile-file file)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Step 2, insert below command line into the project's Makefile,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-makefile"&gt;compile:
    emacs --batch -Q -L . -l my-package-main-entry.el -l tests/my-byte-compile.el 2&amp;gt;&amp;amp;1 | grep -E "([Ee]rror|[Ww]arning):" &amp;amp;&amp;amp; exit 1 || exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
DONE! Now Gitlab/Github could use command line &lt;code&gt;make compile&lt;/code&gt; in their CI pipeline.
&lt;/p&gt;

&lt;p&gt;
Screenshot of &lt;a href="https://github.com/redguardtoo/evil-matchit/commit/ce93c5bcdbb049506c199dfc4324bf60f6fb4f2d"&gt;a tricky bug of evil-matchit&lt;/a&gt; detected by this new workflow.
&lt;/p&gt;

&lt;div id="org0797c8a" class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/byte-compile-ci.png" alt="byte-compile-ci.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
BTW, I also tried &lt;code&gt;elint&lt;/code&gt;, but it's not as reliable as &lt;code&gt;byte-compile&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Content of &lt;code&gt;my-elint.el&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'elint)

(let ((elint-directory-skip-re "\\(\\.dir-locals\\|ldefs-boot\\|loaddefs\\)\\.el\\'"))
  (elint-directory "."))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is link to the &lt;a href="https://github.com/redguardtoo/evil-matchit/blob/master/Makefile"&gt;Makefile from my real world project&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I use below command lines to compile and test the project locally.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;EMACS=~/myemacs/26.3/bin/emacs make compile # compile only
EMACS=~/myemacs/26.3/bin/emacs make test # compile and run unit test 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>emacs</category><category>en</category><category>linux</category><category>lisp</category><guid>http://blog.binchen.org/posts/better-emacs-package-development-workflow/</guid><pubDate>Tue, 24 May 2022 12:47:12 GMT</pubDate></item><item><title>Configure EMMS (Emacs Multi-Media System) for Multimedia Keyboard</title><link>http://blog.binchen.org/posts/configure-emms-emacs-multi-media-system-for-multimedia-keyboard/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Emacs server need be started first.
&lt;/p&gt;

&lt;p&gt;
I use &lt;code&gt;emacsclient&lt;/code&gt; to execute emms commands in the emacs server.
&lt;/p&gt;

&lt;p&gt;
Key bindings setup in &lt;code&gt;~/.i3/config&lt;/code&gt; for &lt;a href="https://i3wm.org/"&gt;i3 window manager&lt;/a&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;# music player client (mpc, emms ...)
bindsym XF86Search exec --no-startup-id ~/bin/music-player-client show
bindsym XF86Tools exec --no-startup-id ~/bin/music-player-client random
bindsym XF86AudioStop exec --no-startup-id ~/bin/music-player-client toggle
bindsym XF86AudioPause exec --no-startup-id ~/bin/music-player-client toggle
bindsym XF86AudioNext exec --no-startup-id ~/bin/music-player-client next
bindsym XF86AudioPrev exec --no-startup-id ~/bin/music-player-client prev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Content of &lt;code&gt;~/bin/music-player-client&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/bash

# use mpc&amp;amp;mpd or emacsclient&amp;amp;emms to play music

if [ -z "$1" ]; then
    echo "Usage: music-player-client pre|next|toggle|random|show"
    exit 1
fi

# Please uninstall mpc&amp;amp;mpd if using emms
if command -v mpc &amp;amp;&amp;gt; /dev/null; then
    case $1 in
        prev )
            mpc prev
            ;;
        next )
            mpc next
            ;;
        toggle )
            mpc toggle
            ;;
    esac
elif command -v emacsclient &amp;amp;&amp;gt; /dev/null; then
    case $1 in
        prev )
            emacsclient --eval '(emms-previous)'
            ;;
        next )
            emacsclient --eval '(emms-next)'
            ;;
        toggle )
            emacsclient --eval '(emms-pause)'
            ;;
        random )
            emacsclient --eval '(progn (emms-shuffle) (emms-next))'
            ;;
        show )
            # program like dunst can show the notification
            notify-send "$(emacsclient --eval '(file-name-base (emms-show))')"
            ;;
    esac
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I usually run &lt;code&gt;M-x emms-play-directory-tree&lt;/code&gt; to play music. My emms setup,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(with-eval-after-load 'emms
  ;; minimum setup is more robust
  (emms-minimalistic)
  (setq emms-player-list '(emms-player-mplayer
                           emms-player-vlc)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screen shot of running &lt;code&gt;~/bin/music-player-client show&lt;/code&gt;,
&lt;img src="http://blog.binchen.org/wp-content/emms-notification.png" alt="emms-notification.png"&gt;
&lt;/p&gt;</description><category>emacs</category><category>emms</category><category>en</category><category>linux</category><guid>http://blog.binchen.org/posts/configure-emms-emacs-multi-media-system-for-multimedia-keyboard/</guid><pubDate>Mon, 16 May 2022 12:11:33 GMT</pubDate></item><item><title>Integrate delta into git</title><link>http://blog.binchen.org/posts/integrate-delta-into-git/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="https://github.com/dandavison/delta"&gt;Delta&lt;/a&gt; is a syntax-highlighting pager for git, diff, and grep output.
&lt;/p&gt;

&lt;p&gt;
Set up is as simple as &lt;a href="https://github.com/dandavison/delta#get-started"&gt;copying its sample setup&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I wrote a shell script &lt;code&gt;my-pager&lt;/code&gt; which can use both &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;delta&lt;/code&gt; as pager,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/bash
# @see https://stackoverflow.com/questions/19408649/pipe-input-into-a-script
if [ -x "$HOME/.cargo/bin/delta" ]; then
    cat | $HOME/.cargo/bin/delta "$@"
else
    cat | less -F -X
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is my extra delta setup in &lt;code&gt;~/.gitconfig&lt;/code&gt; (Delta reads settings from &lt;code&gt;~/.gitconfig&lt;/code&gt;),
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[core]
pager = ~/bin/my-pager
[interactive]
diffFilter = ~/bin/my-pager --color-only
[merge]
conflictstyle = diff3
[diff]
colorMoved = default
[delta "default"]
file-decoration-style= blue box
hunk-header-decoration-style = purple ol
[delta]
features = default
navigate = true  # use n and N to move between diff sections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot,
&lt;img src="http://blog.binchen.org/wp-content/git-delta.png" alt="git-delta.png"&gt;&lt;/p&gt;</description><category>delta</category><category>diff</category><category>emacs</category><category>en</category><category>git</category><guid>http://blog.binchen.org/posts/integrate-delta-into-git/</guid><pubDate>Wed, 27 Apr 2022 12:03:37 GMT</pubDate></item></channel></rss>