<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about etags)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/etags.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 30 Aug 2025 11:00:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Javascript code navigation in counsel-etags</title><link>http://redguardtoo.github.io/posts/javascript-code-navigation-in-counsel-etags/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Javascript code navigation is supported by &lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;counsel-etags&lt;/a&gt; out of box.
&lt;/p&gt;

&lt;p&gt;
It supports new javascript syntax like arrow function because &lt;code&gt;counsel-etags&lt;/code&gt; is only frontend.
&lt;/p&gt;

&lt;p&gt;
It reads tags file created by backend CLI program &lt;a href="https://github.com/universal-ctags/ctags"&gt;Ctags&lt;/a&gt;. Ctags uses regular expression to extract tag name from source code.
&lt;/p&gt;

&lt;p&gt;
But there are some syntax which regular expression could not help.
&lt;/p&gt;

&lt;p&gt;
For example, json object path can't be extracted by regular expression.
&lt;/p&gt;

&lt;p&gt;
Given an object &lt;code&gt;a&lt;/code&gt; in file A,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;var a = {
  b: {
    c: 3,
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
File B has code &lt;code&gt;let v1 = a.b.c;&lt;/code&gt;, how can we jump to the definition of the field &lt;code&gt;c&lt;/code&gt; from json path &lt;code&gt;a.b.c&lt;/code&gt;?
&lt;/p&gt;

&lt;p&gt;
The solution is to use Lisp to parse code in file A and generate extra navigation data which could be appended to tags file generated by Ctags.
&lt;/p&gt;

&lt;p&gt;
The algorithm is simple,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Traverse all the field of object &lt;code&gt;a&lt;/code&gt; in file A. Use API &lt;code&gt;js2-print-json-path&lt;/code&gt; from &lt;code&gt;js2-mode&lt;/code&gt; to get json path of current field.&lt;/li&gt;
&lt;li&gt;The json path could be regarded as tags name. We've already got file name and line number. So there is enough information to create navigation data for tags file. Here is &lt;a href="https://en.wikipedia.org/wiki/Ctags"&gt;tags file format&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Necessary utilities are already provided by &lt;code&gt;counsel-etags v1.8.7&lt;/code&gt;,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;After tags files is generated by Ctags, the hook &lt;code&gt;counsel-etags-after-update-tags-hook&lt;/code&gt; is executed. Users can append tags file in this hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(counsel-etags-tag-line code-snippet tag-name line-number byte-offset)&lt;/code&gt; return a line which could be appended into tags file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
My current project uses a technology called &lt;a href="https://www.styled-components.com/docs/basics"&gt;styled-components&lt;/a&gt; which has an advanced feature &lt;a href="https://www.styled-components.com/docs/advanced#theming"&gt;theming&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It could dynamically change web application's appearance and is a critical technology for our application to support multiple customer. Application's theme is basically a file containing a huge json object. So it's important that developers can jump to the corresponding json object's field by json path.
&lt;/p&gt;
&lt;div id="outline-container-org72333bc" class="outline-2"&gt;
&lt;h3 id="org72333bc"&gt;Screencast&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org72333bc"&gt;

&lt;div id="orgd497f97" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/counsel-etags-plus-json-path.gif" alt="counsel-etags-plus-json-path.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgacc320e" class="outline-2"&gt;
&lt;h3 id="orgacc320e"&gt;Code&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgacc320e"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'counsel-etags)

(defun my-manual-update-tag-file (code-file tags-file)
  (let* ((dir (file-name-directory tags-file))
         (path (concat dir code-file))
         curline
         jp
         tagstr)
    (unless (featurep 'js2-mode) (require 'js2-mode))
    (with-temp-buffer
      (insert-file-contents path)
      (js2-init-scanner)
      (js2-do-parse)
      (goto-char (point-min))
      ;; find all js object property names
      (while (re-search-forward "\"?[a-z][a-zA-Z0-9]*\"?:" (point-max) t)
        (when (setq jp (js2-print-json-path))
          (setq curline (string-trim (buffer-substring-no-properties (line-beginning-position)
                                                                     (line-end-position))))
          (setq tagstr (concat tagstr
                               (counsel-etags-tag-line curline
                                                       jp
                                                       (count-lines 1 (point))
                                                       (point)))))
        ;; move focus to next search
        (goto-char (line-end-position))))
    (when tagstr
      (with-temp-buffer
        (insert-file-contents tags-file)
        (goto-char (line-end-position))
        (insert (format "\n\014\n%s,%d\n%s" code-file 0 tagstr))
        (write-region (point-min) (point-max) tags-file nil :silent)))))

(defun counsel-etags-after-update-tags-hook-setup (tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/darkTheme.js" tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/lightTheme.js" tags-file))
(add-hook 'counsel-etags-after-update-tags-hook 'counsel-etags-after-update-tags-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>etags</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/javascript-code-navigation-in-counsel-etags/</guid><pubDate>Mon, 22 Jul 2019 12:07:16 GMT</pubDate></item><item><title>counsel-etags v1.3.1 is released</title><link>http://redguardtoo.github.io/posts/counsel-etags-v1-3-1-is-released-enemacsctags/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;Counsel-etags&lt;/a&gt; is a complete solution for code navigation in Emacs.
&lt;/p&gt;

&lt;p&gt;
It needs no setup. One command &lt;code&gt;counsel-etags-find-tag-at-point&lt;/code&gt; is enough to start code navigation immediately.
&lt;/p&gt;

&lt;p&gt;
It solves all problems using Ctags/Etags with Emacs.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Problem 1:&lt;/b&gt; Ctags takes a few seconds to update the tags file (the index file to lookup tags). The updating process blocks the user's further interaction. This problem is solved by the virtual updating function from &lt;code&gt;counsel-etags&lt;/code&gt;. The setup is simple:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; Don't ask before rereading the TAGS files if they have changed
(setq tags-revert-without-query t)
;; Don't warn when TAGS files are large
(setq large-file-warning-threshold nil)
;; Setup auto update now
(add-hook 'prog-mode-hook
  (lambda ()
    (add-hook 'after-save-hook
              'counsel-etags-virtual-update-tags 'append 'local)))
(add-hook 'after-save-hook 'counsel-etags-virtual-update-tags)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Problem 2:&lt;/b&gt; Tag lookup may fail if the latest code is not scanned yet. This problem is solved by running &lt;code&gt;counsel-etags-grep&lt;/code&gt; &lt;b&gt;automatically&lt;/b&gt; if &lt;code&gt;counsel-etags-find-tag-at-point&lt;/code&gt; fails. So users always get results.
&lt;/p&gt;

&lt;p&gt;
There are also other enhancements.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Enhancement 1:&lt;/b&gt; Levenshtein Distance algorithm is used to place the better matching candidates at the the top. For example, a function named &lt;code&gt;renderTable&lt;/code&gt; could be defined all around in a ReactJS project. But it's very possible the user prefers the definition in same component or same folder where she triggers code navigation.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Enhancement 2:&lt;/b&gt; It's inefficient to search the same tag again and again. &lt;code&gt;counsel-etags-recent-tag&lt;/code&gt; is used to jump to previous definitions.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Enhancement 3:&lt;/b&gt; &lt;a href="https://github.com/abo-abo/swiper"&gt;Ivy-mode&lt;/a&gt; provides filter UI for &lt;code&gt;counsel-etags&lt;/code&gt;. Its means all the functionalities from Ivy is also available. For example, users can input "!keyword1" to &lt;b&gt;exclude&lt;/b&gt; candidates matching "keyword1".
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Enhancement 4:&lt;/b&gt; &lt;code&gt;counsel-etags-grep&lt;/code&gt; uses the fastest grep program &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt; if it's installed. Or else it falls back to standard grep.
&lt;/p&gt;

&lt;p&gt;
Please check &lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;https://github.com/redguardtoo/counsel-etags&lt;/a&gt; for more tips.&lt;/p&gt;</description><category>emacs</category><category>en</category><category>etags</category><guid>http://redguardtoo.github.io/posts/counsel-etags-v1-3-1-is-released-enemacsctags/</guid><pubDate>Sun, 12 Nov 2017 09:40:15 GMT</pubDate></item></channel></rss>