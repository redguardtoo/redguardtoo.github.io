<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about firefox)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/firefox.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 15 Nov 2020 11:08:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Firefox and Emacs</title><link>http://blog.binchen.org/posts/firefox-and-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
For me, there is NO difference between Firefox and Emacs. They provide useful APIs, nothing more.
&lt;/p&gt;

&lt;p&gt;
Three years ago, I wrote &lt;a href="http://blog.binchen.org/posts/use-firefox-in-emacs-way-3.html"&gt;Use firefox in Emacs way&lt;/a&gt; to demo how to convert Firefox into Emacs by &lt;a href="https://github.com/mooz/keysnail/wiki"&gt;Keynsail.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A year ago I published &lt;a href="http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html"&gt;Hello Ivy-mode, bye Helm&lt;/a&gt; to prove how powerful &lt;a href="https://github.com/abo-abo/swiper"&gt;Ivy-mode&lt;/a&gt; is by using its API &lt;code&gt;ivy-read&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Keysnail has similar javascript API &lt;code&gt;prompt.selector&lt;/code&gt; and it's as powerful as &lt;code&gt;ivy-read&lt;/code&gt; if not more powerful.
&lt;/p&gt;

&lt;p&gt;
For example, you can insert below snippet into &lt;code&gt;~/.keysnail.js&lt;/code&gt; and press ",hh" or "C-c C-h" to query browse history:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;function searchHistory(evt, arg) {
  function timeSince(now, date) {

    var seconds = Math.floor((now - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval &amp;gt; 1) {
      return interval + " years";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval &amp;gt; 1) {
      return interval + " months";
    }
    interval = Math.floor(seconds / 86400);
    if (interval &amp;gt; 1) {
      return interval + " days";
    }
    interval = Math.floor(seconds / 3600);
    if (interval &amp;gt; 1) {
      return interval + " hours";
    }
    interval = Math.floor(seconds / 60);
    if (interval &amp;gt; 1) {
      return interval + " minutes";
    }
    return Math.floor(seconds) + " seconds";
  }

  function searchWithKeyword(q) {
    var collection = (function() {
      //search option
      var options = PlacesUtils.history.getNewQueryOptions();
      options.maxResults = 4096;
      options.queryType = Ci.nsINavHistoryQueryOptions.QUERY_TYPE_HISTORY;
      //options.sortingMode = Ci.nsINavHistoryQueryOptions.SORT_BY_FRECENCY_DESCENDING;
      options.sortingMode = Ci.nsINavHistoryQueryOptions.SORT_BY_DATE_DESCENDING;
      options.includeHidden = true;

      //search query
      var query = PlacesUtils.history.getNewQuery();
      // read keyworld
      if(q &amp;amp;&amp;amp; q !== '') {
        query.searchTerms  = q;
      }

      var result = PlacesUtils.history.executeQuery(query, options);
      var root = result.root;

      var collection = [];
      var now = new Date().getTime();
      var siteNode;
      root.containerOpen = true;
      for (var i = 0; i &amp;lt; root.childCount; i++) {
        // siteNode =&amp;gt; nsINavHistoryResultNode
        siteNode = root.getChild(i);
        collection.push([siteNode.icon,siteNode.title,siteNode.uri, siteNode.time/1000]);
      }
      collection.sort(function(a, b) {
        return b[3]-a[3];
      });
      // reformat the time
      for (i = 0; i &amp;lt; collection.length; i++) {
        collection[i][3] = timeSince(now, collection[i][3]) + ' ago';
      }
      root.containerOpen = false;
      return collection;
    })();

    prompt.selector({
      message    : "Search history"+ (q &amp;amp;&amp;amp; q !== ''? (' @'+q +':') : ':' ),
      collection : collection,
      flags      : [ICON | IGNORE, 0, 0, 0],
      header     : ["Title", "Url", "Last visited"],
      width      : [30, 60, 10],
      callback: function (i) {
        if (i &amp;gt;= 0) {
          openUILinkIn(collection[i][2], "tab");
        }
      },
      onFinish: function() {
        gBrowser.focus();
        _content.focus();
      }
    });
  }

  prompt.finish(true);
  prompt.read('Keyword to search history?', searchWithKeyword, null, null, null, 0, "history_search");
  // searchWithKeyword('test');

}
key.setViewKey([',', 'h', 'h'], searchHistory, "Search history");
key.setGlobalKey(['C-c', 'C-h'], searchHistory, "Search history");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is my complete &lt;a href="https://gist.github.com/redguardtoo/003ac86d4c11b70b870a"&gt;.keysnail.js&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>firefox</category><category>ivy</category><category>keysnail</category><guid>http://blog.binchen.org/posts/firefox-and-emacs/</guid><pubDate>Tue, 23 May 2017 12:24:25 GMT</pubDate></item><item><title>Advanced tip on using mozrepl to automatically refresh browser</title><link>http://blog.binchen.org/posts/advanced-tip-on-using-mozrepl-to-automatically-refresh-browser/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
Here is &lt;a href="http://www.emacswiki.org/emacs/MozRepl"&gt;the setup on Emacswiki&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I find it annoying instead of helpful in real world usage.
&lt;/p&gt;

&lt;p&gt;
The mozrepl trick basically will refresh the &lt;b&gt;current active page&lt;/b&gt; in Firefox. It's not smart enough. When developing a web application, I will open many stackoverflow pages to look for technical solution. I don't like my stackoverflow page being refreshed when I'm saving the HTML code for some web application.
&lt;/p&gt;

&lt;p&gt;
So here is my improved solution:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-moz-refresh-browser-condition (current-file)
  "Should return a boolean javascript expression or nil"
  (let (rlt)
    (cond
     ((string-match "\\(beeta\\|cb_tutorial\\)" current-file)
      (setq rlt "content.document.location.href.indexOf(':8001')!==-1"))
     (t
      (setq rlt nil)))
    rlt))

;; {{ mozrepl auto-refresh browser
(defun moz-reload-browser ()
  (interactive)
  (let (js-cond cmd)
    (if (fboundp 'my-moz-refresh-browser-condition)
        (setq js-cond (funcall 'my-moz-refresh-browser-condition (buffer-file-name))))
    (cond
     (js-cond
      (setq cmd (concat "if(" js-cond "){setTimeout(function(){content.document.location.reload(true);}, '500');}")))
     (t
      (setq cmd "setTimeout(function(){content.document.location.reload(true);}, '500');")))
    (comint-send-string (inferior-moz-process) cmd)
    ))

(defun moz-after-save ()
  (interactive)
  (when (memq major-mode '(web-mode html-mode nxml-mode nxhml-mode php-mode))
    (moz-reload-browser)))

(add-hook 'after-save-hook
              'moz-after-save
              'append 'local)
;; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>firefox</category><category>mozrepl</category><guid>http://blog.binchen.org/posts/advanced-tip-on-using-mozrepl-to-automatically-refresh-browser/</guid><pubDate>Wed, 03 Dec 2014 08:44:27 GMT</pubDate></item><item><title>Use firefox in Emacs way</title><link>http://blog.binchen.org/posts/use-firefox-in-emacs-way-3/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-05-20 Tue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-03-23 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I use &lt;a href="https://github.com/mooz/keysnail/wiki"&gt;keysnail&lt;/a&gt;. it's a firefox addon to convert firefox into Emacs.
&lt;/p&gt;

&lt;p&gt;
I install keysnail's own plugins "HoK" and "Tanything".
&lt;/p&gt;

&lt;p&gt;
Here are the use cases of keysnail.
&lt;/p&gt;

&lt;div id="outline-container-org655ae60" class="outline-2"&gt;
&lt;h3 id="org655ae60"&gt;Click &amp;amp; Copy the links&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org655ae60"&gt;
&lt;p&gt;
Install the &lt;a href="https://github.com/mooz/keysnail/wiki/plugin"&gt;HoK&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.keysnail.js:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;hook.setHook("PluginLoaded", function () {
    if (!plugins.hok) return;

    /* HoK 1.3.9+ required */
    plugins.hok.pOptions.selector = plugins.hok.pOptions.selector
    /* feedly */
    + ", *[data-uri]" + ", *[data-selector-toggle]" + ", *[data-page-action]" + ", *[data-app-action]"
    /* google plus */
    + ", *[guidedhelpid]"
    /* twitter */
    + ", *[data-item-count]";
});

key.setGlobalKey(["C-c","C-f"], function (aEvent, aArg) {
        ext.exec("hok-start-foreground-mode", aArg);
}, "Hok - Foreground hint mode", true);

key.setGlobalKey(["C-c","C-b"], function (aEvent, aArg) {
        ext.exec("hok-start-background-mode", aArg);
}, "HoK - Background hint mode", true);

key.setGlobalKey(["C-c","C-y"], function (aEvent, aArg) {
        ext.exec("hok-yank-foreground-mode", aArg);
}, "HoK - Background hint mode", true);

key.setGlobalKey(["C-c","C-;"], function (aEvent, aArg) {
        ext.exec("hok-start-extended-mode", aArg);
}, "HoK - Extented hint mode", true);

key.setGlobalKey(["C-c", "C-e"], function (aEvent, aArg) {
        ext.exec("hok-start-continuous-mode", aArg);
}, "Start continuous HaH", true);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Now I can press "Ctrl-C Ctrl-F" to select the links to click.
&lt;/p&gt;

&lt;p&gt;
The links will be highlighted as below screen shot:
&lt;img src="http://blog.binchen.org/wp-content/keysnail-hok-nq8.png" alt="keysnail-hok-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
I can press the highlighted hint to click the link.
&lt;/p&gt;

&lt;p&gt;
Copy the link into clipboard is also easy. I press "C-c C-y" and similar UI will be displayed. I press the hint above to finish the operation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7fbc502" class="outline-2"&gt;
&lt;h3 id="org7fbc502"&gt;Copy the text of link&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org7fbc502"&gt;
&lt;p&gt;
This is my most favorite tool. As a developer, I need copy text of links from bug tracking software and paste it into git commit message frequently.
&lt;/p&gt;

&lt;p&gt;
That's error prone because:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The links are cluttered so it's hard to select the text of the link without actually clicking the link.&lt;/li&gt;
&lt;li&gt;The web UI of bug tracing system may use some CSS magic. Only part of the text of links are displayed. So it's impossible to select the text at all. For example, &lt;a href="https://www.atlassian.com/software/jira"&gt;JIRA&lt;/a&gt; will display file name of "Screenshot 03/05/2014-193024.png" as "Screenshot 03/05/2014…png".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
If you use keysnail+HOK, it's as simple as press hot key "C-c ; Y". That's it!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org189f836" class="outline-2"&gt;
&lt;h3 id="org189f836"&gt;Switch tab&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org189f836"&gt;
&lt;p&gt;
Install the &lt;a href="https://github.com/mooz/keysnail/wiki/plugin"&gt;Tanything&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.keysnail.js:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;key.setGlobalKey(["C-c", "C-a"], function (ev, arg) {
  ext.exec("tanything", arg);
}, "view all tabs", true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Press "Ctrl-C Ctrl-A", you got below UI:
&lt;img src="http://blog.binchen.org/wp-content/keysnail-tanything-nq8.png" alt="keysnail-tanything-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
Tanything will locate the tab by finding match in web page's title or URL.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7229409" class="outline-2"&gt;
&lt;h3 id="org7229409"&gt;My keysnail set up&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org7229409"&gt;
&lt;p&gt;
You can download my ~/.keysnail.js from &lt;a href="https://gist.githubusercontent.com/redguardtoo/003ac86d4c11b70b870a/raw/32356b071785248c0ff56d9c5896168263efefdd/.keysnail.js"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
#+image/keysnail-hok-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/03/wpid-keysnail-hok-nq8.png" alt="wpid-keysnail-hok-nq8.png"&gt;
#+image/keysnail-tanything-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/03/keysnail-tanything-nq8.png" alt="keysnail-tanything-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>firefox</category><category>keysnail</category><guid>http://blog.binchen.org/posts/use-firefox-in-emacs-way-3/</guid><pubDate>Sun, 23 Mar 2014 20:03:00 GMT</pubDate></item><item><title>Code Rush</title><link>http://blog.binchen.org/posts/code-rush/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小结,代码库庞大,质量有问题,招了一些废物.M Toy:"我们不是要痛扁谁…". 1998年3月31日,Netscape公开其源代码. &lt;/p&gt; &lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt; &lt;caption&gt;&lt;/caption&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt;&lt;th scope="col" class="left"&gt;人名&lt;/th&gt;&lt;th scope="col" class="left"&gt;背景&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Jamie_Zawinski"&gt;Jamie Zawinski&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;黑客,擅长C/Perl/Lisp,不喜欢C++,XEmacs开发者,Netscape早期版本开发者)解释源代码的意义.注意键盘符合人体工程学.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Michael_Toy"&gt;Michael Toy&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;牢游戏Rogue的开发者,该游戏被PC World杂志2009年评为史上最伟大PC游戏第六,是Diablo的老祖宗,Netscape最早员工&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Jim_Barksdale"&gt;Jim Barksdale&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;CEO&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.linkedin.com/pub/jim-roskind/0/20/195"&gt;Jim Roskind&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;Security Expert,开发大型软件,很麻烦.还说了一大堆屁话.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Scott Collins&lt;/td&gt;&lt;td class="left"&gt;值夜班,惨透了.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;javascript&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.linkedin.com/pub/jeff-weinstein/b/869/433"&gt;Jeff Weinstein&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;programmer at Netscape.并不是Netscape最优秀的员工.嘿嘿.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Tara Hernandez&lt;/td&gt;&lt;td class="left"&gt;QA&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Blake_Ross"&gt;Blake Ross&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;&lt;a href="http://www.insanely-great.com/news.php?id=3993"&gt;http://www.insanely-great.com/news.php?id=3993&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;</description><category>emacs</category><category>engineering</category><category>firefox</category><category>zh</category><guid>http://blog.binchen.org/posts/code-rush/</guid><pubDate>Fri, 14 Feb 2014 17:12:00 GMT</pubDate></item></channel></rss>