<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (Posts about flyspell)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/flyspell.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 17 May 2020 06:26:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Hardcore spell checking in Emacs</title><link>http://blog.binchen.org/posts/hardcore-spell-checking-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
This article is not introduction of Emacs spell checking basics. It requires deep knowledge of Emacs Lisp and Fly Spell.
&lt;/p&gt;

&lt;p&gt;
You could read my article &lt;a href="https://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html"&gt;What's the best spell check setup in emacs&lt;/a&gt; for basic knowledge.
&lt;/p&gt;

&lt;p&gt;
This article introduces &lt;b&gt;new techniques to make Fly Spell more powerful and faster&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The CLI program aspell and hunspell can only parse plain text. They don't know any programming language syntax.
&lt;/p&gt;

&lt;p&gt;
Fly Spell feeds the output of CLI program into its own Lisp predicate named &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt; whose default values is nil.
&lt;/p&gt;

&lt;p&gt;
When executing &lt;code&gt;(flyspell-mode 1)&lt;/code&gt;, the &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L655"&gt;per mode predicate is assigned&lt;/a&gt; to &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
For example, you can run &lt;code&gt;(get major-mode 'flyspell-mode-predicate)&lt;/code&gt; to get predicate of current major mode and &lt;code&gt;(get 'web-mode 'flyspell-mode-predicate)&lt;/code&gt; to get predicate of &lt;code&gt;web-mode&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
The predicate is just a simple function without parameter, here is my predicate for &lt;code&gt;web-mode&lt;/code&gt;,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-web-mode-flyspell-verify ()
  "Fly Spell predicate of `web-mode`."
  (let* ((font-face-at-point (get-text-property (- (point) 1) 'face))
         rlt)
    ;; If rlt is t, the word at point is POSSIBLY a typo, continue checking.
    (setq rlt t)
    ;; if rlt is nil, the word at point is definitely NOT a typo.
    ;; (setq rlt nil)
    rlt))
;; Attach my predicate to `web-mode`
(put 'web-mode 'flyspell-mode-predicate 'my-web-mode-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If you read code of &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L435"&gt;flyspell-prog-mode&lt;/a&gt;, you will find it just set &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt; to its own predicate &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt;,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar flyspell-prog-text-faces
  '(font-lock-string-face font-lock-comment-face font-lock-doc-face)
  "Faces corresponding to text in programming-mode buffers.")

(defun flyspell-generic-progmode-verify ()
  "Used for `flyspell-generic-check-word-predicate' in programming modes."
  (unless (eql (point) (point-min))
    ;; (point) is next char after the word. Must check one char before.
    (let ((f (get-text-property (1- (point)) 'face)))
      (memq f flyspell-prog-text-faces))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt; is very simple. If the word at point is not inside comment or string, the predicate returns nil which means the word is not a typo.
&lt;/p&gt;

&lt;p&gt;
So in theory I can write my own predicate to replace simple &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
But in reality it's not as simple. The predicate is written in Lisp so it's slow. If my predicate is too complicated, flyspell process will block other actions and Emacs could be frequently un-responsive when I'm editing text.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;flyspell-mode&lt;/code&gt; starts checking when &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L158"&gt;text in current buffer is modified&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
My solution is not to turn on &lt;code&gt;flyspell-mode&lt;/code&gt;. Instead, I manage the spell checking by myself using APIs from flyspell.
&lt;/p&gt;

&lt;p&gt;
I only spell check when user saving current buffer. The interval between spell check should not be less than 5 minutes. Spell check is done by calling API &lt;code&gt;flyspell-buffer&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
Checking the whole buffer is still slow. Instead, we can check the text region in current window by calling &lt;code&gt;flyspell-region&lt;/code&gt; instead. The api &lt;code&gt;window-total-height&lt;/code&gt; returns the height of current Windows. So I can use below code to get the region to check,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(let* (beg end (orig-pos (point)))
  (save-excursion
    (forward-line (- (window-total-height)))
    (setq beg (line-beginning-position))
    (goto-char orig-pos)
    (forward-line (window-total-height))
    (setq end (line-end-position)))
  (flyspell-region beg end))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I also need respect the predicate embedded in the major mode in my own generic predicate. Since per mode predicate has already checked the font face, I should &lt;a href="https://github.com/redguardtoo/wucuo/blob/49d2ae558068954eb8c4324b8ee7a6b2b0a00ef9/wucuo.el#L320"&gt;skip the font face check in generic predicate if per mode predicate exists&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Above algorithms are implemented in &lt;a href="https://github.com/redguardtoo/wucuo"&gt;wucuo&lt;/a&gt;. Here is its usage,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun prog-mode-hook-setup ()
  ;; (setq wucuo-flyspell-start-mode "lite")
  ;; (setq wucuo-flyspell-start-mode "ultra")
  (wucuo-start t))
(add-hook 'prog-mode-hook 'prog-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If &lt;code&gt;wucuo-flyspell-start-mode&lt;/code&gt; is "full" (default value), &lt;code&gt;flyspell-mode&lt;/code&gt; is enabled. In this case, wucuo is only the advanced version of &lt;code&gt;flyspell-mode&lt;/code&gt;,
&lt;/p&gt;

&lt;p&gt;
If &lt;code&gt;wucuo-flyspell-start-mode&lt;/code&gt; is "lite", &lt;code&gt;flyspell-buffer&lt;/code&gt; is used, checking is done when user saves current buffer.
&lt;/p&gt;

&lt;p&gt;
If &lt;code&gt;wucuo-flyspell-start-mode&lt;/code&gt; is "ultra", &lt;code&gt;flyspell-region&lt;/code&gt; is used, checking is done when user saves current buffer.&lt;/p&gt;&lt;/div&gt;</description><category>check</category><category>emacs</category><category>en</category><category>flyspell</category><category>spell</category><guid>http://blog.binchen.org/posts/hardcore-spell-checking-in-emacs.html</guid><pubDate>Sun, 17 May 2020 06:20:55 GMT</pubDate></item><item><title>How to spell check function/variable in Emacs</title><link>http://blog.binchen.org/posts/how-to-spell-check-functionvariable-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2018-06-17 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2019-04-04 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html"&gt;This article&lt;/a&gt; explains how to spell check camel cased names of functions and variables in Emacs. It uses options &lt;code&gt;--run-together&lt;/code&gt; from &lt;a href="http://aspell.net/"&gt;GNU Aspell&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
But this solution is not perfect. It wrongly identifies two character sub-word as typo. For example, "onChange" is regarded as typo because the sub-word "on" is identified as typo. Another issue is namespace of function name. For example, "MS" from "MSToggleButton" is alias of "Microsoft". If "MS" is identified as typo, every word containing "MS" is regarded as typo.
&lt;/p&gt;

&lt;p&gt;
In this article,
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;I will explain &lt;b&gt;how Emacs spell checker works&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Then we study the &lt;b&gt;algorithm of aspell&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Finally, &lt;b&gt;a complete solution&lt;/b&gt; which works with &lt;b&gt;both aspell and hunspell&lt;/b&gt; is provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Emacs built in plugin &lt;a href="https://www.emacswiki.org/emacs/FlySpell"&gt;Fly Spell&lt;/a&gt; does spell checking. It passes the options and plain text to command line tool aspell. Aspell sends back the typos into &lt;code&gt;Fly Spell&lt;/code&gt;. &lt;code&gt;Fly Spell&lt;/code&gt; then picks up typos to display. For example, &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html"&gt;flyspell-prog-mode&lt;/a&gt; only displays typos in comments and strings.
&lt;/p&gt;

&lt;p&gt;
Aspell doesn't understand syntax of any programming language. It simply reports typos in plain text.
&lt;/p&gt;

&lt;p&gt;
Aspell has two options:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--run-together-limit&lt;/code&gt; is "Maximum number of words can be strung together"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; is "Minimal length of sub-words"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Aspell C++ code has to be studied in order to understand above two options. Let's start from &lt;code&gt;Working::check_word&lt;/code&gt; in &lt;code&gt;modules/speller/default/suggest.cpp&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is code,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-c"&gt;class Working : public Score {
  unsigned check_word(char * word, char * word_end, CheckInfo * ci, unsigned pos = 1);
};
unsigned Working::check_word(char * word, char * word_end,  CheckInfo * ci,
                             /* it WILL modify word */
                             unsigned pos)
{
  // check the whole word before go into run-together mode
  unsigned res = check_word_s(word, ci);
  // if `res` is true, it's a valid word, don't bother run-together
  if (res) return pos + 1;
  // it's typo because number of sub-words is greater than "--run-together-limit"
  if (pos + 1 &amp;gt;= sp-&amp;gt;run_together_limit_) return 0;

  // `i` is the `end` of sub-word, the poition AFTER last character of sub-word
  for (char * i = word + sp-&amp;gt;run_together_min_; 
       // already checked the whole word; besides, any sub-word whose size is less 
       // than "--run-together-min" is regarded as invalid
       i &amp;lt;= word_end - sp-&amp;gt;run_together_min_;
       ++i)
  {
    char t = *i;

    // read the sub-word by set the character at `end` position to '\0'
    *i = '\0';
    res = check_word_s(word, ci);
    // restore original character at `end` position
    *i = t;

    // Current sub-word is invalid, we need append the character at current
    //  `end` position to creata new sub-word.
    //  Inncrement `i` because `i` always points to the `end` of sub-word
    if (!res) continue;

    // Current sub-word is valid, strip it from the whole word to create a totally
    // new word for `check_word`, `check_word` is a recursive function
    res = check_word(i, word_end, ci + 1, pos + 1);
    if (res) return res;
  }
  memset(ci, 0, sizeof(CheckInfo));
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Say first parameter of &lt;code&gt;check_word&lt;/code&gt; is "hisHelle",
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;word&lt;/code&gt; points to string "hisHelle" (in C/C++, string is character array. The last character of array is character &lt;code&gt;'\0'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sp-&amp;gt;run_together_min_&lt;/code&gt; is 3, so &lt;code&gt;i&lt;/code&gt; initially points to the character "H", at the end of sub-word "his"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_word_s&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt; for sub-word "his"&lt;/li&gt;
&lt;li&gt;So we strip "his" from "hisHelle" and recursively call &lt;code&gt;check_word&lt;/code&gt; to check new word "Helle"&lt;/li&gt;
&lt;li&gt;In the new context of &lt;code&gt;check_word&lt;/code&gt;, we extract "Hel" from "Helle" initially&lt;/li&gt;
&lt;li&gt;"Hel" is invalid. So "Hell" is extracted from "Helle". The remaining charcter "e" is a treated as as new word with &lt;code&gt;check_word&lt;/code&gt; recursively applying on it&lt;/li&gt;
&lt;li&gt;"e" is not valid It's the last word could be extracted. So recursion is over. It's concluded that "hisHelle" is a typo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Key points:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--run-together-limit&lt;/code&gt; could be bigger with enough memory. It's default value is 8. I prefer 16.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; can't be 2 because too many typos are combination of "correct" two character sub-words ("hehe", "isme", …)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; can't be greater than 3, or else, too many "correct" three character sub-words are regarded as invalid ("his", "her", "one", "two")&lt;/li&gt;
&lt;li&gt;So &lt;code&gt;--run-together-min&lt;/code&gt; &lt;b&gt;should always be 3&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If &lt;code&gt;--run-together-min&lt;/code&gt; is 3, the word "onChange" is typo because the first two characters "on" is typo by aspell. This is obviously wrong.
&lt;/p&gt;

&lt;p&gt;
The solution is a Emacs Lisp predicate which supports &lt;b&gt;both aspell and hunspell&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
A predicate could be attached to specific major-mode. The predicate file all the typos reported by CLI program. If predicate returns  &lt;code&gt;t&lt;/code&gt;, the feed in typo is finally approved to be typo,
&lt;/p&gt;

&lt;p&gt;
A example of predicate for &lt;code&gt;js2-mode&lt;/code&gt;,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun js-flyspell-verify ()
  (let* ((font-face (get-text-property (- (point) 1) 'face))
         (word (thing-at-point 'word)))
    (message "font-face=%s word=%s" font-face word)
    t))
(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Typo candidates are filtered by &lt;code&gt;js-flyspell-verify&lt;/code&gt;. So predicate is where to fix typos wrongly reported by CLI program.
&lt;/p&gt;

&lt;p&gt;
Here is complete setup you can paste into &lt;code&gt;.emacs&lt;/code&gt; (I setup for &lt;code&gt;js2-mode&lt;/code&gt; and &lt;code&gt;rjsx-mode&lt;/code&gt; but code is generic enough).
&lt;/p&gt;

&lt;p&gt;
Please note function &lt;code&gt;split-camel-case&lt;/code&gt; splits a camel case word into a list of sub-words. Sub-word with less one or two characters is not typo.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun split-camel-case (word)
  "Split camel case WORD into a list of strings.
Ported from 'https://github.com/fatih/camelcase/blob/master/camelcase.go'."
  (let* ((case-fold-search nil)
         (len (length word))
         ;; ten sub-words is enough
         (runes [nil nil nil nil nil nil nil nil nil nil])
         (runes-length 0)
         (i 0)
         ch
         (last-class 0)
         (class 0)
         rlt)

    ;; split into fields based on class of character
    (while (&amp;lt; i len)
      (setq ch (elt word i))
      (cond
       ;; lower case
       ((and (&amp;gt;= ch ?a) (&amp;lt;= ch ?z))
        (setq class 1))
       ;; upper case
       ((and (&amp;gt;= ch ?A) (&amp;lt;= ch ?Z))
        (setq class 2))
       ((and (&amp;gt;= ch ?0) (&amp;lt;= ch ?9))
        (setq class 3))
       (t
        (setq class 4)))

      (cond
       ((= class last-class)
        (aset runes
              (1- runes-length)
              (concat (aref runes (1- runes-length)) (char-to-string ch))))
       (t
        (aset runes runes-length (char-to-string ch))
        (setq runes-length (1+ runes-length))))
      (setq last-class class)
      ;; end of while
      (setq i (1+ i)))

    ;; handle upper case -&amp;gt; lower case sequences, e.g.
    ;;     "PDFL", "oader" -&amp;gt; "PDF", "Loader"
    (setq i 0)
    (while (&amp;lt; i (1- runes-length))
      (let* ((ch-first (aref (aref runes i) 0))
             (ch-second (aref (aref runes (1+ i)) 0)))
        (when (and (and (&amp;gt;= ch-first ?A) (&amp;lt;= ch-first ?Z))
                   (and (&amp;gt;= ch-second ?a) (&amp;lt;= ch-second ?z)))
          (aset runes (1+ i) (concat (substring (aref runes i) -1) (aref runes (1+ i))))
          (aset runes i (substring (aref runes i) 0 -1))))
      (setq i (1+ i)))

    ;; construct final result
    (setq i 0)
    (while (&amp;lt; i runes-length)
      (when (&amp;gt; (length (aref runes i)) 0)
        (setq rlt (add-to-list 'rlt (aref runes i) t)))
      (setq i (1+ i)))
     rlt))

(defun flyspell-detect-ispell-args (&amp;amp;optional run-together)
  "If RUN-TOGETHER is true, spell check the CamelCase words.
Please note RUN-TOGETHER will make aspell less capable. So it should only be used in prog-mode-hook."
  ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
  (let* ((args (list "--sug-mode=ultra" "--lang=en_US"))args)
    (if run-together
        (setq args (append args '("--run-together" "--run-together-limit=16"))))
    args))

;; {{ for aspell only, hunspell does not need setup `ispell-extra-args'
(setq ispell-program-name "aspell")
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;; }}

;; ;; {{ hunspell setup, please note we use dictionary "en_US" here
;; (setq ispell-program-name "hunspell")
;; (setq ispell-local-dictionary "en_US")
;; (setq ispell-local-dictionary-alist
;;       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;; ;; }}

(defvar extra-flyspell-predicate '(lambda (word) t)
  "A callback to check WORD.  Return t if WORD is typo.")

(defun my-flyspell-predicate (word)
  "Use aspell to check WORD.  If it's typo return t."
  (let* ((cmd (cond
               ;; aspell: `echo "helle world" | aspell pipe`
               ((string-match-p "aspell$" ispell-program-name)
                (format "echo \"%s\" | %s pipe"
                        word
                        ispell-program-name))
               ;; hunspell: `echo "helle world" | hunspell -a -d en_US`
               (t
                (format "echo \"%s\" | %s -a -d en_US"
                        word
                        ispell-program-name))))
         (cmd-output (shell-command-to-string cmd))
         rlt)
    ;; (message "word=%s cmd=%s" word cmd)
    ;; (message "cmd-output=%s" cmd-output)
    (cond
     ((string-match-p "^&amp;amp;" cmd-output)
      ;; it's a typo because at least one sub-word is typo
      (setq rlt t))
     (t
      ;; not a typo
      (setq rlt nil)))
    rlt))

(defun js-flyspell-verify ()
  (let* ((case-fold-search nil)
         (font-matched (memq (get-text-property (- (point) 1) 'face)
                             '(js2-function-call
                               js2-function-param
                               js2-object-property
                               js2-object-property-access
                               font-lock-variable-name-face
                               font-lock-string-face
                               font-lock-function-name-face
                               font-lock-builtin-face
                               rjsx-text
                               rjsx-tag
                               rjsx-attr)))
         subwords
         word
         (rlt t))
    (cond
     ((not font-matched)
      (setq rlt nil))
     ;; ignore two character word
     ((&amp;lt; (length (setq word (thing-at-point 'word))) 2)
      (setq rlt nil))
     ;; handle camel case word
     ((and (setq subwords (split-camel-case word)) (&amp;gt; (length subwords) 1))
      (let* ((s (mapconcat (lambda (w)
                             (cond
                              ;; sub-word wholse length is less than three
                              ((&amp;lt; (length w) 3)
                               "")
                               ;; special characters
                              ((not (string-match-p "^[a-zA-Z]*$" w))
                               "")
                              (t
                               w))) subwords " ")))
        (setq rlt (my-flyspell-predicate s))))
     (t
      (setq rlt (funcall extra-flyspell-predicate word))))
    rlt))

(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
(put 'rjsx-mode 'flyspell-mode-predicate 'js-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;UPDATE:&lt;/b&gt;
Now you can use &lt;a href="https://github.com/redguardtoo/wucuo"&gt;wucuo&lt;/a&gt;. It's an out of box solution supporting both aspell and hunspell.&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>flyspell</category><guid>http://blog.binchen.org/posts/how-to-spell-check-functionvariable-in-emacs.html</guid><pubDate>Sun, 17 Jun 2018 03:16:41 GMT</pubDate></item></channel></rss>