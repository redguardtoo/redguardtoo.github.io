<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about git)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 30 Aug 2025 11:00:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Integrate delta into git</title><link>http://redguardtoo.github.io/posts/integrate-delta-into-git/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="https://github.com/dandavison/delta"&gt;Delta&lt;/a&gt; is a syntax-highlighting pager for git, diff, and grep output.
&lt;/p&gt;

&lt;p&gt;
Set up is as simple as &lt;a href="https://github.com/dandavison/delta#get-started"&gt;copying its sample setup&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I wrote a shell script &lt;code&gt;my-pager&lt;/code&gt; which can use both &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;delta&lt;/code&gt; as pager,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/bash
# @see https://stackoverflow.com/questions/19408649/pipe-input-into-a-script
if [ -x "$HOME/.cargo/bin/delta" ]; then
    cat | $HOME/.cargo/bin/delta "$@"
else
    cat | less -F -X
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is my extra delta setup in &lt;code&gt;~/.gitconfig&lt;/code&gt; (Delta reads settings from &lt;code&gt;~/.gitconfig&lt;/code&gt;),
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[core]
pager = ~/bin/my-pager
[interactive]
diffFilter = ~/bin/my-pager --color-only
[merge]
conflictstyle = diff3
[diff]
colorMoved = default
[delta "default"]
file-decoration-style= blue box
hunk-header-decoration-style = purple ol
[delta]
features = default
navigate = true  # use n and N to move between diff sections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot,
&lt;img src="http://redguardtoo.github.io/wp-content/git-delta.png" alt="git-delta.png"&gt;&lt;/p&gt;</description><category>delta</category><category>diff</category><category>emacs</category><category>en</category><category>git</category><guid>http://redguardtoo.github.io/posts/integrate-delta-into-git/</guid><pubDate>Wed, 27 Apr 2022 12:03:37 GMT</pubDate></item><item><title>Use Magit to commit efficiently and correctly</title><link>http://redguardtoo.github.io/posts/use-magit-to-commit-efficiently-and-correctly/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
I prefer using git cli because it's more light weight.
&lt;/p&gt;

&lt;p&gt;
Here is my bash alias of &lt;code&gt;git commit&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;alias gc="git commit -m"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The problem of my "cli-only" workflow is it can't detect my mistakes automatically.
&lt;/p&gt;

&lt;p&gt;
I often forget to add new code file into git. So my final commit might miss files.
&lt;/p&gt;
&lt;div id="outline-container-org3868094" class="outline-2"&gt;
&lt;h3 id="org3868094"&gt;Magit UI solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org3868094"&gt;
&lt;p&gt;
One solution is to use &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt; to commit inside Emacs. After commit, I could double check the files inside the hooks provided by Magit.
&lt;/p&gt;

&lt;p&gt;
My set up in Emacs,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-lines-from-command-output (command)
  "Return lines of COMMAND output."
  (let* ((output (string-trim (shell-command-to-string command)))
         (cands (nonempty-lines output)))
    (delq nil (delete-dups cands))))

(defun my-hint-untracked-files ()
  "If untracked files and commited files share same extension, warn users."
  (let* ((exts (mapcar 'file-name-extension (my-lines-from-command-output "git diff-tree --no-commit-id --name-only -r HEAD")))
         (untracked-files (my-lines-from-command-output "git --no-pager ls-files --others --exclude-standard"))
         (lookup-ext (make-hash-table :test #'equal))
         rlt)
    ;; file extensions of files in HEAD commit
    (dolist (ext exts)
      (puthash ext t lookup-ext))
    ;; If untracked file has same file extension as committed files
    ;; maybe they should be staged too?
    (dolist (file untracked-files)
      (when (gethash (file-name-extension file) lookup-ext)
        (push (file-name-nondirectory file) rlt)))
    (when rlt
      (message "Stage files? %s" (mapconcat 'identity rlt " ")))))

(with-eval-after-load 'magit
  (defun my-git-check-status ()
    "Check git repo status."
    ;; use timer here to wait magit cool down
    (run-with-idle-timer 1 nil #'my-hint-untracked-files))
  (add-hook 'magit-post-commit-hook #'my-git-check-status)
  (add-hook 'git-commit-post-finish-hook #'my-git-check-status))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot of step 1 in Emacs,
&lt;img src="http://redguardtoo.github.io/wp-content/magit-commit-step1.png" alt="magit-commit-step1.png"&gt;
&lt;/p&gt;

&lt;p&gt;
Screenshot of step 2 (final step) in Emacs (I was reminded of untracked files "bye.js" and "tree.js" at the bottom of UI),
&lt;img src="http://redguardtoo.github.io/wp-content/magit-commit-step2.png" alt="magit-commit-step2.png"&gt;
&lt;/p&gt;

&lt;p&gt;
BTW, my actual code in my &lt;code&gt;.emacs.d&lt;/code&gt; is &lt;a href="https://github.com/redguardtoo/emacs.d/commit/c62b2b9434ac8e01ed6bd6ee927e66f62df68194"&gt;a bit different&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga2284d1" class="outline-2"&gt;
&lt;h3 id="orga2284d1"&gt;CLI solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga2284d1"&gt;
&lt;p&gt;
Another solution is doing the git thing in shell plus Emacs "-batch" option.
&lt;/p&gt;

&lt;p&gt;
Here is my bash setup,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;function gc {
    # check my emacs.d exist
    if [ -f "$HOME/.emacs.d/README.org" ] &amp;amp;&amp;amp; [ "$PWD" != "$HOME/.emacs.d" ]; then
        # magit hook does not work
        git commit -m "$@" &amp;amp;&amp;amp; emacs -batch -Q -l "$HOME/.emacs.d/init.el" --eval "(my-hint-untracked-files)"
    else
        git commit -m "$@"
    fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Please note running &lt;code&gt;magit-commit-create&lt;/code&gt; in cli won't work. It's because &lt;code&gt;magit-run-git-async&lt;/code&gt; in called and it might lock the git after the cli execution.
&lt;/p&gt;

&lt;p&gt;
Screenshot in shell,
&lt;img src="http://redguardtoo.github.io/wp-content/magit-commit-in-shell.png" alt="magit-commit-in-shell.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>magit</category><guid>http://redguardtoo.github.io/posts/use-magit-to-commit-efficiently-and-correctly/</guid><pubDate>Tue, 02 Mar 2021 13:06:58 GMT</pubDate></item><item><title>Use Magit API to rebase to closest branch</title><link>http://redguardtoo.github.io/posts/use-magit-api-to-rebase-to-closest-branch/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
My workflow in Git is,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Create a new feature branch based on main branch&lt;/li&gt;
&lt;li&gt;Add some small commits into feature branch&lt;/li&gt;
&lt;li&gt;Rebase feature branch interactively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The final rebase step happens a lot.
&lt;/p&gt;

&lt;p&gt;
So I could use Magit api &lt;code&gt;magit-rebase-interactive&lt;/code&gt; to speed up it.
&lt;/p&gt;

&lt;p&gt;
The key is to analyze output of &lt;code&gt;git log --decorate --oneline&lt;/code&gt; to find the main branch commit.
&lt;/p&gt;

&lt;p&gt;
Code,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-git-extract-based (target)
  "Extract based version from TARGET."
  (replace-regexp-in-string "^tag: +"
                            ""
                            (car (nreverse (split-string target ", +")))))

(defun my-git-rebase-interactive (&amp;amp;optional user-select-branch)
  "Rebase interactively on the closest branch or tag in git log output.
If USER-SELECT-BRANCH is not nil, rebase on the tag or branch selected by user."
  (interactive "P")
  (let* ((log-output (shell-command-to-string "git --no-pager log --decorate --oneline -n 1024"))
         (lines (split-string log-output "\n"))
         (targets (delq nil
                        (mapcar (lambda (e)
                                  (when (and (string-match "^[a-z0-9]+ (\\([^()]+\\)) " e)
                                             (not (string-match "^[a-z0-9]+ (HEAD " e)))
                                    (match-string 1 e))) lines)))
         based)
    (cond
     ((or (not targets) (eq (length targets) 0))
      (message "No tag or branch is found to base on."))
     ((or (not user-select-branch)) (eq (length targets) 1)
      ;; select the closest/only tag or branch
      (setq based (my-git-extract-based (nth 0 targets))))
     (t
      ;; select the one tag or branch
      (setq based (my-git-extract-based (completing-read "Select based: " targets)))))

    ;; start git rebase
    (when based
      (magit-rebase-interactive based nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screencast:
&lt;/p&gt;

&lt;div id="orgc453b6f" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/magit-rebase-api.gif" alt="magit-rebase-api.gif"&gt;
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>magit</category><guid>http://redguardtoo.github.io/posts/use-magit-api-to-rebase-to-closest-branch/</guid><pubDate>Tue, 14 Apr 2020 13:54:28 GMT</pubDate></item><item><title>Make Emacs faster than Vim in "git mergetool"</title><link>http://redguardtoo.github.io/posts/make-emacs-faster-than-vim-in-git-mergetool/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
My article &lt;a href="https://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html"&gt;Emacs is the best merge tool for Git&lt;/a&gt; explains how to combine &lt;a href="https://git-scm.com/docs/git-mergetool/2.20.0"&gt;git mergetool&lt;/a&gt; with &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/"&gt;ediff-mode&lt;/a&gt; in Emacs.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://disqus.com/by/harrisonmccullough/"&gt;Harrison McCullough&lt;/a&gt; suggested the work flow can be faster if emacs is replaced with emacsclient.
&lt;/p&gt;

&lt;p&gt;
I did some research and found a perfect solution. It's even faster than Vim.
&lt;/p&gt;
&lt;div id="outline-container-org940684b" class="outline-2"&gt;
&lt;h3 id="org940684b"&gt;Initial solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org940684b"&gt;
&lt;p&gt;
Please note emacsclient is only use for resolving conflicts.
&lt;/p&gt;

&lt;p&gt;
Step 1, start emacs server by running &lt;code&gt;emacs -Q --daemon --eval "(setq startup-now t)" -l "/home/my-username/.emacs.d/init.el" --eval "(progn (require 'server) (server-start))"&lt;/code&gt; in shell.
&lt;/p&gt;

&lt;p&gt;
Step 2, insert below code into &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; (see the comment why this advice is required):
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defadvice server-save-buffers-kill-terminal (after server-save-buffers-kill-terminal-after-hack activate)
  ;; kill all buffers, so new ediff panel is re-created and `ediff-startup-hook-setup' is called again
  ;; besides, remove the buffers whose binding files are alredy merged in `buffer-list'
  (mapc 'kill-buffer (buffer-list)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 3, insert below code into &lt;code&gt;~/.gitconfig&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.ediff]
cmd = emacsclient -nw --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgda534ff" class="outline-2"&gt;
&lt;h3 id="orgda534ff"&gt;My real world solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgda534ff"&gt;
&lt;p&gt;
It's similar to initial solution. But some scripts are created for automation.
&lt;/p&gt;

&lt;p&gt;
Step 1, read &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html"&gt;Using Emacs as a Server&lt;/a&gt; in the manual and create &lt;code&gt;~/.config/systemd/user/emacs.service&lt;/code&gt; for &lt;a href="https://en.wikipedia.org/wiki/Systemd"&gt;Systemd&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=emacs -Q --daemon --eval "(setq startup-now t)" -l "/home/my-username/.emacs.d/init.el" --eval "(progn (require 'server) (server-start))" 
ExecStop=emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 2, set up in &lt;code&gt;~/.gitconfig&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.emacs]
    cmd = ediff.sh "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
[mergetool.emacsclient]
    cmd = MYEMACSCLIENT=emacsclient ediff.sh "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 3, create &lt;code&gt;ediff.sh&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/sh
[ -z "$MYEMACSCLIENT" ] &amp;amp;&amp;amp; MYEMACSCLIENT="emacs"
# emacsclient won't work in git mergetool
# $1=$LOCAL $2=$REMOTE $3=$BASE $4=$MERGED
if [ "$MYEMACSCLIENT" = "emacs" ]; then
    $MYEMACSCLIENT -nw -Q --eval "(setq startup-now t)" -l "$HOME/.emacs.d/init.el" --eval "(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \"$3\") (ediff-merge-files-with-ancestor \"$1\" \"$2\" \"$3\" nil \"$4\") (ediff-merge-files \"$1\" \"$2\" nil \"$4\")))"
else
    $MYEMACSCLIENT -nw --eval "(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \"$3\") (ediff-merge-files-with-ancestor \"$1\" \"$2\" \"$3\" nil \"$4\") (ediff-merge-files \"$1\" \"$2\" nil \"$4\")))"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 4, run &lt;code&gt;git mergetool -t emacsclient&lt;/code&gt; to resolve conflicts.
&lt;/p&gt;

&lt;p&gt;
My &lt;a href="https://github.com/redguardtoo/emacs.d/commit/f35e749d"&gt;init-ediff.el&lt;/a&gt; in &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;emacs.d&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>mergetool</category><guid>http://redguardtoo.github.io/posts/make-emacs-faster-than-vim-in-git-mergetool/</guid><pubDate>Fri, 10 Apr 2020 09:33:40 GMT</pubDate></item><item><title>Effective "git blame" in Emacs</title><link>http://redguardtoo.github.io/posts/effective-git-blame-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
I published Emacs package &lt;a href="https://github.com/redguardtoo/vc-msg"&gt;vc-msg&lt;/a&gt;. It uses &lt;code&gt;git-blame&lt;/code&gt; to show commit information of current line.
&lt;/p&gt;

&lt;p&gt;
In the new version, it can display the correct commit information of current line.
&lt;/p&gt;

&lt;p&gt;
For example, the line 6 at &lt;a href="https://github.com/redguardtoo/test-git-blame/blob/master/hello.js"&gt;https://github.com/redguardtoo/test-git-blame/blob/master/hello.js&lt;/a&gt; is changed by three commits.
&lt;/p&gt;

&lt;p&gt;
Select the partial of line 6 and run &lt;code&gt;vc-msg-show&lt;/code&gt;, the correct commit is displayed.
&lt;/p&gt;

&lt;p&gt;
Screenshots,
&lt;/p&gt;

&lt;div id="orgd17fc21" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/vc-msg-neutral.png" alt="vc-msg-neutral.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="org805d4f2" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/vc-msg-good.png" alt="vc-msg-good.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="org701707c" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/vc-msg-bad.png" alt="vc-msg-bad.png"&gt;
&lt;/p&gt;
&lt;/div&gt;</description><category>blame</category><category>emacs</category><category>en</category><category>git</category><guid>http://redguardtoo.github.io/posts/effective-git-blame-in-emacs/</guid><pubDate>Wed, 20 Nov 2019 13:42:54 GMT</pubDate></item><item><title>Emacs is the best merge tool for Git</title><link>http://redguardtoo.github.io/posts/emacs-is-the-best-merge-tool-for-git/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2019-11-13 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2020-04-10 Fri&amp;gt; &lt;/span&gt;&lt;/span&gt; if you use my solution, you can &lt;a href="http://blog.binchen.org/posts/make-emacs-faster-than-vim-in-git-mergetool.html"&gt;replace emacs with emacsclient&lt;/a&gt;. So it's even &lt;b&gt;faster than Vim&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
I used to regard vimdiff as the best merge tool for Git because it's simply fast.
&lt;/p&gt;

&lt;p&gt;
Here is the demo how I use vimdiff to resolve conflicts from &lt;a href="https://github.com/redguardtoo/test-git-mergetool"&gt;https://github.com/redguardtoo/test-git-mergetool&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="orgbbfb4ca" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/vimdiff-as-git-merge-tool.gif" alt="vimdiff-as-git-merge-tool.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Please note in the screencast I use Git built in command &lt;a href="https://git-scm.com/docs/git-mergetool"&gt;mergetool&lt;/a&gt;. It will &lt;b&gt;automatically&lt;/b&gt; open conflicted file one by one using vim. In other software, the developer need &lt;b&gt;manually&lt;/b&gt; select and open the conflicted file. 
&lt;/p&gt;

&lt;p&gt;
The only issue is Vim is not as powerful as Emacs.
&lt;/p&gt;

&lt;p&gt;
Resolving conflicts is NOT only picking up a diff hunk from remote/local buffer. I often need place my hunk into merged buffer first, then I go to remote buffer and copy some snippet into merged buffer. So there are lots of sub-window operations.
&lt;/p&gt;

&lt;p&gt;
In Emacs, I use &lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace-window&lt;/a&gt; and &lt;a href="https://github.com/deb0ch/emacs-winum"&gt;Winum&lt;/a&gt; to move focus between sub-windows.  I also use API &lt;code&gt;window-configuration-to-register&lt;/code&gt; and &lt;code&gt;jump-to-register&lt;/code&gt; to save/load windows layout. Besides, &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;Ediff&lt;/a&gt; is a beast to handle diff and patch.
&lt;/p&gt;

&lt;p&gt;
So I give one example to prove why Emacs should be a better merge tool &lt;b&gt;in theory&lt;/b&gt;. If you are good at both Vim and Emacs, you know it's the truth.
&lt;/p&gt;

&lt;p&gt;
Now let's talk the real world problem. And I will show you a perfect solution soon.
&lt;/p&gt;

&lt;p&gt;
The problem is, I never use Emacs to resolve merge conflicts for two reasons:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;First, &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;My Emacs configuration&lt;/a&gt; uses too many packages. It starts up slowly. As you can see from vimdiff demo, &lt;code&gt;git mergetool&lt;/code&gt; restarts the editor many times. So the editor should be lightweight.&lt;/li&gt;
&lt;li&gt;Second, the UI of &lt;code&gt;ediff&lt;/code&gt; is not right. UI of Vimdiff is much better. All operations should be completed freely in any sub-window instead of ediff control panel only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Luckily, Emacs gives me the full freedom to solve the problem. The final result is beyond my expectation.
&lt;/p&gt;

&lt;p&gt;
Here is the complete solution.
&lt;/p&gt;
&lt;div id="outline-container-orgbbb3e21" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This technique is only useful for &lt;code&gt;git mergetool&lt;/code&gt; because git will open and close the text editor Emacs many times.
&lt;/p&gt;

&lt;p&gt;
Insert below code into &lt;code&gt;~/.gitconfig&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.ediff]
# use git mergetool ediff to resolve conflicts
cmd = emacs -nw -Q --eval \"(setq startup-now t)\" -l \"~/.emacs.d/init.el\" --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
In above code, option &lt;code&gt;-Q&lt;/code&gt; equals &lt;code&gt;-q --no-site-file --no-splash&lt;/code&gt;. Actually, only &lt;code&gt;-q&lt;/code&gt; is critical. &lt;code&gt;-q&lt;/code&gt; means "Do not load an init file". A global emacs lisp flag &lt;code&gt;startup-now&lt;/code&gt; is defined before loading &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Then in &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, I need only add one line,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(when (not (boundp 'startup-now))
  ;; heavy weight configuration happens here
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
When &lt;code&gt;startup-now&lt;/code&gt; is defined, all the heavyweight configuration should be off. Considering in this scenario, we are using Emacs only as merge tool, 99% configuration could be turned off. For example, set up for any programming language is not required. Flyspell and flycheck should be off. Yasnippet is also useless. 
&lt;/p&gt;

&lt;p&gt;
I only need focus on essential operations related to text/file/window.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/emacs-evil/evil"&gt;Evil&lt;/a&gt; should be used. At the beginning of this article, I said "I love vimdiff because it's fast". It's impossible to be more efficient without Evil.
&lt;/p&gt;

&lt;p&gt;
Any patch/diff utilities should be included too. &lt;a href="https://github.com/abo-abo/swiper"&gt;counsel/swiper/ivy&lt;/a&gt; is also must have because I can use &lt;code&gt;counsel-git&lt;/code&gt; to find file and &lt;code&gt;counsel-git-grep&lt;/code&gt; to grep text.
&lt;/p&gt;

&lt;p&gt;
Native Emacs API is enough to save/load windows layout.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb5aaf36" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Packages dependent on ediff (&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;?) could also benefit from optimization of ediff.
&lt;/p&gt;

&lt;p&gt;
The optimization is simple. Do everything in merged buffer.
&lt;/p&gt;

&lt;p&gt;
First I move focus into merged buffer when Emacs starts up,
&lt;/p&gt;

&lt;p&gt;
This set up happens in &lt;code&gt;ediff-startup-hook&lt;/code&gt;, 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun ediff-startup-hook-setup ()
  ;; hide control panel if it's current buffer
  (when (string-match-p (setq my-ediff-panel-name (buffer-name))
                        "\*Ediff Control Panel.*\*")
    ;; move to the first difference
    (ediff-next-difference)
    ;; move to the merged buffer window
    (winum-select-window-by-number 3)
    ;; save the windows layout
    (window-configuration-to-register ?a)))

(add-hook 'ediff-startup-hook 'ediff-startup-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
Please note I use &lt;code&gt;winum-select-window-by-number&lt;/code&gt; from &lt;code&gt;winum&lt;/code&gt; move focus to merged buffer. You can use any other third party package or native API &lt;code&gt;select-window&lt;/code&gt; instead.
&lt;/p&gt;

&lt;p&gt;
Saving initial windows layout into register &lt;code&gt;a&lt;/code&gt; is achieved by &lt;code&gt;(window-configuration-to-register ?a)&lt;/code&gt; in &lt;code&gt;ediff-startup-hook&lt;/code&gt;. &lt;code&gt;(jump-to-register ?a)&lt;/code&gt; restores the saved layout.
&lt;/p&gt;

&lt;p&gt;
Then we need make sure ediff commands can be used out of ediff's panel. Currently ediff command can only be triggered inside of its panel.
&lt;/p&gt;

&lt;p&gt;
The trick is "move focus into ediff panel temporarily to execute its commands, then move focus back to original window".
&lt;/p&gt;

&lt;p&gt;
So I designed a macro &lt;code&gt;my-ediff-command&lt;/code&gt; to do this,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defmacro my-ediff-command (cmd &amp;amp;optional no-arg)
  `(lambda (&amp;amp;optional arg)
     (interactive "P")
     (let* ((w (get-buffer-window)))
       ;; go to panel window
       (select-window (get-buffer-window my-ediff-panel-name))
       ;; execute ediff command, ignore any error
       (condition-case e
           (if ,no-arg (funcall ,cmd) (funcall ,cmd arg))
         (error
          (message "%s" (error-message-string e))))
       ;; back to original window
       (select-window w))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Usage is simple,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(global-set-key (kbd "C-c C-y") (my-ediff-command 'ediff-next-difference))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is the list of essential ediff commands,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;ediff-next-difference&lt;/li&gt;
&lt;li&gt;ediff-previous-difference&lt;/li&gt;
&lt;li&gt;ediff-restore-diff-in-merge-buffer&lt;/li&gt;
&lt;li&gt;ediff-revert-buffers-then-recompute-diffs&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-both-to-C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can use &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyra&lt;/a&gt; or &lt;a href="https://github.com/noctuid/general.el"&gt;General.el&lt;/a&gt; to assign key bindings.
&lt;/p&gt;

&lt;p&gt;
The definition of &lt;code&gt;ediff-copy-both-to-C&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; @see https://stackoverflow.com/a/29757750/245363
(defun ediff-copy-both-to-C (&amp;amp;optional arg)
  "Copy code from both A and B to C."
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is &lt;a href="https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0"&gt;my ~/.gitconfig&lt;/a&gt; and &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ediff.el"&gt;my ediff set up&lt;/a&gt; in real world.
&lt;/p&gt;

&lt;p&gt;
Please note the techniques introduced here &lt;b&gt;can be used with other VCS (subversion, perforce …)&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Demo on using Emacs to resolve merge conflicts,
&lt;/p&gt;


&lt;div id="org2bd75b2" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/emacs-as-git-merge-tool.gif" alt="emacs-as-git-merge-tool.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>mergetool</category><guid>http://redguardtoo.github.io/posts/emacs-is-the-best-merge-tool-for-git/</guid><pubDate>Wed, 13 Nov 2019 13:29:46 GMT</pubDate></item><item><title>Enhance emacs-git-gutter with ivy-mode</title><link>http://redguardtoo.github.io/posts/enhance-emacs-git-gutter-with-ivy-mode/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2016-07-14 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2016-09-23 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/syohex/emacs-git-gutter"&gt;emacs-git-gutter&lt;/a&gt; shows an icon in the gutter area. The icon indicating whether a line has been inserted, modified or deleted in Emacs.
&lt;/p&gt;

&lt;p&gt;
I usually use &lt;code&gt;M-x git-gutter:previous-hunk&lt;/code&gt; or &lt;code&gt;M-x git-gutter:next-hunk&lt;/code&gt; to navigate between the hunks.
&lt;/p&gt;

&lt;p&gt;
But if there are too many hunks in one file, &lt;a href="https://github.com/abo-abo/swiper"&gt;ivy-mode&lt;/a&gt; is more efficient:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'ivy)
(require 'git-gutter)

(defun my-reshape-git-gutter (gutter)
  "Re-shape gutter for `ivy-read'."
  (let* ((linenum-start (aref gutter 3))
         (linenum-end (aref gutter 4))
         (target-line "")
         (target-linenum 1)
         (tmp-line "")
         (max-line-length 0))
    (save-excursion
      (while (&amp;lt;= linenum-start linenum-end)
        (goto-line linenum-start)
        (setq tmp-line (replace-regexp-in-string "^[ \t]*" ""
                                                 (buffer-substring (line-beginning-position)
                                                                   (line-end-position))))
        (when (&amp;gt; (length tmp-line) max-line-length)
          (setq target-linenum linenum-start)
          (setq target-line tmp-line)
          (setq max-line-length (length tmp-line)))

        (setq linenum-start (1+ linenum-start))))
    ;; build (key . linenum-start)
    (cons (format "%s %d: %s"
                  (if (eq 'deleted (aref gutter 1)) "-" "+")
                  target-linenum target-line)
          target-linenum)))

(defun my-goto-git-gutter ()
  (interactive)
  (if git-gutter:diffinfos
      (ivy-read "git-gutters:"
                (mapcar 'my-reshape-git-gutter git-gutter:diffinfos)
                :action (lambda (e)
                          ;; ivy9+ keep `(car e)'
                          ;; ivy8- strip the `(car e)'
                          ;; we handle both data structure
                          (unless (numberp e) (setq e (cdr e)))
                          (goto-line e)))
    (message "NO git-gutters!")))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot:
&lt;/p&gt;

&lt;div id="org7205fce" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/git-gutter-and-ivy-nq8.png" alt="git-gutter-and-ivy-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>gutter</category><category>ivy</category><category>mode</category><guid>http://redguardtoo.github.io/posts/enhance-emacs-git-gutter-with-ivy-mode/</guid><pubDate>Thu, 14 Jul 2016 13:35:32 GMT</pubDate></item><item><title>New git-timemachine UI based on ivy-mode</title><link>http://redguardtoo.github.io/posts/new-git-timemachine-ui-based-on-ivy-mode/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2016-09-23 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2016-06-05 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
When using &lt;a href="https://github.com/pidu/git-timemachine"&gt;git-timemachine&lt;/a&gt;, I prefer start from my selected revision instead of HEAD.
&lt;/p&gt;

&lt;p&gt;
Here is my code based on &lt;a href="https://github.com/abo-abo/swiper"&gt;ivy-mode&lt;/a&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-git-timemachine-show-selected-revision ()
  "Show last (current) revision of file."
  (interactive)
  (let* ((collection (mapcar (lambda (rev)
                    ;; re-shape list for the ivy-read
                    (cons (concat (substring-no-properties (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                  (git-timemachine--revisions))))
    (ivy-read "commits:"
              collection
              :action (lambda (rev)
                        ;; compatible with ivy 9+ and ivy 8
                        (unless (string-match-p "^[a-z0-9]*$" (car rev))
                          (setq rev (cdr rev)))
                        (git-timemachine-show-revision rev)))))

(defun my-git-timemachine ()
  "Open git snapshot with the selected version.  Based on ivy-mode."
  (interactive)
  (unless (featurep 'git-timemachine)
    (require 'git-timemachine))
  (git-timemachine--start #'my-git-timemachine-show-selected-revision))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot after &lt;code&gt;M-x my-git-timemachine&lt;/code&gt;,
&lt;/p&gt;

&lt;div id="org8b534f2" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/my-git-timemachine-nq8.png" alt="my-git-timemachine-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>ivy</category><category>timemachine</category><guid>http://redguardtoo.github.io/posts/new-git-timemachine-ui-based-on-ivy-mode/</guid><pubDate>Sun, 05 Jun 2016 14:32:39 GMT</pubDate></item><item><title>Git gutter tip</title><link>http://redguardtoo.github.io/posts/git-gutter-tip/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
I use &lt;a href="https://github.com/syohex/emacs-git-gutter"&gt;git-gutter.el&lt;/a&gt; everyday. It indicats "whether a line has been inserted, modified or deleted". You can jump to the inser/modified/deleted line easily.
&lt;/p&gt;

&lt;p&gt;
But I usually need to know what line changed in &lt;b&gt;latest commit&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
So I designed `M-x git-gutter-reset-to-head-parent`,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun git-gutter-reset-to-head-parent()
  (interactive)
  (let (parent (filename (buffer-file-name)))
    (if (eq git-gutter:vcs-type 'svn)
        (setq parent "PREV")
      (setq parent (if filename (concat (shell-command-to-string (concat "git --no-pager log --oneline -n1 --pretty='format:%H' " filename)) "^") "HEAD^")))
    (git-gutter:set-start-revision parent)
    (message "git-gutter:set-start-revision HEAD^")))

(defun git-gutter-reset-to-default ()
  (interactive)
  (git-gutter:set-start-revision nil)
  (message "git-gutter reset"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
`M-x git-gutter-reset-to-default` compare you file under working directory with the latet version under VCS.
&lt;/p&gt;

&lt;p&gt;
`M-x git-gutter:next-hunk` and `M-x git-gutter:previous-hunk` will jump to the deleted/modified/added line.
&lt;/p&gt;</description><category>emacs</category><category>en</category><category>git</category><category>gutter</category><guid>http://redguardtoo.github.io/posts/git-gutter-tip/</guid><pubDate>Fri, 08 Jan 2016 12:41:59 GMT</pubDate></item><item><title>Use git-timemachine with Evil</title><link>http://redguardtoo.github.io/posts/use-git-timemachine-with-evil/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="https://github.com/pidu/git-timemachine"&gt;git-timemachine&lt;/a&gt; is simple.
&lt;/p&gt;

&lt;p&gt;
After "M-x git-timemachine", a new read-only buffer is created and I need only use six key bindings: "n", "q", "p", "w", "W", "g".
&lt;/p&gt;

&lt;p&gt;
The problem is I'm using &lt;a href="http://www.emacswiki.org/emacs/Evil"&gt;Evil&lt;/a&gt;. How to make git-timemachine's key bindings override Evil's?
&lt;/p&gt;

&lt;p&gt;
I consulted the issue with Frank Fischer.
&lt;/p&gt;

&lt;p&gt;
The solution is simple. Insert below code into ~/.emacs:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings
(with-eval-after-load 'git-timemachine
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  ;; force update evil keymaps after git-timemachine-mode loaded
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I also recommend reading &lt;a href="https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings"&gt;his in-depth discussion&lt;/a&gt; on &lt;b&gt;general handling of keybindings conflict&lt;/b&gt; between evil and other minor modes.&lt;/p&gt;</description><category>emacs</category><category>en</category><category>git</category><guid>http://redguardtoo.github.io/posts/use-git-timemachine-with-evil/</guid><pubDate>Thu, 09 Apr 2015 23:47:41 GMT</pubDate></item></channel></rss>