<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about javascript)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 25 Jul 2025 14:45:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Javascript code navigation in counsel-etags</title><link>http://redguardtoo.github.io/posts/javascript-code-navigation-in-counsel-etags/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Javascript code navigation is supported by &lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;counsel-etags&lt;/a&gt; out of box.
&lt;/p&gt;

&lt;p&gt;
It supports new javascript syntax like arrow function because &lt;code&gt;counsel-etags&lt;/code&gt; is only frontend.
&lt;/p&gt;

&lt;p&gt;
It reads tags file created by backend CLI program &lt;a href="https://github.com/universal-ctags/ctags"&gt;Ctags&lt;/a&gt;. Ctags uses regular expression to extract tag name from source code.
&lt;/p&gt;

&lt;p&gt;
But there are some syntax which regular expression could not help.
&lt;/p&gt;

&lt;p&gt;
For example, json object path can't be extracted by regular expression.
&lt;/p&gt;

&lt;p&gt;
Given an object &lt;code&gt;a&lt;/code&gt; in file A,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;var a = {
  b: {
    c: 3,
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
File B has code &lt;code&gt;let v1 = a.b.c;&lt;/code&gt;, how can we jump to the definition of the field &lt;code&gt;c&lt;/code&gt; from json path &lt;code&gt;a.b.c&lt;/code&gt;?
&lt;/p&gt;

&lt;p&gt;
The solution is to use Lisp to parse code in file A and generate extra navigation data which could be appended to tags file generated by Ctags.
&lt;/p&gt;

&lt;p&gt;
The algorithm is simple,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Traverse all the field of object &lt;code&gt;a&lt;/code&gt; in file A. Use API &lt;code&gt;js2-print-json-path&lt;/code&gt; from &lt;code&gt;js2-mode&lt;/code&gt; to get json path of current field.&lt;/li&gt;
&lt;li&gt;The json path could be regarded as tags name. We've already got file name and line number. So there is enough information to create navigation data for tags file. Here is &lt;a href="https://en.wikipedia.org/wiki/Ctags"&gt;tags file format&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Necessary utilities are already provided by &lt;code&gt;counsel-etags v1.8.7&lt;/code&gt;,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;After tags files is generated by Ctags, the hook &lt;code&gt;counsel-etags-after-update-tags-hook&lt;/code&gt; is executed. Users can append tags file in this hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(counsel-etags-tag-line code-snippet tag-name line-number byte-offset)&lt;/code&gt; return a line which could be appended into tags file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
My current project uses a technology called &lt;a href="https://www.styled-components.com/docs/basics"&gt;styled-components&lt;/a&gt; which has an advanced feature &lt;a href="https://www.styled-components.com/docs/advanced#theming"&gt;theming&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It could dynamically change web application's appearance and is a critical technology for our application to support multiple customer. Application's theme is basically a file containing a huge json object. So it's important that developers can jump to the corresponding json object's field by json path.
&lt;/p&gt;
&lt;div id="outline-container-org2066be2" class="outline-2"&gt;
&lt;h3 id="org2066be2"&gt;Screencast&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org2066be2"&gt;

&lt;div id="orgdf98eac" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/counsel-etags-plus-json-path.gif" alt="counsel-etags-plus-json-path.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org56e3e57" class="outline-2"&gt;
&lt;h3 id="org56e3e57"&gt;Code&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org56e3e57"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'counsel-etags)

(defun my-manual-update-tag-file (code-file tags-file)
  (let* ((dir (file-name-directory tags-file))
         (path (concat dir code-file))
         curline
         jp
         tagstr)
    (unless (featurep 'js2-mode) (require 'js2-mode))
    (with-temp-buffer
      (insert-file-contents path)
      (js2-init-scanner)
      (js2-do-parse)
      (goto-char (point-min))
      ;; find all js object property names
      (while (re-search-forward "\"?[a-z][a-zA-Z0-9]*\"?:" (point-max) t)
        (when (setq jp (js2-print-json-path))
          (setq curline (string-trim (buffer-substring-no-properties (line-beginning-position)
                                                                     (line-end-position))))
          (setq tagstr (concat tagstr
                               (counsel-etags-tag-line curline
                                                       jp
                                                       (count-lines 1 (point))
                                                       (point)))))
        ;; move focus to next search
        (goto-char (line-end-position))))
    (when tagstr
      (with-temp-buffer
        (insert-file-contents tags-file)
        (goto-char (line-end-position))
        (insert (format "\n\014\n%s,%d\n%s" code-file 0 tagstr))
        (write-region (point-min) (point-max) tags-file nil :silent)))))

(defun counsel-etags-after-update-tags-hook-setup (tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/darkTheme.js" tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/lightTheme.js" tags-file))
(add-hook 'counsel-etags-after-update-tags-hook 'counsel-etags-after-update-tags-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>etags</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/javascript-code-navigation-in-counsel-etags/</guid><pubDate>Mon, 22 Jul 2019 12:07:16 GMT</pubDate></item><item><title>purify quora.com with vanilla javascript</title><link>http://redguardtoo.github.io/posts/purify-quora-com-with-vanilla-javascript/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
"Smart" &lt;a href="http://quora.com"&gt;http://quora.com&lt;/a&gt; always recommends the stories I hate to see.
&lt;/p&gt;

&lt;p&gt;
So here is my way to toggle the stories display on Chrome and Firefox.
&lt;/p&gt;

&lt;p&gt;
Step 1, create a new bookmark with below link,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;javascript:a=Array.from(document.getElementsByClassName("AnswerStoryToggleModal"));a.forEach(function(e){e.style.display=a[a.length-1].style.display==='none'?'block':'none';});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 2, DONE! You only need click the bookmark to hide or show the stories when visiting &lt;a href="http://quora.com"&gt;http://quora.com&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is the original vanilla javascript,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;var a = Array.from(document.getElementsByClassName("AnswerStoryToggleModal"));
a.forEach(function (e) {
    // check 'display' of the last item in story feed before toggling
    e.style.display = a[a.length - 1].style.display === 'none' ? 'block' : 'none';
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screenshot:
&lt;/p&gt;

&lt;div id="org44b7853" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/purify-quora-nq8.png" alt="purify-quora-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;</description><category>en</category><category>javascript</category><category>quora</category><guid>http://redguardtoo.github.io/posts/purify-quora-com-with-vanilla-javascript/</guid><pubDate>Sun, 09 Oct 2016 12:15:14 GMT</pubDate></item><item><title>Code completion for HTML/JS/CSS in Emacs</title><link>http://redguardtoo.github.io/posts/code-completion-for-htmljscss-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-11-27 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2020-03-27 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
You need install &lt;a href="https://en.wikipedia.org/wiki/Ctags"&gt;Ctags&lt;/a&gt; or &lt;a href="https://github.com/universal-ctags/ctags"&gt;universal-ctags&lt;/a&gt; at first.
&lt;/p&gt;

&lt;p&gt;
People using macOS will find there already exists a built in program named "ctags". &lt;b&gt;This program should be deleted!&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
If you want a &lt;b&gt;quick start&lt;/b&gt;, jump to the end of this article.
&lt;/p&gt;

&lt;p&gt;
You can use &lt;a href="https://github.com/redguardtoo/company-ctags"&gt;company-ctags&lt;/a&gt; plus &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt; to complete HTML/JS/CSS code.
&lt;/p&gt;

&lt;p&gt;
Setup is easy.
&lt;/p&gt;

&lt;p&gt;
Step 1, create TAGS:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;cd ~/myproj/ &amp;amp;&amp;amp; ctags -e -R .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 2, done.
&lt;/p&gt;

&lt;p&gt;
That's OK for most programming languages.
&lt;/p&gt;

&lt;p&gt;
But &lt;b&gt;not enough&lt;/b&gt; for web developers who use &lt;a href="https://github.com/fxbois/web-mode"&gt;web-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
You need upgrade web-mode to &lt;a href="https://github.com/fxbois/web-mode/pull/640"&gt;latest version&lt;/a&gt; so that when inputting "btn-" or "data-" code completion still works.
&lt;/p&gt;

&lt;p&gt;
One issue is &lt;code&gt;company-mode&lt;/code&gt; disables code completion in string and comment by default. We need &lt;b&gt;disable this feature in web-mode temporarily&lt;/b&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(with-eval-after-load 'company
  ;; @see https://github.com/redguardtoo/emacs.d/commit/2ff305c1ddd7faff6dc9fa0869e39f1e9ed1182d
  (defadvice company-in-string-or-comment (around company-in-string-or-comment-hack activate)
    (if (memq major-mode '(php-mode html-mode web-mode nxml-mode))
        (setq ad-return-value nil)
      ad-do-it)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Tested on Emacs24, 25, 26.
&lt;/p&gt;

&lt;p&gt;
Screenshot:
&lt;/p&gt;

&lt;div id="org72292d9" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/company-etags-code-completion-nq8.png" alt="company-etags-code-completion-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;</description><category>css</category><category>emacs</category><category>en</category><category>html</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/code-completion-for-htmljscss-in-emacs/</guid><pubDate>Fri, 27 Nov 2015 11:43:59 GMT</pubDate></item><item><title>Use js2-mode to print json path</title><link>http://redguardtoo.github.io/posts/use-js2-mode-to-print-json-path/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-10-29 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-11-22 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
These days most web applications are based on RESTful.
&lt;/p&gt;

&lt;p&gt;
So javascript developers have to deal with JSON frequently.
&lt;/p&gt;

&lt;p&gt;
When working on JSON, the most boring and error prone task is to get the full path of specific field.
&lt;/p&gt;

&lt;p&gt;
For example, given the JSON response like:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;{
  key1: {
    subkey1: {
      arr1: [{ key3: 'hello'}]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The developer need figure out the full path of "key3" which is "&lt;code&gt;key1.subkey1.arr1[0].key3&lt;/code&gt;".
&lt;/p&gt;

&lt;p&gt;
My solution is to take advantage of AST created by &lt;a href="https://github.com/mooz/js2-mode"&gt;js2-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Step 1&lt;/b&gt;, insert below code into ~/.emacs,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; {{ print json path, will be removed when latest STABLE js2-mode released
(defun js2-get-element-index-from-array-node (elem array-node &amp;amp;optional hardcoded-array-index)
  "Get index of ELEM from ARRAY-NODE or 0 and return it as string."
  (let ((idx 0) elems (rlt hardcoded-array-index))
    (setq elems (js2-array-node-elems array-node))
    (if (and elem (not hardcoded-array-index))
        (setq rlt (catch 'nth-elt
                    (dolist (x elems)
                      ;; We know the ELEM does belong to ARRAY-NODE,
                      (if (eq elem x) (throw 'nth-elt idx))
                      (setq idx (1+ idx)))
                    0)))
    (format "[%s]" rlt)))

(defun js2-print-json-path (&amp;amp;optional hardcoded-array-index)
  "Print the path to the JSON value under point, and save it in the kill ring.
If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
  (interactive "P")
  (let (previous-node current-node
        key-name
        rlt)

    ;; The `js2-node-at-point' starts scanning from AST root node.
    ;; So there is no way to optimize it.
    (setq current-node (js2-node-at-point))

    (while (not (js2-ast-root-p current-node))
      (cond
       ;; JSON property node
       ((js2-object-prop-node-p current-node)
        (setq key-name (js2-prop-node-name (js2-object-prop-node-left current-node)))
        (if rlt (setq rlt (concat "." key-name rlt))
          (setq rlt (concat "." key-name))))

       ;; Array node
       ((or (js2-array-node-p current-node))
        (setq rlt (concat (js2-get-element-index-from-array-node previous-node
                                                                 current-node
                                                                 hardcoded-array-index)
                          rlt)))

       ;; Other nodes are ignored
       (t))

      ;; current node is archived
      (setq previous-node current-node)
      ;; Get parent node and continue the loop
      (setq current-node (js2-node-parent current-node)))

    (cond
     (rlt
      ;; Clean the final result
      (setq rlt (replace-regexp-in-string "^\\." "" rlt))
      (kill-new rlt)
      (message "%s =&amp;gt; kill-ring" rlt))
     (t
      (message "No JSON path found!")))

    rlt))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Step 2&lt;/b&gt;, move the cursor over the key/value of the field and `M-x js2-print-json-path`.
&lt;/p&gt;

&lt;p&gt;
My code is &lt;a href="https://github.com/mooz/js2-mode/commit/49555849abf9e5f03766056f10e6ac89ddc487b4"&gt;merged into js2-mode&lt;/a&gt;. You need only install latest js2-mode.
&lt;/p&gt;

&lt;p&gt;
(apply #'derived-mode-p '(org-mode web-mode))
&lt;/p&gt;</description><category>emacs</category><category>en</category><category>javascript</category><category>js2</category><guid>http://redguardtoo.github.io/posts/use-js2-mode-to-print-json-path/</guid><pubDate>Thu, 29 Oct 2015 14:18:10 GMT</pubDate></item><item><title>Effective code navigation for web development</title><link>http://redguardtoo.github.io/posts/effective-code-navigation-for-web-development/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2020-03-27 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I use &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; as an example. The technique is actually generic and not limited to Angular Only.
&lt;/p&gt;

&lt;div id="outline-container-org28f2195" class="outline-2"&gt;
&lt;h3 id="org28f2195"&gt;Problem&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org28f2195"&gt;
&lt;p&gt;
In Angular application, a function is defined in a javascript file and called in a html file.
&lt;/p&gt;

&lt;p&gt;
Javascript file:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;&amp;lt;div ng-controller="MyController" ng-init="init()"&amp;gt;
  &amp;lt;button ng-click="onClick()"&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
html file:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;angular.module['myapp'].controller('MyController', function ($scope, $http) {

  $scope.init = function () {
  };

  $scope.onClick= function() {
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, the keyword we are interested is just a string, like "MyController". The only way to extract it is &lt;b&gt;regular expression&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
In this article, I focus on how I combine Emacs and Ctags. If you use other text edit like Visual Studio Code, you &lt;a href="https://marketplace.visualstudio.com/search?term=ctags&amp;amp;target=VSCode&amp;amp;category=All%20categories&amp;amp;sortBy=Relevance"&gt;still can use Ctags&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga72ca76" class="outline-2"&gt;
&lt;h3 id="orga72ca76"&gt;Solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga72ca76"&gt;
&lt;p&gt;
Ctags is good at parsing files with &lt;b&gt;regular expression&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
I use Ctags because:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;New web frameworks keep popping up. I don't want to waste time&amp;amp;money on upgrading IDE from time to time&lt;/li&gt;
&lt;li&gt;As a freelancer, I have to deal with in-house frameworks which IDE developers NEVER heard of&lt;/li&gt;
&lt;li&gt;Setup of ctags and text editors is easy. Once the first project is set up, others are just five minutes of copy&amp;amp;paste jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6444bb4" class="outline-3"&gt;
&lt;h4 id="org6444bb4"&gt;Old solution&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org6444bb4"&gt;
&lt;p&gt;
Here is my &lt;a href="https://gist.github.com/redguardtoo/b12ddae3b8010a276e9b#file-ctags"&gt;~/.ctags&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Please note on Windows, you can place ".ctags" anywhere. Then &lt;a href="http://support.microsoft.com/en-us/kb/310519"&gt;create an environment variable&lt;/a&gt; named "HOME" whose value is the parent directory of ".ctags".
&lt;/p&gt;

&lt;p&gt;
Run &lt;code&gt;ctags -e -R -f /app/path/TAGS&lt;/code&gt; at least once to generate tags file named "TAGS".
&lt;/p&gt;

&lt;p&gt;
You can use builtin Emacs command &lt;code&gt;find-tag&lt;/code&gt; to find tag.
&lt;/p&gt;

&lt;p&gt;
If you prefer &lt;a href="https://github.com/emacs-helm/helm"&gt;Helm&lt;/a&gt; UI, install it and &lt;code&gt;M-x helm-etags-select&lt;/code&gt; instead.
&lt;/p&gt;

&lt;p&gt;
Please install the latest helm because I &lt;a href="https://github.com/emacs-helm/helm/pull/965"&gt;enhanced helm-etags-select&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org540c1c5" class="outline-3"&gt;
&lt;h4 id="org540c1c5"&gt;Latest solution (recommended)&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org540c1c5"&gt;
&lt;p&gt;
I have developed some ctags packages on code completion and code navigation. No manual setup is needed. Everything just works out of box. My packages are very popular in the Emacs community right now,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/dan-t/rusty-tags#emacs-configuration"&gt;rust programming language&lt;/a&gt; or any other programming language could be easily supported&lt;/li&gt;
&lt;li&gt;Difference between &lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant Ctags&lt;/a&gt; and &lt;a href="https://github.com/universal-ctags/ctags"&gt;Universal Ctags&lt;/a&gt; are handled automatically&lt;/li&gt;
&lt;li&gt;Extremely fast in big projects (Linux kernel code, for example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here are my packages,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;counsel-etags&lt;/a&gt; for code navigation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/redguardtoo/company-ctags"&gt;company-ctags&lt;/a&gt; for code completion&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/redguardtoo/b12ddae3b8010a276e9b#file-ctags"&gt;~/.ctags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Usage is simple, 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Install Ctags and configure it with &lt;code&gt;~/.ctags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;company-ctags&lt;/code&gt; which dependent on &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;counsel-etags&lt;/code&gt; and start use it immediately like &lt;code&gt;M-x counsel-etags-find-tag-at-point&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Done. The tags file is automatically created and updated from time time&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ctags</category><category>emacs</category><category>en</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/effective-code-navigation-for-web-development/</guid><pubDate>Thu, 02 Apr 2015 12:51:21 GMT</pubDate></item><item><title>Tips on using Ctags with Emacs</title><link>http://redguardtoo.github.io/posts/tips-on-using-ctags-with-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
&lt;a href="http://ctags.sourceforge.net/"&gt;Ctags&lt;/a&gt; is critical to my web projects. I use it for code navigation by &lt;code&gt;M-x find-tag&lt;/code&gt; and code auto-completion by using &lt;a href="https://github.com/redguardtoo/company-ctags"&gt;company-ctags&lt;/a&gt; plus &lt;a href="http://company-mode.github.io/"&gt;company-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The first tip is to use global variable &lt;code&gt;tags-table-list&lt;/code&gt; instead of &lt;code&gt;tags-file-name&lt;/code&gt;.  The Emacs documentation says you should NOT set both. &lt;code&gt;tags-table-list&lt;/code&gt; is better because it's a list, where you can store multiple tag files.
&lt;/p&gt;

&lt;p&gt;
Here is the value of &lt;code&gt;tags-table-list&lt;/code&gt; for one project:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;("/Users/cb/projs/their-project/test/cdn/test/assets/test/js/TAGS" "/Users/cb/projs/their-project/test/app/TAGS")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The purpose to use multiple tag files in sub-folders instead of one tag file in root folder is to scan &lt;b&gt;less&lt;/b&gt; code files.
&lt;/p&gt;

&lt;p&gt;
The second tip is we can avoid feeding big js files to ctags. Currently one of my client's project is not managed well. They place the concatenated js files, third party js libraries, and normal code file into one folder. The naming of files is a mess. So I can not tell which is which from file name or file path. The tag file created from those big concatenated js files will &lt;a href="https://github.com/company-mode/company-mode/issues/243"&gt;crash my Emacs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Changing the ctags command line  will solve the problem. Here is the actual liner to create a tag file:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;find proj-dir -type f -not -iwholename '*TAGS' -not -size +16k | ctags -f ~/proj/output/TAGS -e -L -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The point is the option &lt;code&gt;-not -size +16k&lt;/code&gt;. It means only handle files less thank 16k.
&lt;/p&gt;

&lt;p&gt;
Here is the Emacs lisp function to wrap above shell command:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-create-tags-if-needed (SRC-DIR CTAGS-OPTS &amp;amp;optional FORCE)
  "return the full path of tags file"
  ;; TODO save the CTAGS-OPTS into hash
  (let ((dir (file-name-as-directory (file-truename SRC-DIR)) )
       file
       cmd)
    (setq file (concat dir "TAGS"))
    (when (or FORCE (not (file-exists-p file)))
      (setq cmd (format "find %s -type f -not -iwholename '*TAGS' -not -size +24k | ctags -f %s -e  %s -L -" dir file CTAGS-OPTS))
      (shell-command cmd))
    file))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
BTW, here is my &lt;a href="https://gist.github.com/redguardtoo/b12ddae3b8010a276e9b#file-ctags"&gt;~/.ctags&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
UPDATE:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;My tags file management strategy is described at &lt;a href="http://blog.binchen.org/posts/how-to-use-ctags-in-emacs-effectively-3.html"&gt;How to use ctags in Emacs effectively&lt;/a&gt;. It's effective to me. But it may be not generic enough to apply to others' use cases.&lt;/li&gt;

&lt;li&gt;I do use &lt;a href="http://www.gnu.org/software/global/"&gt;Gnu Global&lt;/a&gt; for &lt;b&gt;C/C++/Java&lt;/b&gt; code. I use it exactly in the &lt;b&gt;same way&lt;/b&gt; as ctags. Please &lt;code&gt;man global&lt;/code&gt; for the details. Hint, all you need care is the environment variable &lt;b&gt;GTAGSLIBPATH&lt;/b&gt;.&lt;/li&gt;
&lt;/ol&gt;</description><category>ctags</category><category>emacs</category><category>en</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/tips-on-using-ctags-with-emacs/</guid><pubDate>Fri, 28 Nov 2014 05:13:11 GMT</pubDate></item><item><title>Debug efficiently in Emacs</title><link>http://redguardtoo.github.io/posts/debug-efficiently-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Please note:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I use javascript as a use case. The solution is &lt;b&gt;generic&lt;/b&gt; enough to be applied to &lt;b&gt;any language&lt;/b&gt;. At the end of the article, Emacs Lisp is used as another example.&lt;/li&gt;
&lt;li&gt;I'm good at most debuggers. The point of this article is to deal with &lt;b&gt;more difficult issues&lt;/b&gt; the debugger can not handle.&lt;/li&gt;
&lt;li&gt;My code quality is fine. It handles all the corner cases I've met. For example, single quote and double quotes will be escaped properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="outline-container-org435df61" class="outline-2"&gt;
&lt;h3 id="org435df61"&gt;Problem&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org435df61"&gt;
&lt;p&gt;
As a freelancer I am often required to debug legacy javascript code from some huge "enterprise"" applications.
&lt;/p&gt;

&lt;p&gt;
The only way to debug such application is to insert as many as possible logging code, watch the output, and think.
&lt;/p&gt;

&lt;p&gt;
So my problem is how to insert logging code as quickly as possible.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org952d4a3" class="outline-2"&gt;
&lt;h3 id="org952d4a3"&gt;Solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org952d4a3"&gt;
&lt;p&gt;
My solution is &lt;a href="https://github.com/capitaomorte/yasnippet"&gt;Yasnippet&lt;/a&gt;. Yasnippet allow me to insert executable Emacs Lisp code in its snippet. I will Sotake full advantage of that feature. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72c3f18" class="outline-2"&gt;
&lt;h3 id="org72c3f18"&gt;Logging simple JS variable&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org72c3f18"&gt;
&lt;p&gt;
Given a variable name like "var1", I need insert javascript code as below:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;console.log("var1=", var1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Snippet:
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/logobject.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/logobject.yasnippet&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This snippet need you input variable name once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfb52407" class="outline-2"&gt;
&lt;h3 id="orgfb52407"&gt;Logging complex JS variable&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgfb52407"&gt;
&lt;p&gt;
In real world, the JS variable is often a string like "MyController.servicea.find('.class').attr1" which I hate to type.
&lt;/p&gt;

&lt;p&gt;
So the solution is that I copy the JS variable into kill ring where my snippet will read the variable name.
&lt;/p&gt;

&lt;p&gt;
Snippet:
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-recent-kill-ring.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-recent-kill-ring.yasnippet&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72e5354" class="outline-2"&gt;
&lt;h3 id="org72e5354"&gt;Logging JS function name when it's called&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org72e5354"&gt;
&lt;p&gt;
In below example, I need insert  "console.log('hello is called');" in function "hello":
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;function hello() {
  console.log('hello is called');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Snippet:
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-which-function.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-which-function.yasnippet&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This snippet use the Emacs command `which-function`. If you read the code of `which-function`, you will find that it's &lt;a href="http://www.emacswiki.org/emacs/ImenuMode"&gt;Imenu-mode&lt;/a&gt;
who actually extracts the function name. But Imenu-mode requires you pre-define &lt;b&gt;enough regular expressions&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
Please check &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-javascript.el"&gt;https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-javascript.el&lt;/a&gt;. I have defined many regular expressions for &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; and JQuery.
&lt;/p&gt;

&lt;p&gt;
The regular expressions could be used in &lt;b&gt;both&lt;/b&gt; js-mode and js2-mode.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga0a8f5a" class="outline-2"&gt;
&lt;h3 id="orga0a8f5a"&gt;Logging JS function name with its parameters&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga0a8f5a"&gt;
&lt;p&gt;
JS example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;function hello(v1, v2,
               v3, v4) {
  console.log("v1=", v1, "v2=", v2, "v3=", v3, "v4=", v4);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I copy the parameter of JS function named "hello". It's just the content between "hello(" and ")", then Emacs Lisp code embedded in the snippet will parse and output the right content from kill ring.
&lt;/p&gt;

&lt;p&gt;
Snippet:
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-which-function-with-para.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/log-which-function-with-para.yasnippet&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
BTW, since I use &lt;a href="http://www.emacswiki.org/Evil"&gt;Evil&lt;/a&gt;, copy the parameter into kill-ring is as simple as pressing "yi(".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb7bd3b5" class="outline-2"&gt;
&lt;h3 id="orgb7bd3b5"&gt;Insert JS debugger statement&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgb7bd3b5"&gt;
&lt;p&gt;
@cjk provided this tip. The debugger like Firebug will pause at the debugger statement. It saves me the time to locate JS file, to go to the specific line and set breakpoint after re-deploying the application.
&lt;/p&gt;

&lt;p&gt;
Snippets:
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/debugger.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/debugger.yasnippet&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/debugger-cond-breakpoint-from-kill-ring.yasnippet"&gt;https://github.com/redguardtoo/emacs.d/blob/master/snippets/js-mode/debugger-cond-breakpoint-from-kill-ring.yasnippet&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7ed47eb" class="outline-2"&gt;
&lt;h3 id="org7ed47eb"&gt;Bonus&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org7ed47eb"&gt;
&lt;p&gt;
Similar snippets for Emacs Lisp are defined &lt;a href="https://github.com/redguardtoo/emacs.d/tree/master/snippets/emacs-lisp-mode"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/debug-efficiently-in-emacs/</guid><pubDate>Sun, 23 Nov 2014 12:45:18 GMT</pubDate></item><item><title>Use bootstrap+font-awesome+jquery for IE7 web application</title><link>http://redguardtoo.github.io/posts/use-bootstrapfont-awesomejquery-for-ie7-web-application/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
Live demo:
&lt;a href="http://binchen.org/schools/"&gt;http://binchen.org/schools/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Screenshot:
&lt;img src="https://cloud.githubusercontent.com/assets/184553/5156904/e86f11a6-733c-11e4-8312-a6c8ad2b17be.png" alt="e86f11a6-733c-11e4-8312-a6c8ad2b17be.png"&gt;
&lt;/p&gt;

&lt;div id="outline-container-org8d6db6a" class="outline-2"&gt;
&lt;h3 id="org8d6db6a"&gt;Environment&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8d6db6a"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Bootstrap 2.3.2&lt;/li&gt;
&lt;li&gt;font-awesome 3.2.1&lt;/li&gt;
&lt;li&gt;JQuery 1.8.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I only use the grid layout from bootstrap and minimum API from jQuery.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgec1a62b" class="outline-2"&gt;
&lt;h3 id="orgec1a62b"&gt;Notes&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgec1a62b"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;IE7 does not support media query. So I abandon "mobile first" strategy, new strategy is "IE7 first".&lt;/li&gt;
&lt;li&gt;IE7 does not support inline-block properly, I need below css code hack:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-css"&gt;.myclass {
  display: inline-block;
  /* ie7*/
  *display: inline;
  zoom: 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;bootstrap's row-fluid has issues in IE7. I use row-fluid in this case, but have to hard code the row width sometimes.&lt;/li&gt;
&lt;li&gt;add below code into javascript so that I can hack IE7-only css code:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;if($.browser.msie &amp;amp;&amp;amp; parseFloat($.browser.version) &amp;lt; 8){
  that.ie7 = true;
  $('body').addClass('ie7');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>css</category><category>en</category><category>ie</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/use-bootstrapfont-awesomejquery-for-ie7-web-application/</guid><pubDate>Sun, 23 Nov 2014 07:37:10 GMT</pubDate></item><item><title>Why Emacs is a better editor, part two</title><link>http://redguardtoo.github.io/posts/why-emacs-is-better-editor-part-two/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
If you are impatient, jump to the "Quick Start" and paste my setup into your ~/.emacs. That's all you need to do!
&lt;/p&gt;

&lt;p&gt;
No extra setup needed! Then keep using your js2-mode happily, as if nothing happened. ;) 
&lt;/p&gt;

&lt;div id="outline-container-orgc8d6ee1" class="outline-2"&gt;
&lt;h3 id="orgc8d6ee1"&gt;Problem&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgc8d6ee1"&gt;
&lt;p&gt;
In my previous article &lt;a href="http://blog.binchen.org/posts/why-emacs-is-better-editor.html"&gt;Why Emacs is better editor - a case study for javascript developer&lt;/a&gt;, I proved that Emacs is better than &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
So for this so-called "Goto Symbol" feature, Emacs wins.
&lt;/p&gt;

&lt;p&gt;
It's because we use a plugin &lt;a href="https://github.com/mooz/js2-mode"&gt;js2-mode&lt;/a&gt;. It's actually a javascript parser which creates the symbols from AST.
&lt;/p&gt;

&lt;p&gt;
But in real world, regular expression is better, sometimes.
&lt;/p&gt;

&lt;p&gt;
In modern MVC javascript frameworks (&lt;a href="https://angularjs.org/"&gt;Angular&lt;/a&gt;, for example), you will meet below code,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;app.controller('MyController', function ($scope, $http) {
  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, using regular expression to extract the string "MyController" is more versatile and simpler.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcc92deb" class="outline-2"&gt;
&lt;h3 id="orgcc92deb"&gt;Solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgcc92deb"&gt;
&lt;p&gt;
My latest &lt;a href="https://github.com/mooz/js2-mode/pull/169"&gt;contribution to js2-mode&lt;/a&gt; solves this problem perfectly. It &lt;b&gt;combines the powers of AST and regular expression&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The js2-mode will integrate this feature soon. I will notify you when next version is ready.
&lt;/p&gt;

&lt;p&gt;
Let's cut off the boring technical details and see the demo,
&lt;/p&gt;

&lt;p&gt;
For a simple &lt;a href="https://gist.github.com/redguardtoo/558ea0133daa72010b73#file-hello-js"&gt;hello.js&lt;/a&gt; with below content,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;function helloworld() {
  console.log('hello called');
}

function test() {
  console.log('test called');
}

app.controller('MyController', function ($scope, $http) {
  console.log('MyController registered');

  var that = this;

  $scope.test1 = function() {
    console.log('$scope.test called');
  };

  $scope.hello = function() {
    console.log('$scope.hello called');
  };

  $scope.fn1 = function () {

    function test() {
      console.log('hello world');
    };
    console.log('hello');
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Emacs:&lt;/b&gt;
&lt;img src="https://cloud.githubusercontent.com/assets/184553/4871228/3ebe6588-61a5-11e4-9e9f-e6eb8218e2ee.png" alt="3ebe6588-61a5-11e4-9e9f-e6eb8218e2ee.png"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Sublime3 (build 3047):&lt;/b&gt; 
&lt;img src="https://cloud.githubusercontent.com/assets/184553/4871347/c33b8fee-61ae-11e4-8072-671935b68d6b.png" alt="c33b8fee-61ae-11e4-8072-671935b68d6b.png"&gt;
&lt;/p&gt;

&lt;p&gt;
Please note Emacs displays &lt;b&gt;two functions with the same name "test" correctly&lt;/b&gt;!
&lt;/p&gt;

&lt;p&gt;
BTW, my previous "Why Emacs is better" article got many feedbacks from Sublime users.
&lt;/p&gt;

&lt;p&gt;
One feedback is that my comparison is not fair because I'm &lt;b&gt;comparing Emacs plugin with naked Sublime&lt;/b&gt;. Though I did some research before writing the article,
I could be wrong. Please enlighten me if you know such Sublime plugins.
&lt;/p&gt;

&lt;p&gt;
Another valuable feedback is that native Sublime provides better experience &lt;b&gt;out of the box&lt;/b&gt; for junior developers. I admit that's a good point. But Emacs provides many awesome choices &lt;b&gt;out of the box&lt;/b&gt; if junior guys start from &lt;a href="https://github.com/purcell"&gt;setups of the masters (like Steven Purcell)&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Sublime users also argue that Sublime3 uses &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;. Python is a &lt;b&gt;better programming language&lt;/b&gt;. I'm qualified to answer this question because I wrote some large commercial Python application when I worked in Kodak R&amp;amp;D. First version I used was v2.2. So I've got about &lt;b&gt;10 years experience&lt;/b&gt; in Python. And I write lots of &lt;a href="https://github.com/redguardtoo/"&gt;Emacs Lisp code&lt;/a&gt; these days. My opinion is that both languages are good enough as DSL for text editors. In Python, you can use OO. In Emacs Lisp, you can treat function as object and there are &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Macros.html"&gt;Macros&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html"&gt;Advising&lt;/a&gt;. Both languages have enough widgets to shoot yourself in the foot. Python is surely newbie-friendly. But &lt;b&gt;number of newbies&lt;/b&gt; doesn't matter in high-end rival.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdf206f4" class="outline-2"&gt;
&lt;h3 id="orgdf206f4"&gt;Quick Start&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgdf206f4"&gt;
&lt;p&gt;
I'm still discussing with the js2-mode maintainer Dmitry Gutov about the best way to merge my patch.
&lt;/p&gt;

&lt;p&gt;
Dmitry Gutov updated the algorithm to parse the imenu items by walking the AST instead. It's better than my REGEX hacking because AST could show the context of the function.
&lt;/p&gt;

&lt;p&gt;
But my patch is still useful for extract strings from modern JS framework, as I've shown you in Angular example. I'm just updating my pull request to be compatible with the new AST walk algorithm.
&lt;/p&gt;

&lt;p&gt;
In the meantime, you can paste below code into your ~/.emacs before the patch is officially merged.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; below regex list could be used in both js-mode and js2-mode
(setq javascript-common-imenu-regex-list
      '(("Controller" "\.controller( *'\\([^']+\\)" 1)
        ("Filter" "\.filter( *'\\([^']+\\)" 1)
        ("Factory" "\.factory( *'\\([^']+\\)" 1)
        ("Service" "\.service( *'\\([^']+\\)" 1)
        ("Directive" "\.directive( *'\\([^']+\\)" 1)
        ("Event" "\.\$on( *'\\([^']+\\)" 1)
        ("Config" "\.config( *function *( *\\([^\)]+\\)" 1)
        ("Config" "\.config( *\\[ *'\\([^']+\\)" 1)
        ("OnChange" " *\$('\\([^']*\\)').*\.change *( *function" 1)
        ("OnClick" " *\$('\\([^']*\\)').*\.click *( *function" 1)
        ("Watch" "\.\$watch( *'\\([^']+\\)" 1)
        ("Function" "function\\s-+\\([^ ]+\\)(" 1)
        ("Function" " \\([^ ]+\\)\\s-*=\\s-*function\\s-*(" 1)))

;; {{ patching imenu in js2-mode
(setq js2-imenu-extra-generic-expression javascript-common-imenu-regex-list)

(defvar js2-imenu-original-item-lines nil
  "List of line infomration of original imenu items.")

(defun js2-imenu--get-line-start-end (pos)
  (let (b e)
    (save-excursion
      (goto-char pos)
      (setq b (line-beginning-position))
      (setq e (line-end-position)))
    (list b e)))

(defun js2-imenu--get-pos (item)
  (let (val)
    (cond
     ((integerp item)
      (setq val item))

     ((markerp item)
      (setq val (marker-position item))))

    val))

(defun js2-imenu--get-extra-item-pos (item)
  (let (val)
    (cond
     ((integerp item)
      (setq val item))

     ((markerp item)
      (setq val (marker-position item)))

     ;; plist
     ((and (listp item) (listp (cdr item)))
      (setq val (js2-imenu--get-extra-item-pos (cadr item))))

     ;; alist
     ((and (listp item) (not (listp (cdr item))))
      (setq val (js2-imenu--get-extra-item-pos (cdr item)))))

    val))

(defun js2-imenu--extract-line-info (item)
  "Recursively parse the original imenu items created by js2-mode.
The line numbers of items will be extracted."
  (let (val)
    (if item
      (cond
       ;; Marker or line number
       ((setq val (js2-imenu--get-pos item))
        (push (js2-imenu--get-line-start-end val)
              js2-imenu-original-item-lines))

       ;; The item is Alist, example: (hello . 163)
       ((and (listp item) (not (listp (cdr item))))
        (setq val (js2-imenu--get-pos (cdr item)))
        (if val (push (js2-imenu--get-line-start-end val)
                      js2-imenu-original-item-lines)))

       ;; The item is a Plist
       ((and (listp item) (listp (cdr item)))
        (js2-imenu--extract-line-info (cadr item))
        (js2-imenu--extract-line-info (cdr item)))

       ;;Error handling
       (t (message "Impossible to here! item=%s" item)
          )))
    ))

(defun js2-imenu--item-exist (pos lines)
  "Try to detect does POS belong to some LINE"
  (let (rlt)
    (dolist (line lines)
      (if (and (&amp;lt; pos (cadr line)) (&amp;gt;= pos (car line)))
          (setq rlt t)))
    rlt))

(defun js2-imenu--is-item-already-created (item)
  (unless (js2-imenu--item-exist
           (js2-imenu--get-extra-item-pos item)
           js2-imenu-original-item-lines)
    item))

(defun js2-imenu--check-single-item (r)
  (cond
   ((and (listp (cdr r)))
    (let (new-types)
      (setq new-types
            (delq nil (mapcar 'js2-imenu--is-item-already-created (cdr r))))
      (if new-types (setcdr r (delq nil new-types))
        (setq r nil))))
   (t (if (js2-imenu--item-exist (js2-imenu--get-extra-item-pos r)
                                 js2-imenu-original-item-lines)
          (setq r nil))))
  r)

(defun js2-imenu--remove-duplicate-items (extra-rlt)
  (delq nil (mapcar 'js2-imenu--check-single-item extra-rlt)))

(defun js2-imenu--merge-imenu-items (rlt extra-rlt)
  "RLT contains imenu items created from AST.
EXTRA-RLT contains items parsed with simple regex.
Merge RLT and EXTRA-RLT, items in RLT has *higher* priority."
  ;; Clear the lines.
  (set (make-variable-buffer-local 'js2-imenu-original-item-lines) nil)
  ;; Analyze the original imenu items created from AST,
  ;; I only care about line number.
  (dolist (item rlt)
    (js2-imenu--extract-line-info item))

  ;; @see https://gist.github.com/redguardtoo/558ea0133daa72010b73#file-hello-js
  ;; EXTRA-RLT sample:
  ;; ((function ("hello" . #&amp;lt;marker 63&amp;gt;) ("bye" . #&amp;lt;marker 128&amp;gt;))
  ;;  (controller ("MyController" . #&amp;lt;marker 128))
  ;;  (hellworld . #&amp;lt;marker 161&amp;gt;))
  (setq extra-rlt (js2-imenu--remove-duplicate-items extra-rlt))
  (append rlt extra-rlt))

(with-eval-after-load 'js2-mode
  (defadvice js2-mode-create-imenu-index (around my-js2-mode-create-imenu-index activate)
    (let (extra-rlt)
      ad-do-it
      (setq extra-rlt
            (save-excursion
              (imenu--generic-function js2-imenu-extra-generic-expression)))
      (setq ad-return-value (js2-imenu--merge-imenu-items ad-return-value extra-rlt))
      ad-return-value)))
;; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>javascript</category><guid>http://redguardtoo.github.io/posts/why-emacs-is-better-editor-part-two/</guid><pubDate>Sat, 01 Nov 2014 11:06:17 GMT</pubDate></item><item><title>Hack wordpress php and make cdnjs.com host js</title><link>http://redguardtoo.github.io/posts/hack-wordpress-php-and-make-cdnjs-com-host-js/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
For jquery.js, see &lt;a href="http://rk.md/2012/cdnjs-scripts-without-plugin-wordpress/"&gt;http://rk.md/2012/cdnjs-scripts-without-plugin-wordpress/&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I added below code into bottom of functions.php (Appearance =&amp;gt; Editor):
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-php"&gt;add_action('wp_enqueue_scripts', 'CDNJS_scripts');
function CDNJS_scripts() 
{
    wp_deregister_script('jquery');
    wp_register_script('jquery','http://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js');
    wp_enqueue_script('jquery');
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
For js from SyntaxHighlighter Evolved (Plugins =&amp;gt; Installed Plugins =&amp;gt; Edit):
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-diff"&gt;diff --git a/syntaxhighlighter.php b/syntaxhighlighter.php
index db8c668..e41ec12 100644
--- a/syntaxhighlighter.php
+++ b/syntaxhighlighter.php
@@ -117,30 +117,30 @@ class SyntaxHighlighter {
        }

        // Register brush scripts
-       wp_register_script( 'syntaxhighlighter-core',             plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shCore.js'),            array(),                         $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-as3',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushAS3.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-bash',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushBash.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-coldfusion', plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushColdFusion.js'), array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-cpp',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCpp.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-csharp',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCSharp.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-css',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCss.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-delphi',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushDelphi.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-diff',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushDiff.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-erlang',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushErlang.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-groovy',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushGroovy.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-java',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJava.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-javafx',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJavaFX.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-jscript',    plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJScript.js'),    array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-perl',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPerl.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-php',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPhp.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-plain',      plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPlain.js'),      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-powershell', plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPowerShell.js'), array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-python',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPython.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-ruby',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushRuby.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-scala',      plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushScala.js'),      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-sql',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushSql.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-vb',         plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushVb.js'),         array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-xml',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushXml.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-core',             '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.js',            array(),                         $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-as3',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushAS3.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-bash',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushBash.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-coldfusion', '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushColdFusion.js', array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-cpp',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCpp.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-csharp',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCSharp.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-css',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCss.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-delphi',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushDelphi.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-diff',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushDiff.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-erlang',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushErlang.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-groovy',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushGroovy.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-java',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJava.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-javafx',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJavaFX.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-jscript',    '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.js',    array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-perl',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPerl.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-php',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPhp.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-plain',      '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPlain.js',      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-powershell', '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPowerShell.js', array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-python',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPython.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-ruby',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushRuby.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-scala',      '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushScala.js',      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-sql',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushSql.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-vb',         '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushVb.js',         array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-xml',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushXml.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );

        // Register some popular third-party brushes
        wp_register_script( 'syntaxhighlighter-brush-clojure',    plugins_url('syntaxhighlighter/third-party-brushes/shBrushClojure.js'),          array('syntaxhighlighter-core'), '20090602'     );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>blog</category><category>en</category><category>javascript</category><category>php</category><category>wordpress</category><guid>http://redguardtoo.github.io/posts/hack-wordpress-php-and-make-cdnjs-com-host-js/</guid><pubDate>Fri, 07 Mar 2014 00:58:00 GMT</pubDate></item></channel></rss>