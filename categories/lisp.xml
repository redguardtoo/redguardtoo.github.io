<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (Posts about lisp)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/lisp.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 12 Apr 2020 05:44:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What's AOP in Java</title><link>http://blog.binchen.org/posts/what-s-aop-in-java.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
Yesterday in a interview I was asked what's AOP and how to use it. The two interviewers
&lt;/p&gt;

&lt;p&gt;
I was wordless then so I came back to read the documentation.
&lt;/p&gt;

&lt;p&gt;
It turns out AOP is simple. It's like emacs lisp's defadvice but less powerful. I've been using this since day one on different languages.
&lt;/p&gt;

&lt;p&gt;
Please read &lt;a href="http://developers.slashdot.org/story/05/04/24/0343224/aspect-oriented-programming-considered-harmful"&gt;slashdot discussion&lt;/a&gt; about AOP.
&lt;/p&gt;

&lt;p&gt;
Here is the comment from MarkusQ,
&lt;/p&gt;

&lt;pre class="example"&gt;
 by MarkusQ (450076) on Sunday April 24, 2005 @11:01PM (#12333504) Journal

Exactly.

When I implemented this sort of thing for a project in Ruby a few years back, I just grabbed all the CLOS nomenclature because I was familiar with it. I didn't even realize I was using "AOP with funny names" until someone reading the code mentioned it. When he asked why I didn't use the "standard" terminology, I lent him a copy of "Object Oriented Programing in Common Lisp" (c) 1988, and asked why the AOP people had to invent new words for everything.

I have yet to get an answer.

--MarkusQ
&lt;/pre&gt;

&lt;p&gt;
So it's just some enterprise guy inventing new buzz words (&lt;a href="http://en.wikipedia.org/wiki/Cross-cutting_concern"&gt;cross-cutting concern&lt;/a&gt;, for example) on some old idea.
&lt;/p&gt;

&lt;p&gt;
Now as guy who got seven years academical training on system design (Bachelor and Master degree in system controlling major from &lt;a href="http://en.wikipedia.org/wiki/Shanghai_Jiao_Tong_University"&gt;best engineering school in China&lt;/a&gt;), I will give you some precious advice on how to use this thing (AOP in java, API hook in C, defadvice in Emacs lisp or whatever the buzz word is):
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;DO NOT USE IT IN ANY REAL SYSTEM OR APPLICATION!&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Here are the reasons:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The code change an external API's behavior&lt;/li&gt;
&lt;li&gt;The code's location is not close to the API's&lt;/li&gt;
&lt;li&gt;The system being corrupt quickly with those AOP things&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>java</category><category>lisp</category><guid>http://blog.binchen.org/posts/what-s-aop-in-java.html</guid><pubDate>Sat, 03 May 2014 06:21:31 GMT</pubDate></item><item><title>Emacs Lisp并不难学</title><link>http://blog.binchen.org/posts/emacs-lisp-bin-bu-nan-xue.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作者:陈斌 (redguardtoo) &lt;/p&gt; &lt;p&gt; 原创日期: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2012-11-30 五&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; 本文的目的是把Lisp去神秘化. &lt;/p&gt; &lt;p&gt; 我学的是Emacs Lisp(Emacs Lisp),开发环境也是Emacs.所以我举的例子都是只基于Elisp. &lt;/p&gt; &lt;p&gt; 本文针对的读者是有相当经验的开发者,目的是尽可能简明扼要地突出重点. &lt;/p&gt; &lt;p&gt; 我对于目前的主流开发语言都很熟悉,但是Lisp还只能算是入门水准,所以错过很多Lisp精彩之处是很可能的. &lt;/p&gt; &lt;p&gt; 我所谓的重点,主要是指Lisp对于开发一个现实世界的产品有什么优点. &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;所有的函数和数据可以在系统运行时改变&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;p&gt;其意义是,假设你一个系统上线了,你可以随时改变正在运行的代码,不需要重启系统. &lt;/p&gt; &lt;p&gt; 我的理解是,一个函数实际上就是带有字符串Key(该key就是函数名)的数据,运行某个函数就是在系统运行时根据Key找到对应的数据(或者代码,在Lips中是一回事)运行之. &lt;/p&gt; &lt;p&gt; 例如,我可以在hook中申明某个函数将被调用,而这个函数的定义可以还不存在.系统在&lt;em&gt;运行时&lt;/em&gt;才会去寻找这个函数.解释一下,hook可以认为是事件触发机制,就是在系统运行的某个时刻调用用户自定义的函数) &lt;/p&gt; &lt;p&gt; 优点是灵活性很高.缺点是Lisp写的东西快不了. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;没有namespace,所有的函数默认都是可以全局访问的&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;正因为这两条,所以要多打字(每个函数都要手动输入名字前缀). &lt;/p&gt; &lt;p&gt; 这点我完全可以接受,没有namespace就是多打点字而已.那些不了解历史或者没有用过C的初级程序员可能会大惊小怪.实际上没什么大不了的. &lt;/p&gt; &lt;p&gt; 所有函数都可以访问在Emacs场景下有个巨大的优点,见下一条. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;defadivce可以改变系统中任意函数的行为.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;defadvice可以重定义系统中的任意函数.原因如前文所说. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;循环语句和条件判断语句&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;p&gt;和其他语言没什么不同,foreach之类的语法糖也不少. &lt;/p&gt; &lt;p&gt; 我唯一不喜欢的是没有C中的return,break,和continue语句,这样的缺点是有可能让代码嵌套过深. &lt;/p&gt; &lt;p&gt; 不过不是什么大不了的问题,Lisp也提供了一些替代语法. &lt;/p&gt; &lt;p&gt; 另外其他所有语言提供了这些语法糖又怎么样呢,我遇到的超过50%的程序员还是一样瞎写. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;不同寻常的语法&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;p&gt;Lisp语法是操作符号在前,被操作对象在后. &lt;/p&gt; &lt;p&gt; 例如2+3+4,在Lisp的语法中是这样的: &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;(+ 2 3 4)
&lt;/pre&gt;   &lt;p&gt; 所有的语法都是这样的前缀表达式(&lt;a href="http://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95"&gt;Polish Notation&lt;/a&gt;),很多人不习惯这样的语法,但是它有一些突出优点: &lt;/p&gt; &lt;ol&gt; &lt;li&gt;这样的语法做语法解析特别容易,所以第三方支持工具很容易开发. 在大规模系统开发时,这点很有用.例如,分析大型项目的源代码时,你能唯一依靠的grep和正则表达式,ELisp简单严格的语法使得正则表达式很好写.  &lt;/li&gt; &lt;li&gt;实际编程时少打很多运算符号,这对于有实战经验的程序员是巨大的优点.如果你和我说什么重要的是思想和设计模式,打字速度不重要,那么菜鸟请走开.  &lt;/li&gt; &lt;li&gt;最重要的优点是,这种语法相当于一种过滤机制,能够接受这种语法的人通常都是头脑比较开放思维敏捷的人.说到底产品开发的决定性因素是人,所以这个能过滤人的优点是决定性的. &lt;/li&gt; &lt;/ol&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-6" class="outline-3"&gt; &lt;h4 id="sec-6"&gt;函数可内嵌文档,且该文档可被Emacs帮助系统调用&lt;/h4&gt; &lt;div class="outline-text-3" id="text-6"&gt;  &lt;p&gt;现在能做到这点的系统也没几家.从细节我们可以看出Emacs和Elisp的完美之处. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>essential</category><category>lisp</category><category>zh</category><guid>http://blog.binchen.org/posts/emacs-lisp-bin-bu-nan-xue.html</guid><pubDate>Thu, 29 Nov 2012 21:00:00 GMT</pubDate></item></channel></rss>