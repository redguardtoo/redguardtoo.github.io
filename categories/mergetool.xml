<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (Posts about mergetool)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/mergetool.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 17 Apr 2020 01:30:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Make Emacs faster than Vim in "git mergetool"</title><link>http://blog.binchen.org/posts/make-emacs-faster-than-vim-in-git-mergetool.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
My article &lt;a href="https://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html"&gt;Emacs is the best merge tool for Git&lt;/a&gt; explains how to combine &lt;a href="https://git-scm.com/docs/git-mergetool/2.20.0"&gt;git mergetool&lt;/a&gt; with &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/"&gt;ediff-mode&lt;/a&gt; in Emacs.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://disqus.com/by/harrisonmccullough/"&gt;Harrison McCullough&lt;/a&gt; suggested the work flow can be faster if emacs is replaced with emacsclient.
&lt;/p&gt;

&lt;p&gt;
I did some research and found a perfect solution. It's even faster than Vim.
&lt;/p&gt;

&lt;div id="outline-container-org3fc472f" class="outline-2"&gt;
&lt;h3 id="org3fc472f"&gt;Initial solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org3fc472f"&gt;
&lt;p&gt;
Please note emacsclient is only use for resolving conflicts.
&lt;/p&gt;

&lt;p&gt;
Step 1, start emacs server by running &lt;code&gt;emacs -Q --daemon --eval "(setq startup-now t)" -l "/home/my-username/.emacs.d/init.el" --eval "(progn (require 'server) (server-start))"&lt;/code&gt; in shell.
&lt;/p&gt;

&lt;p&gt;
Step 2, insert below code into &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; (see the comment why this advice is required):
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defadvice server-save-buffers-kill-terminal (after server-save-buffers-kill-terminal-after-hack activate)
  ;; kill all buffers, so new ediff panel is re-created and `ediff-startup-hook-setup' is called again
  ;; besides, remove the buffers whose binding files are alredy merged in `buffer-list'
  (mapc 'kill-buffer (buffer-list)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 3, insert below code into &lt;code&gt;~/.gitconfig&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.ediff]
cmd = emacsclient -nw --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga7b1c4d" class="outline-2"&gt;
&lt;h3 id="orga7b1c4d"&gt;My real world solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga7b1c4d"&gt;
&lt;p&gt;
It's similar to initial solution. But some scripts are created for automation.
&lt;/p&gt;

&lt;p&gt;
Step 1, read &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html"&gt;Using Emacs as a Server&lt;/a&gt; in the manual and create &lt;code&gt;~/.config/systemd/user/emacs.service&lt;/code&gt; for &lt;a href="https://en.wikipedia.org/wiki/Systemd"&gt;Systemd&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=emacs -Q --daemon --eval "(setq startup-now t)" -l "/home/my-username/.emacs.d/init.el" --eval "(progn (require 'server) (server-start))" 
ExecStop=emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 2, set up in &lt;code&gt;~/.gitconfig&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.emacs]
    cmd = ediff.sh "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
[mergetool.emacsclient]
    cmd = MYEMACSCLIENT=emacsclient ediff.sh "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 3, create &lt;code&gt;ediff.sh&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/sh
[ -z "$MYEMACSCLIENT" ] &amp;amp;&amp;amp; MYEMACSCLIENT="emacs"
# $1=$BASE, $2=$LOCAL, $3=$REMOTE, $4=$MERGED
if [ "$MYEMACSCLIENT" = "emacs" ]; then
    $MYEMACSCLIENT -nw -Q --eval "(setq startup-now t)" -l "$HOME/.emacs.d/init.el" --eval "(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \"$3\") (ediff-merge-files-with-ancestor \"$1\" \"$2\" \"$3\" nil \"$4\") (ediff-merge-files \"$2\" \"$3\" nil \"$4\")))"
else
    $MYEMACSCLIENT -nw --eval "(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \"$3\") (ediff-merge-files-with-ancestor \"$1\" \"$2\" \"$3\" nil \"$4\") (ediff-merge-files \"$2\" \"$3\" nil \"$4\")))"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 4, run &lt;code&gt;git mergetool -t emacsclient&lt;/code&gt; to resolve conflicts.
&lt;/p&gt;

&lt;p&gt;
My &lt;a href="https://github.com/redguardtoo/emacs.d/commit/f35e749d"&gt;init-ediff.el&lt;/a&gt; in &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;emacs.d&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>mergetool</category><guid>http://blog.binchen.org/posts/make-emacs-faster-than-vim-in-git-mergetool.html</guid><pubDate>Fri, 10 Apr 2020 09:33:40 GMT</pubDate></item><item><title>Emacs is the best merge tool for Git</title><link>http://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2019-11-13 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2020-04-10 Fri&amp;gt; &lt;/span&gt;&lt;/span&gt; if you use my solution, you can &lt;a href="http://blog.binchen.org/posts/make-emacs-faster-than-vim-in-git-mergetool.html"&gt;replace emacs with emacsclient&lt;/a&gt;. So it's even &lt;b&gt;faster than Vim&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
I used to regard vimdiff as the best merge tool for Git because it's simply fast.
&lt;/p&gt;

&lt;p&gt;
Here is the demo how I use vimdiff to resolve conflicts from &lt;a href="https://github.com/redguardtoo/test-git-mergetool"&gt;https://github.com/redguardtoo/test-git-mergetool&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/vimdiff-as-git-merge-tool.gif" alt="vimdiff-as-git-merge-tool.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Please note in the screencast I use Git built in command &lt;a href="https://git-scm.com/docs/git-mergetool"&gt;mergetool&lt;/a&gt;. It will &lt;b&gt;automatically&lt;/b&gt; open conflicted file one by one using vim. In other software, the developer need &lt;b&gt;manually&lt;/b&gt; select and open the conflicted file. 
&lt;/p&gt;

&lt;p&gt;
The only issue is Vim is not as powerful as Emacs.
&lt;/p&gt;

&lt;p&gt;
Resolving conflicts is NOT only picking up a diff hunk from remote/local buffer. I often need place my hunk into merged buffer first, then I go to remote buffer and copy some snippet into merged buffer. So there are lots of sub-window operations.
&lt;/p&gt;

&lt;p&gt;
In Emacs, I use &lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace-window&lt;/a&gt; and &lt;a href="https://github.com/deb0ch/emacs-winum"&gt;Winum&lt;/a&gt; to move focus between sub-windows.  I also use API &lt;code&gt;window-configuration-to-register&lt;/code&gt; and &lt;code&gt;jump-to-register&lt;/code&gt; to save/load windows layout. Besides, &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;Ediff&lt;/a&gt; is a beast to handle diff and patch.
&lt;/p&gt;

&lt;p&gt;
So I give one example to prove why Emacs should be a better merge tool &lt;b&gt;in theory&lt;/b&gt;. If you are good at both Vim and Emacs, you know it's the truth.
&lt;/p&gt;

&lt;p&gt;
Now let's talk the real world problem. And I will show you a perfect solution soon.
&lt;/p&gt;

&lt;p&gt;
The problem is, I never use Emacs to resolve merge conflicts for two reasons:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;First, &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;My Emacs configuration&lt;/a&gt; uses too many packages. It starts up slowly. As you can see from vimdiff demo, &lt;code&gt;git mergetool&lt;/code&gt; restarts the editor many times. So the editor should be lightweight.&lt;/li&gt;
&lt;li&gt;Second, the UI of &lt;code&gt;ediff&lt;/code&gt; is not right. UI of Vimdiff is much better. All operations should be completed freely in any sub-window instead of ediff control panel only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Luckily, Emacs gives me the full freedom to solve the problem. The final result is beyond my expectation.
&lt;/p&gt;

&lt;p&gt;
Here is the complete solution.
&lt;/p&gt;

&lt;div id="outline-container-orgc0eb2f1" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This technique is only useful for &lt;code&gt;git mergetool&lt;/code&gt; because git will open and close the text editor Emacs many times.
&lt;/p&gt;

&lt;p&gt;
Insert below code into &lt;code&gt;~/.gitconfig&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[mergetool.ediff]
# use git mergetool ediff to resolve conflicts
cmd = emacs -nw -Q --eval \"(setq startup-now t)\" -l \"~/.emacs.d/init.el\" --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
In above code, option &lt;code&gt;-Q&lt;/code&gt; equals &lt;code&gt;-q --no-site-file --no-splash&lt;/code&gt;. Actually, only &lt;code&gt;-q&lt;/code&gt; is critical. &lt;code&gt;-q&lt;/code&gt; means "Do not load an init file". A global emacs lisp flag &lt;code&gt;startup-now&lt;/code&gt; is defined before loading &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Then in &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, I need only add one line,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(when (not (boundp 'startup-now))
  ;; heavy weight configuration happens here
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
When &lt;code&gt;startup-now&lt;/code&gt; is defined, all the heavyweight configuration should be off. Considering in this scenario, we are using Emacs only as merge tool, 99% configuration could be turned off. For example, set up for any programming language is not required. Flyspell and flycheck should be off. Yasnippet is also useless. 
&lt;/p&gt;

&lt;p&gt;
I only need focus on essential operations related to text/file/window.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/emacs-evil/evil"&gt;Evil&lt;/a&gt; should be used. At the beginning of this article, I said "I love vimdiff because it's fast". It's impossible to be more efficient without Evil.
&lt;/p&gt;

&lt;p&gt;
Any patch/diff utilities should be included too. &lt;a href="https://github.com/abo-abo/swiper"&gt;counsel/swiper/ivy&lt;/a&gt; is also must have because I can use &lt;code&gt;counsel-git&lt;/code&gt; to find file and &lt;code&gt;counsel-git-grep&lt;/code&gt; to grep text.
&lt;/p&gt;

&lt;p&gt;
Native Emacs API is enough to save/load windows layout.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6072b85" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Packages dependent on ediff (&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;?) could also benefit from optimization of ediff.
&lt;/p&gt;

&lt;p&gt;
The optimization is simple. Do everything in merged buffer.
&lt;/p&gt;

&lt;p&gt;
First I move focus into merged buffer when Emacs starts up,
&lt;/p&gt;

&lt;p&gt;
This set up happens in &lt;code&gt;ediff-startup-hook&lt;/code&gt;, 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun ediff-startup-hook-setup ()
  ;; hide control panel if it's current buffer
  (when (string-match-p (setq my-ediff-panel-name (buffer-name))
                        "\*Ediff Control Panel.*\*")
    ;; move to the first difference
    (ediff-next-difference)
    ;; move to the merged buffer window
    (winum-select-window-by-number 3)
    ;; save the windows layout
    (window-configuration-to-register ?a)))

(add-hook 'ediff-startup-hook 'ediff-startup-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
Please note I use &lt;code&gt;winum-select-window-by-number&lt;/code&gt; from &lt;code&gt;winum&lt;/code&gt; move focus to merged buffer. You can use any other third party package or native API &lt;code&gt;select-window&lt;/code&gt; instead.
&lt;/p&gt;

&lt;p&gt;
Saving initial windows layout into register &lt;code&gt;a&lt;/code&gt; is achieved by &lt;code&gt;(window-configuration-to-register ?a)&lt;/code&gt; in &lt;code&gt;ediff-startup-hook&lt;/code&gt;. &lt;code&gt;(jump-to-register ?a)&lt;/code&gt; restores the saved layout.
&lt;/p&gt;

&lt;p&gt;
Then we need make sure ediff commands can be used out of ediff's panel. Currently ediff command can only be triggered inside of its panel.
&lt;/p&gt;

&lt;p&gt;
The trick is "move focus into ediff panel temporarily to execute its commands, then move focus back to original window".
&lt;/p&gt;

&lt;p&gt;
So I designed a macro &lt;code&gt;my-ediff-command&lt;/code&gt; to do this,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defmacro my-ediff-command (cmd &amp;amp;optional no-arg)
  `(lambda (&amp;amp;optional arg)
     (interactive "P")
     (let* ((w (get-buffer-window)))
       ;; go to panel window
       (select-window (get-buffer-window my-ediff-panel-name))
       ;; execute ediff command, ignore any error
       (condition-case e
           (if ,no-arg (funcall ,cmd) (funcall ,cmd arg))
         (error
          (message "%s" (error-message-string e))))
       ;; back to original window
       (select-window w))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Usage is simple,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(global-set-key (kbd "C-c C-y") (my-ediff-command 'ediff-next-difference))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is the list of essential ediff commands,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;ediff-next-difference&lt;/li&gt;
&lt;li&gt;ediff-previous-difference&lt;/li&gt;
&lt;li&gt;ediff-restore-diff-in-merge-buffer&lt;/li&gt;
&lt;li&gt;ediff-revert-buffers-then-recompute-diffs&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-both-to-C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can use &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyra&lt;/a&gt; or &lt;a href="https://github.com/noctuid/general.el"&gt;General.el&lt;/a&gt; to assign key bindings.
&lt;/p&gt;

&lt;p&gt;
The definition of &lt;code&gt;ediff-copy-both-to-C&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; @see https://stackoverflow.com/a/29757750/245363
(defun ediff-copy-both-to-C (&amp;amp;optional arg)
  "Copy code from both A and B to C."
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is &lt;a href="https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0"&gt;my ~/.gitconfig&lt;/a&gt; and &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ediff.el"&gt;my ediff set up&lt;/a&gt; in real world.
&lt;/p&gt;

&lt;p&gt;
Please note the techniques introduced here &lt;b&gt;can be used with other VCS (subversion, perforce …)&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Demo on using Emacs to resolve merge conflicts,
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/emacs-as-git-merge-tool.gif" alt="emacs-as-git-merge-tool.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>git</category><category>mergetool</category><guid>http://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html</guid><pubDate>Wed, 13 Nov 2019 13:29:46 GMT</pubDate></item><item><title>Use vimdiff to resolve git/subversion/mercurial merge conflicts effectively</title><link>http://blog.binchen.org/posts/use-vimdiff-to-resolve-git-merge-conflicts-effectively.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
You can jump to &lt;a href="http://blog.binchen.org/posts/use-vimdiff-to-resolve-git-merge-conflicts-effectively.html#org74c17b2"&gt;No description for this link&lt;/a&gt; section at the end of this article.
&lt;/p&gt;

&lt;p&gt;
I use git as an example of version control software. But you can use any other version control software instead.
&lt;/p&gt;

&lt;div id="outline-container-org5459377" class="outline-2"&gt;
&lt;h3 id="org5459377"&gt;The reasons to use vimdiff to do the merge?&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org5459377"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It's free (vim)&lt;/li&gt;
&lt;li&gt;It works on any OS&lt;/li&gt;
&lt;li&gt;It works in shell&lt;/li&gt;
&lt;li&gt;Keyboard only&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8af7d1e" class="outline-2"&gt;
&lt;h3 id="org8af7d1e"&gt;Setup&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8af7d1e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga2d6068" class="outline-3"&gt;
&lt;h4 id="orga2d6068"&gt;Setup vimdiff (OPTIONAL)&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orga2d6068"&gt;
&lt;p&gt;
The vimdiff as a merge tool will display several buffers to show YOURS/THEIRS/ORIGINAL code.
&lt;/p&gt;

&lt;p&gt;
First, add following code into your ~/.vimrc,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-vimrc"&gt;set laststatus=2 "show the status line
set statusline=%-10.3n  "buffer number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
The purpose of above two lines is to display buffer number at the status line of vim. It's OPTIONAL. You don't need see the buffer number if you are familiar with the all the buffer's position. The left top is buffer number 2. The middle top is buffer number 3. The right top is buffer number 4.
&lt;/p&gt;

&lt;p&gt;
Second, if you know the buffer number, you can use hot key like ",2" (press comma first, then press two key as quickly as possible) to pull change from buffer number 2.
Add below code into your ~/.vimrc to set up hot keys:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-vimrc"&gt;map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;2 :diffget 2&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;3 :diffget 3&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;4 :diffget 4&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd164ad4" class="outline-3"&gt;
&lt;h4 id="orgd164ad4"&gt;Setup git&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd164ad4"&gt;
&lt;p&gt;
Run below commands in shell,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;git config --global merge.tool vimdiff
git config --global mergetool.prompt false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd8ff6e8" class="outline-2"&gt;
&lt;h3 id="orgd8ff6e8"&gt;Usage&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgd8ff6e8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6523168" class="outline-3"&gt;
&lt;h4 id="org6523168"&gt;Create a "hello world" project&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org6523168"&gt;
&lt;p&gt;
I setup a "hello world" project at &lt;a href="https://github.com/redguardtoo/test-git-mergetool"&gt;https://github.com/redguardtoo/test-git-mergetool&lt;/a&gt; for your practice.
&lt;/p&gt;

&lt;p&gt;
It has three branches "master", "bob", and "chen",
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;git clone https://github.com/redguardtoo/test-git-mergetool.git
cd test-git-mergetool
git checkout -b bob origin/bob # create local mirror of bob branch
git checkout -b chen origin/chen # create local mirror of chen branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Bob and Chen has edited same files. So please merge branch "bob" into "master" at first. Then merge from "chen". The merge conflicts will be created.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;git branch # double check that we got three local branches: master, bob, chen
git checkout master # set master branch as main branch
git merge bob #this is ok, because bob is the first one to merge changes
git merge chen # now some conflicts created because Bob has already edited and merged same files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0fa4c08" class="outline-3"&gt;
&lt;h4 id="org0fa4c08"&gt;Resolve merge conflict&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org0fa4c08"&gt;
&lt;p&gt;
Now start merge tool,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;git mergetool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Git will invoke vimdiff with the following window layout. There are four buffers in this layout:
&lt;img src="http://blog.binchen.org/wp-content/git-merge-tool-nq8.png" alt="git-merge-tool-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
Here is the explanation of each buffer:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Buffer&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Explanation&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Buffer Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;THEIRS (LOCAL)&lt;/td&gt;
&lt;td class="org-left"&gt;contents of the file on the current branch&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;BASE&lt;/td&gt;
&lt;td class="org-left"&gt;common base for the merge&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;YOURS (REMOTE)&lt;/td&gt;
&lt;td class="org-left"&gt;contents of the file to be merged.&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;MERGED&lt;/td&gt;
&lt;td class="org-left"&gt;The file containing the conflict markers. You need edit and commit this file.&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Some people name THEIRS and YOURS buffer to LOCAL and REMOTE buffer. That's fine because names are just names. The point is that the top middle buffer is the BASE one which contains the original code before Bob and Chen committing any code. And the bottom buffer is the mess which contains resolved/unresolved conflicts where you actual editing work happens.
&lt;/p&gt;

&lt;p&gt;
You could press hot key &lt;code&gt;,2&lt;/code&gt;,
Then you pick the content from THEIRS buffer (the top left buffer). It means you will use the Bob's code and discard Chen's code in MERGED buffer.
&lt;/p&gt;

&lt;p&gt;
You could press hot key ",3",
Then you pick the content from BASE buffer (the top middle buffer). It means you will discard either Bob's code or Chen's code in MERGED buffer.
&lt;/p&gt;

&lt;p&gt;
You could press hot key ",4",
Then you pick the content from YOURS buffer (the top right buffer). It means you will use Chen's code and discard Bob code in MERGED buffer.
&lt;/p&gt;

&lt;p&gt;
Or you can edit the content directly in MERGED buffer. Anyway, git only care about the file binding to MERGED buffer. Any other buffer will be ignored by git.
&lt;/p&gt;

&lt;p&gt;
You can use hot key &lt;code&gt;[c&lt;/code&gt; and &lt;code&gt;]c&lt;/code&gt; to navigate to previous/next conflict (including the conflict resolved by git automatically) in current file which is binding to MERGED buffer.
&lt;/p&gt;

&lt;p&gt;
After finishing editing of the conflicting file in MERGED buffer, you can use hot key &lt;code&gt;:xa&lt;/code&gt; to exit vimdiff. Git will open next conflicting file vimdiff automatically.
&lt;/p&gt;

&lt;p&gt;
When you have resolved all the conflicts, follow the hint of git to commit your changes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea1e76f" class="outline-2"&gt;
&lt;h3 id="orgea1e76f"&gt;Tips&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgea1e76f"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;fugitive.vim (&lt;a href="https://github.com/tpope/vim-fugitive"&gt;https://github.com/tpope/vim-fugitive&lt;/a&gt;) can do this too. Actually it can do much more git stuff than merge. I cannot write this article without reading its code&lt;/li&gt;
&lt;li&gt;You can use Emacs to do the similar job (&lt;a href="http://stackoverflow.com/questions/1817370/using-ediff-as-git-mergetool"&gt;http://stackoverflow.com/questions/1817370/using-ediff-as-git-mergetool&lt;/a&gt;). For me, Emacs start up time is too much for this task. Some people use &lt;code&gt;emacsclient&lt;/code&gt; which has other overhead I don't like&lt;/li&gt;
&lt;li&gt;If you prefer GUI, use command line `git mergetool -t gvimdiff` instead&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;:diffget&lt;/code&gt; command is valid if and only if there are &lt;b&gt;MARKED&lt;/b&gt; conflicts in merged buffer. If there is &lt;b&gt;NO&lt;/b&gt; marked string like "&amp;gt;&amp;gt;&amp;gt;&amp;gt;" or "&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;" around current change (you can jump to previous/next change by press &lt;code&gt;[c&lt;/code&gt; or &lt;code&gt;]c&lt;/code&gt;), it means the git have automatically resolved potential conflict for you. Reviewing is still wise because git is not as smart as human&lt;/li&gt;
&lt;li&gt;If you prefer navigating between the unresolved conflicts &lt;b&gt;only&lt;/b&gt;, you can install Tim Pope's &lt;a href="https://github.com/tpope/vim-unimpaired"&gt;vim-unimpaired&lt;/a&gt; and use hot key "[n" and "]n" to do the navigation&lt;/li&gt;
&lt;li&gt;I map &lt;code&gt;[n&lt;/code&gt; and &lt;code&gt;]n&lt;/code&gt; to more handy hot keys:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-vimrc"&gt;map ]] ]n
map [[ [n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4aa484" class="outline-2"&gt;
&lt;h3 id="orgf4aa484"&gt;&lt;a id="org74c17b2"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgf4aa484"&gt;
&lt;p&gt;
You can use command line like "git mergetool -t vimdiff" to start vimdiff from git.
&lt;/p&gt;

&lt;p&gt;
So the minimum set up is adding three lines of code into your ~/.vimrc:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-vimrc"&gt;map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;2 :diffget 2&amp;lt;CR&amp;gt; :diffupdate&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;3 :diffget 3&amp;lt;CR&amp;gt; :diffupdate&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;4 :diffget 4&amp;lt;CR&amp;gt; :diffupdate&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Then you can press hot key ",2" ",3" ",4" in vimdiff to pull change from top three buffer. The bottom buffer is for editing the code with markers which is actually your only work space.
&lt;/p&gt;

&lt;p&gt;
":help vimdiff" for other hot keys.
&lt;/p&gt;

&lt;p&gt;
#+image/git-merge-tool-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2013/06/wpid-git-merge-tool-nq8.png" alt="wpid-git-merge-tool-nq8.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4c6d3a7" class="outline-2"&gt;
&lt;h3 id="org4c6d3a7"&gt;subversion/mercurial&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org4c6d3a7"&gt;
&lt;p&gt;
Until now I'm focusing on how to tweak the vimdiff UI because the git has already setup the &lt;a href="https://github.com/git/git/blob/master/mergetools/vimdiff"&gt;basic vimdiff layout for us&lt;/a&gt;. So we just follow the Git layout in other VCS.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd781b7b" class="outline-3"&gt;
&lt;h4 id="orgd781b7b"&gt;subversion&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd781b7b"&gt;
&lt;p&gt;
Insert below code into ~/.subversion/config:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[helpers]
merge-tool-cmd = vimdiff.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Content of vimdiff.sh
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;
#!/bin/sh
#

# Step 1:
# When you get following options during svn merge command, select option 'l'. This is to launch external tool to resolve conflicts.
#
# Conflict discovered in 'main.h'.
# Select: (p) postpone, (df) diff-full, (e) edit,
#        (mc) mine-conflict, (tc) theirs-conflict,
#        (s) show all options: l

# Step 2: Now vim will be opened in diff mode with 3 files - mine, theirs and merged. Make the required changes in the merged file, and do save and exit (:xa).

# Step 3:
# Now below options will appear again, select 'r' (to accept the merged version) now.

BASE=${1}
LOCAL=${2}
REMOTE=${3}
MERGED=${4}
WCPATH=${5}

# copied from from git's vimdiff script
# @see https://github.com/git/git/blob/master/mergetools/vimdiff
vimdiff -f -d -c 'wincmd J' "$MERGED" "$LOCAL" "$BASE" "$REMOTE"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfafa6e7" class="outline-2"&gt;
&lt;h3 id="orgfafa6e7"&gt;mercurial&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgfafa6e7"&gt;
&lt;p&gt;
Insert below code into &lt;code&gt;~/.hgrc&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-ini"&gt;[ui]
merge = vimdiff
[merge-tools]
vimdiff.executable = vim
vimdiff.args = -f -d -c 'wincmd J' "$output" "$local" "$base" "$other" +close +close
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>en</category><category>git</category><category>merge</category><category>mergetool</category><category>vim</category><guid>http://blog.binchen.org/posts/use-vimdiff-to-resolve-git-merge-conflicts-effectively.html</guid><pubDate>Mon, 10 Jun 2013 21:08:00 GMT</pubDate></item></channel></rss>