<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about programming)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 20 Jan 2025 05:51:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Add current directory into load-path in Emacs</title><link>http://redguardtoo.github.io/posts/add-current-directory-into-load-path-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;Useful when developing emacs plugin: &lt;/p&gt;

&lt;pre class="prettyprint lang-lisp"&gt;
(defun add-pwd-into-load-path ()
  "add current directory into load-path, useful for elisp developers"
  (interactive)
  (let ((dir (expand-file-name default-directory)))
    (if (not (memq dir load-path))
        (add-to-list 'load-path dir)
        )
    (message "Directory added into load-path:%s" dir)
    )
  )
&lt;/pre&gt;</description><category>elisp</category><category>emacs</category><category>en</category><category>programming</category><guid>http://redguardtoo.github.io/posts/add-current-directory-into-load-path-in-emacs/</guid><pubDate>Mon, 17 Feb 2014 13:24:23 GMT</pubDate></item><item><title>The minimum packages to install for front end development on Linux</title><link>http://redguardtoo.github.io/posts/the-minimum-packages-to-install-for-front-end-development-on-linux/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;&lt;/p&gt;&lt;pre class="prettyprint "&gt;

sudo apt-get install ack git emacs24-nox feh i3 xsel ctags vim scrot xbindkeys dunst unclutter parcellite gimp
&lt;/pre&gt;</description><category>en</category><category>linux</category><category>programming</category><category>web</category><guid>http://redguardtoo.github.io/posts/the-minimum-packages-to-install-for-front-end-development-on-linux/</guid><pubDate>Mon, 09 Sep 2013 15:05:31 GMT</pubDate></item><item><title>How to refactor/rename a variable name in a function efficiently</title><link>http://redguardtoo.github.io/posts/how-to-refactorrename-a-variable-name-in-a-function-efficiently/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;As we dicussed in &lt;a href="https://plus.google.com/110954683162859211810/posts/TgnyDRqBWkb"&gt;Emacs community at Google+&lt;/a&gt;. Although &lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple-cursor&lt;/a&gt; is good for this task, I cannot use it because it conflicts with my favourite &lt;a href="http://www.emacswiki.org/emacs/Evil"&gt;evil-mode&lt;/a&gt; (Vim simulation in Emacs). &lt;/p&gt; &lt;p&gt; There is another emacs plugin called &lt;a href="https://github.com/victorhge/iedit"&gt;iedit&lt;/a&gt; which could do the similar job (I usually use its command called iedit-mode-toggle-on-function) &lt;/p&gt; &lt;p&gt; Though iedit is good, there is still room for improvement. When using iedit-mode-toggle-on-function, we need press key twice to rename the variable name. Once to enable it, twice to disable it. &lt;/p&gt; &lt;p&gt; Magnar Sveen pointed out in the G+ discussion that the key point we need plugins like multiple-cursor or iedit-mode is that we can see all the changes while doing the editing. &lt;/p&gt; &lt;p&gt; This reminds me that evil-mode has a excellent regex string replacing mode which also show the changes when you are typing EACH character of new string. &lt;/p&gt; &lt;p&gt; So by using evil-mode's default regex replacing command, I can implement similar feature even more efficiently then iedit-mode! &lt;/p&gt; &lt;p&gt; Here is my elisp code: &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;(&lt;span style="color: #b9ca4a;"&gt;defun&lt;/span&gt; &lt;span style="color: #7aa6da;"&gt;evilcvn-change-symbol-in-defun&lt;/span&gt; ()
  &lt;span style="color: #c397d8;"&gt;"mark the region in defun (definition of function) and use string replacing UI in evil-mode&lt;/span&gt;
&lt;span style="color: #c397d8;"&gt;to replace the symbol under cursor"&lt;/span&gt;
  (interactive)
  (&lt;span style="color: #b9ca4a;"&gt;let&lt;/span&gt; ((old (thing-at-point 'symbol)))
    (mark-defun)
    (&lt;span style="color: #b9ca4a;"&gt;unless&lt;/span&gt; (evil-visual-state-p)
      (evil-visual-state))
    (evil-ex (concat &lt;span style="color: #70c0b1;"&gt;"'&amp;lt;,'&amp;gt;s/"&lt;/span&gt; (&lt;span style="color: #b9ca4a;"&gt;if&lt;/span&gt; (= 0 (length old)) &lt;span style="color: #70c0b1;"&gt;""&lt;/span&gt; &lt;span style="color: #70c0b1;"&gt;"\\&amp;lt;&lt;/span&gt;&lt;span style="color: #e7c547; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #c397d8; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #70c0b1;"&gt;"&lt;/span&gt;) old (&lt;span style="color: #b9ca4a;"&gt;if&lt;/span&gt; (= 0 (length old)) &lt;span style="color: #70c0b1;"&gt;""&lt;/span&gt; &lt;span style="color: #70c0b1;"&gt;"&lt;/span&gt;&lt;span style="color: #e7c547; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #c397d8; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #70c0b1;"&gt;\\&amp;gt;/"&lt;/span&gt;))))
  )
(global-set-key (kbd &lt;span style="color: #70c0b1;"&gt;"C-c ; s"&lt;/span&gt;) 'evilcvn-change-symbol-in-defun)

&lt;/pre&gt;   &lt;p&gt; Put you cursor above a symbol/variable and press hot key "Ctrl-c ; s", then the regex to replace that symbol is automatically created and inserted into mini-buffer. Now you only need type new string and watch. &lt;/p&gt; &lt;p&gt; This is the screen shot (I renamed variable "count" into "cnt" in C++ function hello): &lt;img src="http://redguardtoo.github.io/wp-content/uploads/2013/05/wpid-evil-regex-replace-nq8.png" alt="image/evil-regex-replace-nq8.png"&gt; &lt;/p&gt;</description><category>emacs</category><category>en</category><category>evil</category><category>programming</category><guid>http://redguardtoo.github.io/posts/how-to-refactorrename-a-variable-name-in-a-function-efficiently/</guid><pubDate>Thu, 23 May 2013 21:05:00 GMT</pubDate></item><item><title>How to write javascript/html code quickly</title><link>http://redguardtoo.github.io/posts/how-to-write-javascripthtml-code-quickly/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;mixing code of javascript and html is a big problem&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;   &lt;p&gt; If we mix the javascript code into html file as below: &lt;/p&gt;   &lt;pre class="src src-html"&gt;&amp;lt;&lt;span style="color: #81a2be;"&gt;ul&lt;/span&gt;&amp;gt;
  &amp;lt;% for(var key in service.get('Detail')){ %&amp;gt;
    &amp;lt;&lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt; if(key!='creditcard_number){ %&amp;gt;
      &amp;lt;&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;for&lt;/span&gt;='&amp;lt;%= key %&amp;gt;'&amp;gt;&amp;lt;%= key %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;id&lt;/span&gt;='&amp;lt;%=key %&amp;gt;'&amp;gt;&amp;lt;%= service.get('Details')[key] %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;% }&lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;
&amp;lt;% } &lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;

&amp;lt;/&lt;span style="color: #81a2be;"&gt;ul&lt;/span&gt;&amp;gt;



&lt;/pre&gt;  &lt;p&gt; Then it's hard to write/debug/fix the javascript code because: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;html code becomes noise for javascript development. &lt;/li&gt; &lt;li&gt;The syntax checker for javascript will not work properly. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; If  we mix the html code into javascript file as below: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #b5bd68;"&gt;for&lt;/span&gt;(&lt;span style="color: #b5bd68;"&gt;var&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;key&lt;/span&gt; &lt;span style="color: #b5bd68;"&gt;in&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Detail'&lt;/span&gt;)){
  &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(key!=&lt;span style="color: #8abeb7;"&gt;'creditcard_number'&lt;/span&gt;){
    htmlRender(formatString(&lt;span style="color: #8abeb7;"&gt;"&amp;lt;li&amp;gt;&amp;lt;label for='%s'&amp;gt;%s&amp;lt;/label&amp;gt;&amp;lt;div id='%s'&amp;gt;%s&amp;lt;/div&amp;gt;"&lt;/span&gt;,key,key,service.get(&lt;span style="color: #8abeb7;"&gt;'Details'&lt;/span&gt;)[key]));
  }
}

&lt;/pre&gt;  &lt;p&gt; Now html code becomes hard to write/debug/fix because: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;javascript code becomes noise for html development. &lt;/li&gt; &lt;li&gt;The syntax checker for html will not work properly. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; In summary, mixing code in different language syntax will: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;make code hard to read &lt;/li&gt; &lt;li&gt;make syntax checker dysfunctional &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; These are the top two causes why we can not code fast in real application. &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Use functional programming to avoid mix the javascript and html&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;So here is our objective: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;We need put the business logic into javascript file. The logic usually contains "for/while/if" statements. &lt;/li&gt; &lt;li&gt;Html tags like "&amp;lt;div&amp;gt;/&amp;lt;span&amp;gt;/&amp;lt;ul&amp;gt;/&amp;lt;li&amp;gt;" need be placed in html file. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; The solution is actually simple. We just need apply a little bit of functional programming skill. &lt;/p&gt; &lt;p&gt; So here is our html file in functional programming style: &lt;/p&gt;   &lt;pre class="src src-html"&gt;&amp;lt;% forEachAttributeInService(service,function(service,key) { %&amp;gt;
   &amp;lt;&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;for&lt;/span&gt;='&amp;lt;%= key %&amp;gt;'&amp;gt;&amp;lt;%= key %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;id&lt;/span&gt;='&amp;lt;%=key %&amp;gt;'&amp;gt;&amp;lt;%= formatServiceAttributes(service,key) %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;/&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;%  }); &lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;

&lt;/pre&gt;   &lt;p&gt; Here is the javascript file: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;forEachAttributeInService&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;service&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;fn&lt;/span&gt;) {
  &lt;span style="color: #b5bd68;"&gt;for&lt;/span&gt;(&lt;span style="color: #b5bd68;"&gt;var&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;key&lt;/span&gt; &lt;span style="color: #b5bd68;"&gt;in&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Detail'&lt;/span&gt;)){
    &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(key!=&lt;span style="color: #8abeb7;"&gt;'creditcard_number'&lt;/span&gt;){
      fn(service,key)
    }
  }
}



&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;formatServiceAttributes&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;service&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;key&lt;/span&gt;) {
  &lt;span style="color: #b5bd68;"&gt;return&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Details'&lt;/span&gt;)[key];
}

&lt;/pre&gt;   &lt;p&gt; Now let's check what happens. &lt;/p&gt; &lt;p&gt; In the html file, the business logic is converted into combination of functional calls. &lt;/p&gt; &lt;p&gt; In javascript file, all the code dealing with hard coded html tags are converted to the call of anonymous functions. Those anonymous function is basically dump of html tags which is defined in html file. &lt;/p&gt; &lt;p&gt; You can use this technique to convert any existing code into new style. For example, a simple "if else" statement could be re-written in new style: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #969896; font-style: italic;"&gt;/* &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;code in old style */&lt;/span&gt;

&lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt; (&lt;span style="color: #de935f;"&gt;true&lt;/span&gt;){
  console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;YES&amp;lt;/li&amp;gt;'&lt;/span&gt;);
} &lt;span style="color: #b5bd68;"&gt;else&lt;/span&gt; {
  console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;NO&amp;lt;/li&amp;gt;'&lt;/span&gt;);
}



&lt;span style="color: #969896; font-style: italic;"&gt;/* &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;code in new style */&lt;/span&gt;

&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;func_if_else&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;f1&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;f2&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;f3&lt;/span&gt;){
  &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(f1()){
    f2();
  } &lt;span style="color: #b5bd68;"&gt;else&lt;/span&gt; {
    f3();
  }
}



&lt;span style="color: #969896; font-style: italic;"&gt;/* &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;the execution of func_if_else() */&lt;/span&gt;

func_if_else(&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){ &lt;span style="color: #b5bd68;"&gt;return&lt;/span&gt; &lt;span style="color: #de935f;"&gt;true&lt;/span&gt; },
           &lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){
             console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;YES&amp;lt;/li&amp;gt;'&lt;/span&gt;);
           },
           &lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){
             console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;NO&amp;lt;/li&amp;gt;'&lt;/span&gt;);
           });
&lt;/pre&gt;   &lt;p&gt; This is a kind of radical example. I'm only demonstrating the power of new style. I'm not suggesting you should convert any logic statement into function call. New style is not a silver bullet. It's only a useful if used properly in right timing. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;</description><category>emacs</category><category>en</category><category>html</category><category>javascript</category><category>programming</category><guid>http://redguardtoo.github.io/posts/how-to-write-javascripthtml-code-quickly/</guid><pubDate>Wed, 22 May 2013 10:24:00 GMT</pubDate></item><item><title>Search at both stackoverflow and google code in Emacs</title><link>http://redguardtoo.github.io/posts/search-the-word-under-cursor-in-stackoverflow-com-and-google-code-search/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;Two programming sites are most valuable to me: &lt;/p&gt;&lt;dl&gt; &lt;dt&gt;stackoverflow.com&lt;/dt&gt;&lt;dd&gt;solution design and code prototype &lt;/dd&gt; &lt;dt&gt;google code search&lt;/dt&gt;&lt;dd&gt;code sample from real product &lt;/dd&gt; &lt;/dl&gt;   &lt;p&gt; So I write some elisp code w3mext-hacker-search to automate the workflow. &lt;/p&gt; &lt;p&gt; Copy the into ~/.emacs and you can use hotkey "C-c ; s" to open search results in external browser (firefox, for example): &lt;/p&gt;   &lt;pre class="src src-elisp"&gt;&lt;span style="color: #969896; font-style: italic;"&gt;; &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;external browser should be firefox&lt;/span&gt;
(setq browse-url-generic-program
      (&lt;span style="color: #b9ca4a;"&gt;cond&lt;/span&gt;
       (*is-a-mac* &lt;span style="color: #70c0b1;"&gt;"open"&lt;/span&gt;)
       (*linux* (executable-find &lt;span style="color: #70c0b1;"&gt;"firefox"&lt;/span&gt;))
       ))


&lt;span style="color: #969896; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;use external browser to search&lt;/span&gt;

(&lt;span style="color: #b9ca4a;"&gt;defun&lt;/span&gt; &lt;span style="color: #7aa6da;"&gt;w3mext-hacker-search&lt;/span&gt; ()
  &lt;span style="color: #c397d8;"&gt;"search word under cursor in google code search and stackoverflow.com"&lt;/span&gt;
  (interactive)
  (&lt;span style="color: #b9ca4a;"&gt;require&lt;/span&gt; '&lt;span style="color: #e78c45;"&gt;w3m&lt;/span&gt;)
  (&lt;span style="color: #b9ca4a;"&gt;let&lt;/span&gt; ((keyword (w3m-url-encode-string (thing-at-point 'symbol))))
    (browse-url-generic (concat &lt;span style="color: #70c0b1;"&gt;"http://code.google.com/codesearch?q="&lt;/span&gt; keyword))
    (browse-url-generic (concat &lt;span style="color: #70c0b1;"&gt;"http://www.google.com.au/search?hl=en&amp;amp;q="&lt;/span&gt; keyword &lt;span style="color: #70c0b1;"&gt;"+site:stackoverflow.com"&lt;/span&gt; )))
  )


(add-hook 'prog-mode-hook '( lambda () (local-set-key (kbd &lt;span style="color: #70c0b1;"&gt;"C-c ; s"&lt;/span&gt;) 'w3mext-hacker-search)) )

&lt;/pre&gt;</description><category>emacs</category><category>en</category><category>programming</category><category>search</category><category>stackoverflow</category><guid>http://redguardtoo.github.io/posts/search-the-word-under-cursor-in-stackoverflow-com-and-google-code-search/</guid><pubDate>Wed, 23 Jan 2013 09:18:00 GMT</pubDate></item></channel></rss>