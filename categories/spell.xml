<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about spell)</title><link>http://redguardtoo.github.io/</link><description></description><atom:link href="http://redguardtoo.github.io/categories/spell.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 20 Jan 2025 05:51:36 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Hardcore spell checking in Emacs</title><link>http://redguardtoo.github.io/posts/hardcore-spell-checking-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
This article is not introduction of Emacs spell checking basics. It requires deep knowledge of Emacs Lisp and Fly Spell.
&lt;/p&gt;

&lt;p&gt;
You could read my article &lt;a href="https://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs"&gt;What's the best spell check setup in emacs&lt;/a&gt; for basic knowledge.
&lt;/p&gt;

&lt;p&gt;
This article introduces &lt;b&gt;new techniques to make Fly Spell more powerful and faster&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The CLI programs aspell and hunspell can only parse plain text. They don't know any programming language syntax.
&lt;/p&gt;

&lt;p&gt;
Fly Spell feeds the output of CLI program into its own Lisp predicate named &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt; whose default value is nil.
&lt;/p&gt;

&lt;p&gt;
When executing &lt;code&gt;(flyspell-mode 1)&lt;/code&gt;, the &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L655"&gt;per mode predicate is assigned&lt;/a&gt; to &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
For example, you can run &lt;code&gt;(get major-mode 'flyspell-mode-predicate)&lt;/code&gt; to get predicate of current major mode, &lt;code&gt;(get 'web-mode 'flyspell-mode-predicate)&lt;/code&gt; to get predicate of &lt;code&gt;web-mode&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
The predicate is a simple function without parameter. Here is my predicate for &lt;code&gt;web-mode&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun my-web-mode-flyspell-verify ()
  "Fly Spell predicate of `web-mode`."
  (let* ((font-face-at-point (get-text-property (- (point) 1) 'face))
         rlt)
    ;; If rlt is t, the word at point is POSSIBLY a typo, continue checking.
    (setq rlt t)
    ;; if rlt is nil, the word at point is definitely NOT a typo.
    ;; (setq rlt nil)
    rlt))
;; Attach my predicate to `web-mode`
(put 'web-mode 'flyspell-mode-predicate 'my-web-mode-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If you read code of &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L435"&gt;flyspell-prog-mode&lt;/a&gt;, you will find it set &lt;code&gt;flyspell-generic-check-word-predicate&lt;/code&gt; to its own predicate &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar flyspell-prog-text-faces
  '(font-lock-string-face font-lock-comment-face font-lock-doc-face)
  "Faces corresponding to text in programming-mode buffers.")

(defun flyspell-generic-progmode-verify ()
  "Used for `flyspell-generic-check-word-predicate' in programming modes."
  (unless (eql (point) (point-min))
    ;; (point) is next char after the word. Must check one char before.
    (let ((f (get-text-property (1- (point)) 'face)))
      (memq f flyspell-prog-text-faces))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt; is very simple. If the word at point is not inside comment or string, the predicate returns nil which means the word is not a typo.
&lt;/p&gt;

&lt;p&gt;
So in theory I can write my own predicate by following &lt;code&gt;flyspell-generic-progmode-verify&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
But in reality it's not as simple as it seems. The predicate is written in Lisp so it's slow. If it contains too much code, Fly Spell process might block other actions in Emacs. Emacs could be un-responsive when editing text.
&lt;/p&gt;

&lt;p&gt;
The solution is not to start Fly Spell process too frequently.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;flyspell-mode&lt;/code&gt; starts checking when &lt;a href="https://github.com/emacs-mirror/emacs/blob/c6fb86b40bebf597fccbe4eba58ceea83bd9700f/lisp/textmodes/flyspell.el#L158"&gt;text in current buffer is modified&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
My solution is not to turn on &lt;code&gt;flyspell-mode&lt;/code&gt;. Instead, I manage the spell checking by myself using APIs from flyspell.
&lt;/p&gt;

&lt;p&gt;
I only spell check when user saving current buffer. The interval between spell check should not be less than 5 minutes. Spell check is done by calling API &lt;code&gt;flyspell-buffer&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
Checking the whole buffer is still slow. Instead, we can check the text region in current window by calling &lt;code&gt;flyspell-region&lt;/code&gt; instead. The api &lt;code&gt;window-total-height&lt;/code&gt; returns the height of current Windows. So I can use below code to get the region to check,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(let* (beg end (orig-pos (point)))
  (save-excursion
    (forward-line (- (window-total-height)))
    (setq beg (line-beginning-position))
    (goto-char orig-pos)
    (forward-line (window-total-height))
    (setq end (line-end-position)))
  (flyspell-region beg end))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I also need respect the predicate embedded in the major mode in my own generic predicate. Since per mode predicate has already checked the font face, I should &lt;a href="https://github.com/redguardtoo/wucuo/blob/49d2ae558068954eb8c4324b8ee7a6b2b0a00ef9/wucuo.el#L320"&gt;skip the font face check in generic predicate if per mode predicate exists&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Above algorithms are implemented in &lt;a href="https://github.com/redguardtoo/wucuo"&gt;wucuo&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Usage,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(add-hook 'prog-mode-hook 'wucuo-start)
(add-hook 'text-mode-hook 'wucuo-start)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If &lt;code&gt;wucuo-flyspell-start-mode&lt;/code&gt; is "fast" (default value), &lt;code&gt;flyspell-region&lt;/code&gt; is used, visible region is checked when user saves current file.
&lt;/p&gt;

&lt;p&gt;
If &lt;code&gt;wucuo-flyspell-start-mode&lt;/code&gt; is "normal", &lt;code&gt;flyspell-buffer&lt;/code&gt; is used, current buffer is checked when user saves current file.
&lt;/p&gt;</description><category>check</category><category>emacs</category><category>en</category><category>flyspell</category><category>spell</category><guid>http://redguardtoo.github.io/posts/hardcore-spell-checking-in-emacs/</guid><pubDate>Sun, 17 May 2020 06:20:55 GMT</pubDate></item><item><title>What's the best spell check setup in emacs</title><link>http://redguardtoo.github.io/posts/what-s-the-best-spell-check-set-up-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2021-06-15 Tue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-04-26 Sat&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I will show the minimum setup and explain details.
&lt;/p&gt;

&lt;p&gt;
Topics covered in official manual (&lt;code&gt;flyspell-mode-predicate&lt;/code&gt;, for example) are NOT discussed.
&lt;/p&gt;

&lt;p&gt;
You can check my &lt;b&gt;complete&lt;/b&gt; configuration &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="outline-container-orgdf4bcbb" class="outline-2"&gt;
&lt;h3 id="orgdf4bcbb"&gt;Suggestion for non-programmers&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgdf4bcbb"&gt;
&lt;p&gt;
Emacs finds the right dictionary by querying the locale.
&lt;/p&gt;

&lt;p&gt;
You can run the command &lt;code&gt;locale&lt;/code&gt; in the shell to get current locale.
&lt;/p&gt;

&lt;p&gt;
Below set up force Emacs to use the dictionary "en_US":
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; find aspell and hunspell automatically
(cond
 ;; try hunspell at first
  ;; if hunspell does NOT exist, use aspell
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))

  ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
  ;; If it's nil, Emacs tries to automatically set up the dictionaries.
  (when (boundp 'ispell-hunspell-dictionary-alist)
    (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))

 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
That's it!
&lt;/p&gt;

&lt;p&gt;
Some people prefer hunspell because &lt;b&gt;hunspell gives better suggestions for typo fix&lt;/b&gt;. We can run both programs to demonstrate,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;echo htink | aspell -a --sug-mode=ultra --lang=en_US
echo htink | hunspell -a -d en_US
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Run &lt;code&gt;man aspell&lt;/code&gt; or &lt;code&gt;man hunspell&lt;/code&gt; in shell if you have more questions. I've nothing more to say.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org50f27d5" class="outline-2"&gt;
&lt;h3 id="org50f27d5"&gt;Suggestion for programmers&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org50f27d5"&gt;
&lt;p&gt;
I recommend aspell instead of hunspell (Though hunspell is fine).
&lt;/p&gt;

&lt;p&gt;
Please insert below code into your &lt;code&gt;~/.emacs&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun flyspell-detect-ispell-args (&amp;amp;optional run-together)
  "if RUN-TOGETHER is true, spell check the CamelCase words."
  (let (args)
    (cond
     ((string-match  "aspell$" ispell-program-name)
      ;; Force the English dictionary for aspell
      ;; Support Camel Case spelling check (tested with aspell 0.6)
      (setq args (list "--sug-mode=ultra" "--lang=en_US"))
      (when run-together
        (cond
         ;; Kevin Atkinson said now aspell supports camel case directly
         ;; https://github.com/redguardtoo/emacs.d/issues/796
         ((string-match-p "--camel-case"
                          (shell-command-to-string (concat ispell-program-name " --help")))
          (setq args (append args '("--camel-case"))))

         ;; old aspell uses "--run-together". Please note we are not dependent on this option
         ;; to check camel case word. wucuo is the final solution. This aspell options is just
         ;; some extra check to speed up the whole process.
         (t
          (setq args (append args '("--run-together" "--run-together-limit=16")))))))

     ((string-match "hunspell$" ispell-program-name)
      ;; Force the English dictionary for hunspell
      (setq args "-d en_US")))
    args))

(cond
 ((executable-find "aspell")
  ;; you may also need `ispell-extra-args'
  (setq ispell-program-name "aspell"))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")

  ;; Please note that `ispell-local-dictionary' itself will be passed to hunspell cli with "-d"
  ;; it's also used as the key to lookup `ispell-local-dictionary-alist'
  ;; if we use different dictionary
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
  ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
  ;; If it's nil, Emacs tries to automatically set up the dictionaries.
  (when (boundp 'ispell-hunspell-dictionary-alist)
    (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))

 (t (setq ispell-program-name nil)))

;; `ispell-cmd-args' is useless, it's the list of *extra* arguments we will append to the ispell process when `ispell-word' is called.
;; `ispell-extra-args' is the command arguments which will *always* be used when start ispell process
;; Please note when you use hunspell, `ispell-extra-args' will NOT be used.
;; Hack `ispell-local-dictionary-alist' instead.
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))

(defun my-ispell-word-hack (orig-func &amp;amp;rest args)
  "Use Emacs original arguments when calling `ispell-word'.
When fixing a typo, avoid pass camel case option to cli program."
  (let* ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original argument
    (setq ispell-extra-args (my-detect-ispell-args))
    (apply orig-func args)
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)))
(advice-add 'ispell-word :around #'my-ispell-word-hack)
(advice-add 'flyspell-auto-correct-word :around #'my-ispell-word-hack)

(defun text-mode-hook-setup ()
  ;; Turn off RUN-TOGETHER option when spell check text-mode
  (setq-local ispell-extra-args (flyspell-detect-ispell-args)))
(add-hook 'text-mode-hook 'text-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
There is one minor issue in this setup. If a camel case word contains correct two character sub-word. Aspell will regard the word as typo. So aspell might produce some noise (aspell 0.60.8 has new option &lt;code&gt;--camel-case&lt;/code&gt; which solves this problem completely).
&lt;/p&gt;

&lt;p&gt;
See &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el"&gt;https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el&lt;/a&gt; for the solution. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1e10734" class="outline-2"&gt;
&lt;h3 id="org1e10734"&gt;Why&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org1e10734"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org665618a" class="outline-3"&gt;
&lt;h4 id="org665618a"&gt;Aspell&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org665618a"&gt;
&lt;p&gt;
aspell is recommended because its option &lt;code&gt;--run-together&lt;/code&gt; (since aspell 0.60.8, option &lt;code&gt;--camel-case&lt;/code&gt; replaces &lt;code&gt;=run-together&lt;/code&gt;). That option could check the &lt;b&gt;camel case word&lt;/b&gt;. Variable name often uses camel case naming convention these days. Read my &lt;a href="http://blog.binchen.org/?p=950"&gt;Effective spell check in Emacs&lt;/a&gt; for advanced tips.
&lt;/p&gt;

&lt;p&gt;
If Emacs starts an aspell process with &lt;code&gt;--run-together&lt;/code&gt; option, that process is not closed so it can be re-used by other commands.
&lt;/p&gt;

&lt;p&gt;
This behavior will be a problem if you want Emacs/aspell correct the typo by running the command &lt;code&gt;ispell-word&lt;/code&gt; because an aspell process with "–run-together" will produce too much noise.
&lt;/p&gt;

&lt;p&gt;
For example, for a typo "helle" Emacs will give you extra candidates. It's hard to find the desired word "hello":
&lt;img src="http://redguardtoo.github.io/wp-content/aspell-camelcase-suggest-nq8.png" alt="aspell-camelcase-suggest-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
The better solution is before running "M-x ispell-word", we'd better restart the aspell process without the argument "–run-together".
&lt;/p&gt;

&lt;p&gt;
Here is the screen shot after we applying this fix:
&lt;img src="http://redguardtoo.github.io/wp-content/aspell-normal-suggest-nq8.png" alt="aspell-normal-suggest-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
As I mentioned, the global variable &lt;code&gt;ispell-extra-args&lt;/code&gt; contains arguments Emacs will always append to a spell checker process (aspell). That's the &lt;b&gt;only variable&lt;/b&gt; you need care about.
&lt;/p&gt;

&lt;p&gt;
There is another variable &lt;code&gt;ispell-cmd-args&lt;/code&gt;. It is actually some &lt;b&gt;extra&lt;/b&gt; arguments Emacs could send to the &lt;b&gt;existing&lt;/b&gt; spell checker process when you "M-x ispell-word". In my opinion, it's useless. I mention it because its name is confusing. &lt;code&gt;ispell-extra-args&lt;/code&gt; contains command line arguments the spell checker &lt;b&gt;always&lt;/b&gt; uses. The &lt;code&gt;ispell-cmd-args&lt;/code&gt; contains the extra arguments which &lt;b&gt;might&lt;/b&gt; be used.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9f77556" class="outline-3"&gt;
&lt;h4 id="org9f77556"&gt;Hunspell&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org9f77556"&gt;
&lt;p&gt;
I cannot find hunspell option to check camel case words.
&lt;/p&gt;

&lt;p&gt;
Hunspell always checks the environment variable LC_ALL, LC_MESSAGES and LANG &lt;b&gt;at first&lt;/b&gt; to find the default dictionary unless you give it the dictionary in the command line. If it cannot find the default dictionary, the spell checker process won't start. Aspell does not have this issue. For example, if aspell cannot find the zh_CN dictionary, it will fall back into English dictionary.
&lt;/p&gt;

&lt;p&gt;
Specify the &lt;code&gt;ispell-extra-args&lt;/code&gt; &lt;b&gt;will NOT stop hunspell to search for the default dictionary&lt;/b&gt; at the beginning because &lt;code&gt;ispell-extra-args&lt;/code&gt; is NOT used by hunspell.
&lt;/p&gt;

&lt;p&gt;
For example, I am a Chinese and my locale is &lt;code&gt;zh_CN.utf-8&lt;/code&gt;. So hunspell always searches the dictionary zh_CN. Even I'm only interested in English spell checking.
&lt;/p&gt;

&lt;p&gt;
To specify the dictionary explicitly, I need hack the Emacs code which is kind of mess.
&lt;/p&gt;

&lt;p&gt;
Finally, I figured out,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq ispell-program-name "hunspell")
;; below two lines reset the the hunspell to it STOPS querying locale!
(setq ispell-local-dictionary "en_US") ; "en_US" is key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
;; If it's nil, Emacs tries to automatically set up the dictionaries.
(when (boundp 'ispell-hunspell-dictionary-alist)
  (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
You can pass the extra arguments to the hunspell by tweaking &lt;code&gt;ispell-local-dictionary-alist&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf7b5eb3" class="outline-2"&gt;
&lt;h3 id="orgf7b5eb3"&gt;FAQ&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgf7b5eb3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8c753c2" class="outline-3"&gt;
&lt;h4 id="org8c753c2"&gt;How to setup Hunspell&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org8c753c2"&gt;
&lt;p&gt;
The easiest way is to set up environment variable &lt;code&gt;DICPATH&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
For example, on macOS (LibreOffice is installed first),
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;export DICPATH=/Applications/LibreOffice.app/Contents/Resources/extensions/dict-en:/Applications/LibreOffice.app/Contents/Resources/extensions/dict-es
hunspell -D # list available/loaded dictionaries
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
You can also run &lt;code&gt;hunspell -D&lt;/code&gt; in shell to figure out where hunspell actually searches dictionaries.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>aspell</category><category>check</category><category>emacs</category><category>en</category><category>hunspell</category><category>ispell</category><category>spell</category><guid>http://redguardtoo.github.io/posts/what-s-the-best-spell-check-set-up-in-emacs/</guid><pubDate>Mon, 21 Apr 2014 08:25:20 GMT</pubDate></item><item><title>Effective spell check in Emacs</title><link>http://redguardtoo.github.io/posts/effective-spell-check-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-01-21 Tue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2016-12-07 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I use &lt;a href="http://www.emacswiki.org/emacs/FlySpell"&gt;Flyspell&lt;/a&gt; in web-mode as sample.  Other major modes also works.
&lt;/p&gt;

&lt;p&gt;
At first, please  turn on &lt;code&gt;flyspell&lt;/code&gt; for all programming languages by inserting below code into &lt;code&gt;.emacs&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
There is also a &lt;a href="http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs"&gt;short tutorial&lt;/a&gt; on:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;How to setup flyspell&lt;/li&gt;
&lt;li&gt;Difference between hunspell and aspell&lt;/li&gt;
&lt;li&gt;How to setup hunspell&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="outline-container-org8b1f199" class="outline-2"&gt;
&lt;h3 id="org8b1f199"&gt;Spell check in HTML&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8b1f199"&gt;
&lt;p&gt;
I will spell check,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Text between html tag like &lt;code&gt;&amp;lt;label&amp;gt;Please input email&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value of html input control like &lt;code&gt;&amp;lt;input type&lt;/code&gt;"text" value="Please input your name"&amp;gt;=&lt;/li&gt;
&lt;li&gt;CSS class name like &lt;code&gt;&amp;lt;div class&lt;/code&gt;"btn btn-default" /&amp;gt;=&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
My setup:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; {{ flyspell setup for web-mode
(defun web-mode-flyspell-verify ()
  (let* ((f (get-text-property (- (point) 1) 'face))
         rlt)
    (cond
     ;; Check the words with these font faces, possibly.
     ;; this *blacklist* will be tweaked in next condition
     ((not (memq f '(web-mode-html-attr-value-face
                     web-mode-html-tag-face
                     web-mode-html-attr-name-face
                     web-mode-constant-face
                     web-mode-doctype-face
                     web-mode-keyword-face
                     web-mode-comment-face ;; focus on get html label right
                     web-mode-function-name-face
                     web-mode-variable-name-face
                     web-mode-css-property-name-face
                     web-mode-css-selector-face
                     web-mode-css-color-face
                     web-mode-type-face
                     web-mode-block-control-face)))
      (setq rlt t))
     ;; check attribute value under certain conditions
     ((memq f '(web-mode-html-attr-value-face))
      (save-excursion
        (search-backward-regexp "=['\"]" (line-beginning-position) t)
        (backward-char)
        (setq rlt (string-match "^\\(value\\|class\\|ng[A-Za-z0-9-]*\\)$"
                                (thing-at-point 'symbol)))))
     ;; finalize the blacklist
     (t
      (setq rlt nil)))
    rlt))
(put 'web-mode 'flyspell-mode-predicate 'web-mode-flyspell-verify)
;; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
I use &lt;a href="http://web-mode.org/"&gt;web-mode&lt;/a&gt; for HTML files. The technique applies on other modes (php-mode, html-mode ….) .
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org681d4e6" class="outline-2"&gt;
&lt;h3 id="org681d4e6"&gt;Don't display doublon (double word) as error&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org681d4e6"&gt;
&lt;p&gt;
Modern CSS frameworks like &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; make doublon unavoidable. For example, CSS class name &lt;code&gt;btn btn-default&lt;/code&gt; contains double word &lt;code&gt;btn&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
So we need stop displaying doublon as error in HTML,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar flyspell-check-doublon t
  "Check doublon (double word) when calling `flyspell-highlight-incorrect-region'.")
 (make-variable-buffer-local 'flyspell-check-doublon)

(defadvice flyspell-highlight-incorrect-region (around flyspell-highlight-incorrect-region-hack activate)
  (if (or flyspell-check-doublon (not (eq 'doublon (ad-get-arg 2))))
      ad-do-it))

(defun web-mode-hook-setup ()
  (flyspell-mode 1)
  (setq flyspell-check-doublon nil))

(add-hook 'web-mode-hook 'web-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb8d23d0" class="outline-2"&gt;
&lt;h3 id="orgb8d23d0"&gt;Spell check camel case strings&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgb8d23d0"&gt;
&lt;p&gt;
We can check camel cased string/variable/function if and only if &lt;a href="http://aspell.net/"&gt;aspell&lt;/a&gt; is used.
&lt;/p&gt;

&lt;p&gt;
Insert below code into &lt;code&gt;.emacs&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(setq ispell-program-name "aspell"
      ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
      ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f037c5" class="outline-2"&gt;
&lt;h3 id="org4f037c5"&gt;Summary&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org4f037c5"&gt;
&lt;p&gt;
&lt;a href="http://www.emacswiki.org/emacs/FlySpell"&gt;EmacsWiki&lt;/a&gt; suggests &lt;code&gt;(flyspell-prog-mode)&lt;/code&gt; which only checks typo in comments.
&lt;/p&gt;

&lt;p&gt;
But as I proved, Emacs gives you full freedom to design a &lt;b&gt;different&lt;/b&gt; solution.
&lt;/p&gt;

&lt;p&gt;
Screen shot (typos are underscored):
&lt;/p&gt;


&lt;div id="org7444f4f" class="figure"&gt;
&lt;p&gt;&lt;img src="http://redguardtoo.github.io/wp-content/spell-check-html-in-emacs.png" alt="spell-check-html-in-emacs.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4a9e133" class="outline-2"&gt;
&lt;h3 id="org4a9e133"&gt;Javascript and ReactJS setup (OPTIONAL)&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org4a9e133"&gt;
&lt;p&gt;
If you fully understand my previous sections, you don't need read this section.
&lt;/p&gt;

&lt;p&gt;
Insert below code into &lt;code&gt;.emacs&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun js-flyspell-verify ()
  (let* ((f (get-text-property (- (point) 1) 'face)))
    ;; *whitelist*
    ;; only words with following font face will be checked
    (memq f '(js2-function-call
              js2-function-param
              js2-object-property
              font-lock-variable-name-face
              font-lock-string-face
              font-lock-function-name-face))))
(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
(put 'rjsx-mode 'flyspell-mode-predicate 'js-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>en</category><category>linux</category><category>spell</category><guid>http://redguardtoo.github.io/posts/effective-spell-check-in-emacs/</guid><pubDate>Tue, 21 Jan 2014 12:00:00 GMT</pubDate></item></channel></rss>