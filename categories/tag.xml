<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chen's blog (Posts about tag)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/tag.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 12 Sep 2020 03:02:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Navigate/Select html tags in Emacs</title><link>http://blog.binchen.org/posts/navigateselect-html-tags-in-emacs/</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-11-03 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Navigate/select html tags is kind of difficult. I've not found any plugin which could match Vim's &lt;a href="http://www.vim.org/scripts/script.php?script_id=39"&gt;matchit&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The most close one in Emacs is &lt;a href="https://github.com/Fuco1/smartparens"&gt;smartparens&lt;/a&gt;. You can check this &lt;a href="https://plus.google.com/110954683162859211810/posts/4Hb2FUkaPsp"&gt;discussion on Google Plus&lt;/a&gt; to get general impression.
&lt;/p&gt;

&lt;p&gt;
I use  &lt;code&gt;sp-select-next-thing&lt;/code&gt; from &lt;code&gt;smarparens&lt;/code&gt; to select html tags. But I'm not satisfied with this command because it's picky on the location of my cursor and selection of multiple html tags is buggy.
&lt;/p&gt;

&lt;p&gt;
So here is my fix, the new command &lt;code&gt;my-sp-select-next-thing&lt;/code&gt; which fix all these issues.
&lt;/p&gt;

&lt;p&gt;
Screen cast:
&lt;img src="https://dl.dropboxusercontent.com/u/858862/my-sp-select-next-thing.gif" alt="my-sp-select-next-thing.gif"&gt;
&lt;/p&gt;

&lt;p&gt;
Here is the code to insert it into your &lt;code&gt;~/.emacs&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; make sp-select-next-thing works even the cusor is in the open/close tag
;; like matchit in vim
;; @return t =&amp;gt; start from open tag; nil start from close tag
(defun my-sp-select-next-thing (&amp;amp;optional NUM)
  (interactive "p")
  (let* ((b (line-beginning-position))
         (e (line-end-position))
         (char (following-char))
         (p (point))
         rbeg
         rend
         (rlt t))
    ;; "&amp;lt;" char code is 60
    ;; search backward
    (if (not (= char 60))
        (save-excursion
          (while (and (&amp;lt;= b (point)) (not (= char 60)))
            (setq char (following-char))
            (setq p (point))
            (backward-char))))
    ;; search forward
    (if (not (= char 60))
        (save-excursion
          (while (and (&amp;gt;= e (point)) (not (= char 60)))
            (setq char (following-char))
            (setq p (point))
            (forward-char))))
    ;; do the real thing
    (when (and (= char 60) (&amp;lt; p e))
      (goto-char p)
      (forward-char)
      (if (= (following-char) 47)
          (progn
            ;; &amp;lt;/
            (backward-char)
            (setq rlt nil))
        (progn
          ;; &amp;lt; , looks fine
          (backward-char)
          (setq rlt t)))
      (sp-select-next-thing)
      (setq rbeg (region-beginning))
      (setq rend (region-end))

      (while (&amp;gt; NUM 1)
        ;; well, sp-select-next-thing is kind of wierd
        (re-search-forward "&amp;lt;[^!]")
        (backward-char 2)
        (sp-select-next-thing)
        (setq rend (region-end))
        (setq NUM (1- NUM)))
      (push-mark rbeg t t)
      (goto-char (1-rend)))
    rlt))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Navigation is easy. After selecting the tags, press &lt;code&gt;C-x C-x&lt;/code&gt; to move the focus. That's it.
&lt;/p&gt;

&lt;p&gt;
For evil-mode, I write some code which simulate the famous &lt;b&gt;matchit&lt;/b&gt; in vi:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'evil)

;; {{ evil-matchit
(defun my-evil-jump-item-enhanced-for-html ()
  (interactive)
  (if (or (eq major-mode 'html-mode)
          (eq major-mode 'xml-mode)
          (eq major-mode 'nxml-mode))
      (progn
        (if (not (my-sp-select-next-thing 1)) (exchange-point-and-mark))
        (deactivate-mark))
    (progn
      (evil-jump-item))))
(define-key evil-normal-state-map "%" 'my-evil-jump-item-enhanced-for-html)
;; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Now you can press &lt;code&gt;%&lt;/code&gt; in evil to jump between tags!
&lt;/p&gt;

&lt;p&gt;
Requirement:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;smartparens-1.5&lt;/li&gt;
&lt;li&gt;evil-1.0.7&lt;/li&gt;
&lt;li&gt;emacs-24.2.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
BTW, I also tried the web-mode-tag-match in &lt;a href="https://github.com/fxbois/web-mode"&gt;web-mode&lt;/a&gt; which provided similar tag match feature.
&lt;/p&gt;

&lt;p&gt;
At least now (2nd October,2013) web-mode does not support &lt;a href="http://freemarker.org/"&gt;freemarker&lt;/a&gt; syntax. But smartparens is more tolerant to these template syntax.
&lt;/p&gt;

&lt;p&gt;
UPDATE (6th Nov, 2013):
I started a new project &lt;a href="https://github.com/redguardtoo/evil-matchit"&gt;evil-matchit&lt;/a&gt; which is not dependent on smartparens. Please check it out. But you can still use my old code because it support more languages.
&lt;/p&gt;

&lt;p&gt;
UPDATED (13rd Jan, 2014):
&lt;a href="https://github.com/redguardtoo/evil-matchit"&gt;evil-matchit&lt;/a&gt; is now powerful enough to replace my old tricks.
&lt;/p&gt;&lt;/div&gt;</description><category>en</category><category>html</category><category>matchit</category><category>selection</category><category>tag</category><guid>http://blog.binchen.org/posts/navigateselect-html-tags-in-emacs/</guid><pubDate>Thu, 22 Aug 2013 00:05:00 GMT</pubDate></item></channel></rss>